
l4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a970  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  0800ab30  0800ab30  0001ab30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b09c  0800b09c  000202a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b09c  0800b09c  0001b09c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0a4  0800b0a4  000202a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0a4  0800b0a4  0001b0a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b0a8  0800b0a8  0001b0a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a4  20000000  0800b0ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000122c  200002a4  0800b350  000202a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014d0  0800b350  000214d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000235c6  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004964  00000000  00000000  0004389a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b58  00000000  00000000  00048200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001940  00000000  00000000  00049d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e111  00000000  00000000  0004b698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fcd1  00000000  00000000  000797a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ba98  00000000  00000000  0009947a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b4f12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008134  00000000  00000000  001b4f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200002a4 	.word	0x200002a4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800ab18 	.word	0x0800ab18

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200002a8 	.word	0x200002a8
 80001fc:	0800ab18 	.word	0x0800ab18

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 b96e 	b.w	8000ecc <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468c      	mov	ip, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f040 8083 	bne.w	8000d1e <__udivmoddi4+0x116>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4617      	mov	r7, r2
 8000c1c:	d947      	bls.n	8000cae <__udivmoddi4+0xa6>
 8000c1e:	fab2 f282 	clz	r2, r2
 8000c22:	b142      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	f1c2 0020 	rsb	r0, r2, #32
 8000c28:	fa24 f000 	lsr.w	r0, r4, r0
 8000c2c:	4091      	lsls	r1, r2
 8000c2e:	4097      	lsls	r7, r2
 8000c30:	ea40 0c01 	orr.w	ip, r0, r1
 8000c34:	4094      	lsls	r4, r2
 8000c36:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c3a:	0c23      	lsrs	r3, r4, #16
 8000c3c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c40:	fa1f fe87 	uxth.w	lr, r7
 8000c44:	fb08 c116 	mls	r1, r8, r6, ip
 8000c48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x60>
 8000c54:	18fb      	adds	r3, r7, r3
 8000c56:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c5a:	f080 8119 	bcs.w	8000e90 <__udivmoddi4+0x288>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 8116 	bls.w	8000e90 <__udivmoddi4+0x288>
 8000c64:	3e02      	subs	r6, #2
 8000c66:	443b      	add	r3, r7
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c70:	fb08 3310 	mls	r3, r8, r0, r3
 8000c74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c7c:	45a6      	cmp	lr, r4
 8000c7e:	d909      	bls.n	8000c94 <__udivmoddi4+0x8c>
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c86:	f080 8105 	bcs.w	8000e94 <__udivmoddi4+0x28c>
 8000c8a:	45a6      	cmp	lr, r4
 8000c8c:	f240 8102 	bls.w	8000e94 <__udivmoddi4+0x28c>
 8000c90:	3802      	subs	r0, #2
 8000c92:	443c      	add	r4, r7
 8000c94:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c98:	eba4 040e 	sub.w	r4, r4, lr
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	b11d      	cbz	r5, 8000ca8 <__udivmoddi4+0xa0>
 8000ca0:	40d4      	lsrs	r4, r2
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca8:	4631      	mov	r1, r6
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	b902      	cbnz	r2, 8000cb2 <__udivmoddi4+0xaa>
 8000cb0:	deff      	udf	#255	; 0xff
 8000cb2:	fab2 f282 	clz	r2, r2
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	d150      	bne.n	8000d5c <__udivmoddi4+0x154>
 8000cba:	1bcb      	subs	r3, r1, r7
 8000cbc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc0:	fa1f f887 	uxth.w	r8, r7
 8000cc4:	2601      	movs	r6, #1
 8000cc6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cca:	0c21      	lsrs	r1, r4, #16
 8000ccc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0xe4>
 8000cdc:	1879      	adds	r1, r7, r1
 8000cde:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0xe2>
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	f200 80e9 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000cea:	4684      	mov	ip, r0
 8000cec:	1ac9      	subs	r1, r1, r3
 8000cee:	b2a3      	uxth	r3, r4
 8000cf0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cf8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cfc:	fb08 f800 	mul.w	r8, r8, r0
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x10c>
 8000d04:	193c      	adds	r4, r7, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x10a>
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	f200 80d9 	bhi.w	8000ec4 <__udivmoddi4+0x2bc>
 8000d12:	4618      	mov	r0, r3
 8000d14:	eba4 0408 	sub.w	r4, r4, r8
 8000d18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1c:	e7bf      	b.n	8000c9e <__udivmoddi4+0x96>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0x12e>
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	f000 80b1 	beq.w	8000e8a <__udivmoddi4+0x282>
 8000d28:	2600      	movs	r6, #0
 8000d2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2e:	4630      	mov	r0, r6
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f683 	clz	r6, r3
 8000d3a:	2e00      	cmp	r6, #0
 8000d3c:	d14a      	bne.n	8000dd4 <__udivmoddi4+0x1cc>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0x140>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80b8 	bhi.w	8000eb8 <__udivmoddi4+0x2b0>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	468c      	mov	ip, r1
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	d0a8      	beq.n	8000ca8 <__udivmoddi4+0xa0>
 8000d56:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d5a:	e7a5      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000d5c:	f1c2 0320 	rsb	r3, r2, #32
 8000d60:	fa20 f603 	lsr.w	r6, r0, r3
 8000d64:	4097      	lsls	r7, r2
 8000d66:	fa01 f002 	lsl.w	r0, r1, r2
 8000d6a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6e:	40d9      	lsrs	r1, r3
 8000d70:	4330      	orrs	r0, r6
 8000d72:	0c03      	lsrs	r3, r0, #16
 8000d74:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d78:	fa1f f887 	uxth.w	r8, r7
 8000d7c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb06 f108 	mul.w	r1, r6, r8
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x19c>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d96:	f080 808d 	bcs.w	8000eb4 <__udivmoddi4+0x2ac>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 808a 	bls.w	8000eb4 <__udivmoddi4+0x2ac>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b281      	uxth	r1, r0
 8000da8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000db0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db4:	fb00 f308 	mul.w	r3, r0, r8
 8000db8:	428b      	cmp	r3, r1
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x1c4>
 8000dbc:	1879      	adds	r1, r7, r1
 8000dbe:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000dc2:	d273      	bcs.n	8000eac <__udivmoddi4+0x2a4>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d971      	bls.n	8000eac <__udivmoddi4+0x2a4>
 8000dc8:	3802      	subs	r0, #2
 8000dca:	4439      	add	r1, r7
 8000dcc:	1acb      	subs	r3, r1, r3
 8000dce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dd2:	e778      	b.n	8000cc6 <__udivmoddi4+0xbe>
 8000dd4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dd8:	fa03 f406 	lsl.w	r4, r3, r6
 8000ddc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000de0:	431c      	orrs	r4, r3
 8000de2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000de6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dee:	fa21 f10c 	lsr.w	r1, r1, ip
 8000df2:	431f      	orrs	r7, r3
 8000df4:	0c3b      	lsrs	r3, r7, #16
 8000df6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dfa:	fa1f f884 	uxth.w	r8, r4
 8000dfe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e02:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e06:	fb09 fa08 	mul.w	sl, r9, r8
 8000e0a:	458a      	cmp	sl, r1
 8000e0c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e10:	fa00 f306 	lsl.w	r3, r0, r6
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x220>
 8000e16:	1861      	adds	r1, r4, r1
 8000e18:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e1c:	d248      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e1e:	458a      	cmp	sl, r1
 8000e20:	d946      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4421      	add	r1, r4
 8000e28:	eba1 010a 	sub.w	r1, r1, sl
 8000e2c:	b2bf      	uxth	r7, r7
 8000e2e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e32:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e36:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e3a:	fb00 f808 	mul.w	r8, r0, r8
 8000e3e:	45b8      	cmp	r8, r7
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x24a>
 8000e42:	19e7      	adds	r7, r4, r7
 8000e44:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e48:	d22e      	bcs.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e4a:	45b8      	cmp	r8, r7
 8000e4c:	d92c      	bls.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4427      	add	r7, r4
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	eba7 0708 	sub.w	r7, r7, r8
 8000e5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5e:	454f      	cmp	r7, r9
 8000e60:	46c6      	mov	lr, r8
 8000e62:	4649      	mov	r1, r9
 8000e64:	d31a      	bcc.n	8000e9c <__udivmoddi4+0x294>
 8000e66:	d017      	beq.n	8000e98 <__udivmoddi4+0x290>
 8000e68:	b15d      	cbz	r5, 8000e82 <__udivmoddi4+0x27a>
 8000e6a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e6e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e72:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e76:	40f2      	lsrs	r2, r6
 8000e78:	ea4c 0202 	orr.w	r2, ip, r2
 8000e7c:	40f7      	lsrs	r7, r6
 8000e7e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e82:	2600      	movs	r6, #0
 8000e84:	4631      	mov	r1, r6
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e70b      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e9      	b.n	8000c68 <__udivmoddi4+0x60>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6fd      	b.n	8000c94 <__udivmoddi4+0x8c>
 8000e98:	4543      	cmp	r3, r8
 8000e9a:	d2e5      	bcs.n	8000e68 <__udivmoddi4+0x260>
 8000e9c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ea0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7df      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e7d2      	b.n	8000e52 <__udivmoddi4+0x24a>
 8000eac:	4660      	mov	r0, ip
 8000eae:	e78d      	b.n	8000dcc <__udivmoddi4+0x1c4>
 8000eb0:	4681      	mov	r9, r0
 8000eb2:	e7b9      	b.n	8000e28 <__udivmoddi4+0x220>
 8000eb4:	4666      	mov	r6, ip
 8000eb6:	e775      	b.n	8000da4 <__udivmoddi4+0x19c>
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e74a      	b.n	8000d52 <__udivmoddi4+0x14a>
 8000ebc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec0:	4439      	add	r1, r7
 8000ec2:	e713      	b.n	8000cec <__udivmoddi4+0xe4>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	443c      	add	r4, r7
 8000ec8:	e724      	b.n	8000d14 <__udivmoddi4+0x10c>
 8000eca:	bf00      	nop

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	2120      	movs	r1, #32
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f001 f983 	bl	80021ec <SENSOR_IO_Read>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	f023 0304 	bic.w	r3, r3, #4
 8000ef0:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	f023 0303 	bic.w	r3, r3, #3
 8000f00:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f10:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8000f12:	88fb      	ldrh	r3, [r7, #6]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	7bfa      	ldrb	r2, [r7, #15]
 8000f18:	2120      	movs	r1, #32
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f001 f94c 	bl	80021b8 <SENSOR_IO_Write>
}
 8000f20:	bf00      	nop
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000f32:	2300      	movs	r3, #0
 8000f34:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8000f36:	f001 f935 	bl	80021a4 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	210f      	movs	r1, #15
 8000f40:	4618      	mov	r0, r3
 8000f42:	f001 f953 	bl	80021ec <SENSOR_IO_Read>
 8000f46:	4603      	mov	r3, r0
 8000f48:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8000f5e:	88fb      	ldrh	r3, [r7, #6]
 8000f60:	b2d8      	uxtb	r0, r3
 8000f62:	f107 020c 	add.w	r2, r7, #12
 8000f66:	2302      	movs	r3, #2
 8000f68:	21b0      	movs	r1, #176	; 0xb0
 8000f6a:	f001 f95d 	bl	8002228 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8000f6e:	7b3b      	ldrb	r3, [r7, #12]
 8000f70:	085b      	lsrs	r3, r3, #1
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8000f76:	7b7b      	ldrb	r3, [r7, #13]
 8000f78:	085b      	lsrs	r3, r3, #1
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8000f7e:	88fb      	ldrh	r3, [r7, #6]
 8000f80:	b2d8      	uxtb	r0, r3
 8000f82:	f107 020c 	add.w	r2, r7, #12
 8000f86:	2302      	movs	r3, #2
 8000f88:	21b6      	movs	r1, #182	; 0xb6
 8000f8a:	f001 f94d 	bl	8002228 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000f8e:	7b7b      	ldrb	r3, [r7, #13]
 8000f90:	021b      	lsls	r3, r3, #8
 8000f92:	b21a      	sxth	r2, r3
 8000f94:	7b3b      	ldrb	r3, [r7, #12]
 8000f96:	b21b      	sxth	r3, r3
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8000f9c:	88fb      	ldrh	r3, [r7, #6]
 8000f9e:	b2d8      	uxtb	r0, r3
 8000fa0:	f107 020c 	add.w	r2, r7, #12
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	21ba      	movs	r1, #186	; 0xba
 8000fa8:	f001 f93e 	bl	8002228 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000fac:	7b7b      	ldrb	r3, [r7, #13]
 8000fae:	021b      	lsls	r3, r3, #8
 8000fb0:	b21a      	sxth	r2, r3
 8000fb2:	7b3b      	ldrb	r3, [r7, #12]
 8000fb4:	b21b      	sxth	r3, r3
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8000fba:	88fb      	ldrh	r3, [r7, #6]
 8000fbc:	b2d8      	uxtb	r0, r3
 8000fbe:	f107 020c 	add.w	r2, r7, #12
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	21a8      	movs	r1, #168	; 0xa8
 8000fc6:	f001 f92f 	bl	8002228 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000fca:	7b7b      	ldrb	r3, [r7, #13]
 8000fcc:	021b      	lsls	r3, r3, #8
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	7b3b      	ldrb	r3, [r7, #12]
 8000fd2:	b21b      	sxth	r3, r3
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8000fd8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000fdc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	ee07 3a90 	vmov	s15, r3
 8000fe6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fea:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000fee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	ee07 3a90 	vmov	s15, r3
 8000ff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ffc:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001000:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001004:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	ee07 3a90 	vmov	s15, r3
 800100e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001016:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800101a:	ee07 3a90 	vmov	s15, r3
 800101e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001022:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001026:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 800102a:	edd7 7a04 	vldr	s15, [r7, #16]
 800102e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001032:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001036:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800103a:	edd7 7a04 	vldr	s15, [r7, #16]
 800103e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001084 <HTS221_H_ReadHumidity+0x130>
 8001042:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104a:	dd01      	ble.n	8001050 <HTS221_H_ReadHumidity+0xfc>
 800104c:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <HTS221_H_ReadHumidity+0x134>)
 800104e:	e00a      	b.n	8001066 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8001050:	edd7 7a04 	vldr	s15, [r7, #16]
 8001054:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105c:	d502      	bpl.n	8001064 <HTS221_H_ReadHumidity+0x110>
 800105e:	f04f 0300 	mov.w	r3, #0
 8001062:	e000      	b.n	8001066 <HTS221_H_ReadHumidity+0x112>
 8001064:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8001066:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8001068:	edd7 7a04 	vldr	s15, [r7, #16]
 800106c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001070:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001074:	eef0 7a66 	vmov.f32	s15, s13
}
 8001078:	eeb0 0a67 	vmov.f32	s0, s15
 800107c:	3720      	adds	r7, #32
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	447a0000 	.word	0x447a0000
 8001088:	447a0000 	.word	0x447a0000

0800108c <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2120      	movs	r1, #32
 800109e:	4618      	mov	r0, r3
 80010a0:	f001 f8a4 	bl	80021ec <SENSOR_IO_Read>
 80010a4:	4603      	mov	r3, r0
 80010a6:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	f023 0304 	bic.w	r3, r3, #4
 80010ae:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	f043 0304 	orr.w	r3, r3, #4
 80010b6:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	f023 0303 	bic.w	r3, r3, #3
 80010be:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010ce:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80010d0:	88fb      	ldrh	r3, [r7, #6]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	7bfa      	ldrb	r2, [r7, #15]
 80010d6:	2120      	movs	r1, #32
 80010d8:	4618      	mov	r0, r3
 80010da:	f001 f86d 	bl	80021b8 <SENSOR_IO_Write>
}
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b088      	sub	sp, #32
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80010f0:	88fb      	ldrh	r3, [r7, #6]
 80010f2:	b2d8      	uxtb	r0, r3
 80010f4:	f107 0208 	add.w	r2, r7, #8
 80010f8:	2302      	movs	r3, #2
 80010fa:	21b2      	movs	r1, #178	; 0xb2
 80010fc:	f001 f894 	bl	8002228 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001100:	88fb      	ldrh	r3, [r7, #6]
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2135      	movs	r1, #53	; 0x35
 8001106:	4618      	mov	r0, r3
 8001108:	f001 f870 	bl	80021ec <SENSOR_IO_Read>
 800110c:	4603      	mov	r3, r0
 800110e:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001110:	7ffb      	ldrb	r3, [r7, #31]
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	b21b      	sxth	r3, r3
 8001116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800111a:	b21a      	sxth	r2, r3
 800111c:	7a3b      	ldrb	r3, [r7, #8]
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001124:	7ffb      	ldrb	r3, [r7, #31]
 8001126:	019b      	lsls	r3, r3, #6
 8001128:	b21b      	sxth	r3, r3
 800112a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800112e:	b21a      	sxth	r2, r3
 8001130:	7a7b      	ldrb	r3, [r7, #9]
 8001132:	b21b      	sxth	r3, r3
 8001134:	4313      	orrs	r3, r2
 8001136:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001138:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800113c:	10db      	asrs	r3, r3, #3
 800113e:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8001140:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001144:	10db      	asrs	r3, r3, #3
 8001146:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001148:	88fb      	ldrh	r3, [r7, #6]
 800114a:	b2d8      	uxtb	r0, r3
 800114c:	f107 0208 	add.w	r2, r7, #8
 8001150:	2304      	movs	r3, #4
 8001152:	21bc      	movs	r1, #188	; 0xbc
 8001154:	f001 f868 	bl	8002228 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001158:	7a7b      	ldrb	r3, [r7, #9]
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	b21a      	sxth	r2, r3
 800115e:	7a3b      	ldrb	r3, [r7, #8]
 8001160:	b21b      	sxth	r3, r3
 8001162:	4313      	orrs	r3, r2
 8001164:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001166:	7afb      	ldrb	r3, [r7, #11]
 8001168:	021b      	lsls	r3, r3, #8
 800116a:	b21a      	sxth	r2, r3
 800116c:	7abb      	ldrb	r3, [r7, #10]
 800116e:	b21b      	sxth	r3, r3
 8001170:	4313      	orrs	r3, r2
 8001172:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	b2d8      	uxtb	r0, r3
 8001178:	f107 0208 	add.w	r2, r7, #8
 800117c:	2302      	movs	r3, #2
 800117e:	21aa      	movs	r1, #170	; 0xaa
 8001180:	f001 f852 	bl	8002228 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001184:	7a7b      	ldrb	r3, [r7, #9]
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	b21a      	sxth	r2, r3
 800118a:	7a3b      	ldrb	r3, [r7, #8]
 800118c:	b21b      	sxth	r3, r3
 800118e:	4313      	orrs	r3, r2
 8001190:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001192:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001196:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	ee07 3a90 	vmov	s15, r3
 80011a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80011a8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	ee07 3a90 	vmov	s15, r3
 80011b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80011ba:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80011be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	ee07 3a90 	vmov	s15, r3
 80011c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80011d0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80011d4:	ee07 3a90 	vmov	s15, r3
 80011d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e0:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	ee07 3a90 	vmov	s15, r3
}
 80011ea:	eeb0 0a67 	vmov.f32	s0, s15
 80011ee:	3720      	adds	r7, #32
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	463b      	mov	r3, r7
 80011fc:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8001200:	783b      	ldrb	r3, [r7, #0]
 8001202:	461a      	mov	r2, r3
 8001204:	2120      	movs	r1, #32
 8001206:	203c      	movs	r0, #60	; 0x3c
 8001208:	f000 ffd6 	bl	80021b8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 800120c:	787b      	ldrb	r3, [r7, #1]
 800120e:	461a      	mov	r2, r3
 8001210:	2121      	movs	r1, #33	; 0x21
 8001212:	203c      	movs	r0, #60	; 0x3c
 8001214:	f000 ffd0 	bl	80021b8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8001218:	78bb      	ldrb	r3, [r7, #2]
 800121a:	461a      	mov	r2, r3
 800121c:	2122      	movs	r1, #34	; 0x22
 800121e:	203c      	movs	r0, #60	; 0x3c
 8001220:	f000 ffca 	bl	80021b8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8001224:	78fb      	ldrb	r3, [r7, #3]
 8001226:	461a      	mov	r2, r3
 8001228:	2123      	movs	r1, #35	; 0x23
 800122a:	203c      	movs	r0, #60	; 0x3c
 800122c:	f000 ffc4 	bl	80021b8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8001230:	793b      	ldrb	r3, [r7, #4]
 8001232:	461a      	mov	r2, r3
 8001234:	2124      	movs	r1, #36	; 0x24
 8001236:	203c      	movs	r0, #60	; 0x3c
 8001238:	f000 ffbe 	bl	80021b8 <SENSOR_IO_Write>
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800124a:	2300      	movs	r3, #0
 800124c:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800124e:	2122      	movs	r1, #34	; 0x22
 8001250:	203c      	movs	r0, #60	; 0x3c
 8001252:	f000 ffcb 	bl	80021ec <SENSOR_IO_Read>
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	f023 0303 	bic.w	r3, r3, #3
 8001260:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	f043 0303 	orr.w	r3, r3, #3
 8001268:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	461a      	mov	r2, r3
 800126e:	2122      	movs	r1, #34	; 0x22
 8001270:	203c      	movs	r0, #60	; 0x3c
 8001272:	f000 ffa1 	bl	80021b8 <SENSOR_IO_Write>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001282:	f000 ff8f 	bl	80021a4 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8001286:	210f      	movs	r1, #15
 8001288:	203c      	movs	r0, #60	; 0x3c
 800128a:	f000 ffaf 	bl	80021ec <SENSOR_IO_Read>
 800128e:	4603      	mov	r3, r0
}
 8001290:	4618      	mov	r0, r3
 8001292:	bd80      	pop	{r7, pc}

08001294 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80012a2:	2122      	movs	r1, #34	; 0x22
 80012a4:	203c      	movs	r0, #60	; 0x3c
 80012a6:	f000 ffa1 	bl	80021ec <SENSOR_IO_Read>
 80012aa:	4603      	mov	r3, r0
 80012ac:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	f023 0320 	bic.w	r3, r3, #32
 80012b4:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	f043 0320 	orr.w	r3, r3, #32
 80012c2:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	461a      	mov	r2, r3
 80012c8:	2122      	movs	r1, #34	; 0x22
 80012ca:	203c      	movs	r0, #60	; 0x3c
 80012cc:	f000 ff74 	bl	80021b8 <SENSOR_IO_Write>
}
 80012d0:	bf00      	nop
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80012e8:	f04f 0300 	mov.w	r3, #0
 80012ec:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 80012ee:	2121      	movs	r1, #33	; 0x21
 80012f0:	203c      	movs	r0, #60	; 0x3c
 80012f2:	f000 ff7b 	bl	80021ec <SENSOR_IO_Read>
 80012f6:	4603      	mov	r3, r0
 80012f8:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 80012fa:	f107 0208 	add.w	r2, r7, #8
 80012fe:	2306      	movs	r3, #6
 8001300:	21a8      	movs	r1, #168	; 0xa8
 8001302:	203c      	movs	r0, #60	; 0x3c
 8001304:	f000 ff90 	bl	8002228 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001308:	2300      	movs	r3, #0
 800130a:	77fb      	strb	r3, [r7, #31]
 800130c:	e01f      	b.n	800134e <LIS3MDL_MagReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800130e:	7ffb      	ldrb	r3, [r7, #31]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	3301      	adds	r3, #1
 8001314:	f107 0220 	add.w	r2, r7, #32
 8001318:	4413      	add	r3, r2
 800131a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800131e:	b29b      	uxth	r3, r3
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	b29a      	uxth	r2, r3
 8001324:	7ffb      	ldrb	r3, [r7, #31]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	f107 0120 	add.w	r1, r7, #32
 800132c:	440b      	add	r3, r1
 800132e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001332:	b29b      	uxth	r3, r3
 8001334:	4413      	add	r3, r2
 8001336:	b29a      	uxth	r2, r3
 8001338:	7ffb      	ldrb	r3, [r7, #31]
 800133a:	b212      	sxth	r2, r2
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	f107 0120 	add.w	r1, r7, #32
 8001342:	440b      	add	r3, r1
 8001344:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001348:	7ffb      	ldrb	r3, [r7, #31]
 800134a:	3301      	adds	r3, #1
 800134c:	77fb      	strb	r3, [r7, #31]
 800134e:	7ffb      	ldrb	r3, [r7, #31]
 8001350:	2b02      	cmp	r3, #2
 8001352:	d9dc      	bls.n	800130e <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8001354:	7dfb      	ldrb	r3, [r7, #23]
 8001356:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800135a:	2b60      	cmp	r3, #96	; 0x60
 800135c:	d013      	beq.n	8001386 <LIS3MDL_MagReadXYZ+0xae>
 800135e:	2b60      	cmp	r3, #96	; 0x60
 8001360:	dc14      	bgt.n	800138c <LIS3MDL_MagReadXYZ+0xb4>
 8001362:	2b40      	cmp	r3, #64	; 0x40
 8001364:	d00c      	beq.n	8001380 <LIS3MDL_MagReadXYZ+0xa8>
 8001366:	2b40      	cmp	r3, #64	; 0x40
 8001368:	dc10      	bgt.n	800138c <LIS3MDL_MagReadXYZ+0xb4>
 800136a:	2b00      	cmp	r3, #0
 800136c:	d002      	beq.n	8001374 <LIS3MDL_MagReadXYZ+0x9c>
 800136e:	2b20      	cmp	r3, #32
 8001370:	d003      	beq.n	800137a <LIS3MDL_MagReadXYZ+0xa2>
 8001372:	e00b      	b.n	800138c <LIS3MDL_MagReadXYZ+0xb4>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8001374:	4b19      	ldr	r3, [pc, #100]	; (80013dc <LIS3MDL_MagReadXYZ+0x104>)
 8001376:	61bb      	str	r3, [r7, #24]
    break;
 8001378:	e008      	b.n	800138c <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <LIS3MDL_MagReadXYZ+0x108>)
 800137c:	61bb      	str	r3, [r7, #24]
    break;
 800137e:	e005      	b.n	800138c <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8001380:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <LIS3MDL_MagReadXYZ+0x10c>)
 8001382:	61bb      	str	r3, [r7, #24]
    break;
 8001384:	e002      	b.n	800138c <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <LIS3MDL_MagReadXYZ+0x110>)
 8001388:	61bb      	str	r3, [r7, #24]
    break;    
 800138a:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 800138c:	2300      	movs	r3, #0
 800138e:	77fb      	strb	r3, [r7, #31]
 8001390:	e01b      	b.n	80013ca <LIS3MDL_MagReadXYZ+0xf2>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001392:	7ffb      	ldrb	r3, [r7, #31]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	f107 0220 	add.w	r2, r7, #32
 800139a:	4413      	add	r3, r2
 800139c:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80013ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b0:	7ffb      	ldrb	r3, [r7, #31]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	4413      	add	r3, r2
 80013b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013bc:	ee17 2a90 	vmov	r2, s15
 80013c0:	b212      	sxth	r2, r2
 80013c2:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80013c4:	7ffb      	ldrb	r3, [r7, #31]
 80013c6:	3301      	adds	r3, #1
 80013c8:	77fb      	strb	r3, [r7, #31]
 80013ca:	7ffb      	ldrb	r3, [r7, #31]
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d9e0      	bls.n	8001392 <LIS3MDL_MagReadXYZ+0xba>
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3720      	adds	r7, #32
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	3e0f5c29 	.word	0x3e0f5c29
 80013e0:	3e947ae1 	.word	0x3e947ae1
 80013e4:	3edc28f6 	.word	0x3edc28f6
 80013e8:	3f147ae1 	.word	0x3f147ae1

080013ec <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 80013f6:	88fb      	ldrh	r3, [r7, #6]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 f87b 	bl	80014f4 <LPS22HB_Init>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8001406:	b580      	push	{r7, lr}
 8001408:	b084      	sub	sp, #16
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001410:	2300      	movs	r3, #0
 8001412:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001414:	f000 fec6 	bl	80021a4 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8001418:	88fb      	ldrh	r3, [r7, #6]
 800141a:	b2db      	uxtb	r3, r3
 800141c:	210f      	movs	r1, #15
 800141e:	4618      	mov	r0, r3
 8001420:	f000 fee4 	bl	80021ec <SENSOR_IO_Read>
 8001424:	4603      	mov	r3, r0
 8001426:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8001442:	2300      	movs	r3, #0
 8001444:	74fb      	strb	r3, [r7, #19]
 8001446:	e013      	b.n	8001470 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8001448:	88fb      	ldrh	r3, [r7, #6]
 800144a:	b2da      	uxtb	r2, r3
 800144c:	7cfb      	ldrb	r3, [r7, #19]
 800144e:	3328      	adds	r3, #40	; 0x28
 8001450:	b2db      	uxtb	r3, r3
 8001452:	7cfc      	ldrb	r4, [r7, #19]
 8001454:	4619      	mov	r1, r3
 8001456:	4610      	mov	r0, r2
 8001458:	f000 fec8 	bl	80021ec <SENSOR_IO_Read>
 800145c:	4603      	mov	r3, r0
 800145e:	461a      	mov	r2, r3
 8001460:	f107 0318 	add.w	r3, r7, #24
 8001464:	4423      	add	r3, r4
 8001466:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 800146a:	7cfb      	ldrb	r3, [r7, #19]
 800146c:	3301      	adds	r3, #1
 800146e:	74fb      	strb	r3, [r7, #19]
 8001470:	7cfb      	ldrb	r3, [r7, #19]
 8001472:	2b02      	cmp	r3, #2
 8001474:	d9e8      	bls.n	8001448 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8001476:	2300      	movs	r3, #0
 8001478:	74fb      	strb	r3, [r7, #19]
 800147a:	e010      	b.n	800149e <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 800147c:	7cfb      	ldrb	r3, [r7, #19]
 800147e:	f107 0218 	add.w	r2, r7, #24
 8001482:	4413      	add	r3, r2
 8001484:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001488:	461a      	mov	r2, r3
 800148a:	7cfb      	ldrb	r3, [r7, #19]
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	4313      	orrs	r3, r2
 8001496:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8001498:	7cfb      	ldrb	r3, [r7, #19]
 800149a:	3301      	adds	r3, #1
 800149c:	74fb      	strb	r3, [r7, #19]
 800149e:	7cfb      	ldrb	r3, [r7, #19]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d9eb      	bls.n	800147c <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80014b4:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2264      	movs	r2, #100	; 0x64
 80014be:	fb02 f303 	mul.w	r3, r2, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	da01      	bge.n	80014ca <LPS22HB_P_ReadPressure+0x96>
 80014c6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80014ca:	131b      	asrs	r3, r3, #12
 80014cc:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	ee07 3a90 	vmov	s15, r3
 80014d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014d8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80014f0 <LPS22HB_P_ReadPressure+0xbc>
 80014dc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014e0:	eef0 7a66 	vmov.f32	s15, s13
}
 80014e4:	eeb0 0a67 	vmov.f32	s0, s15
 80014e8:	371c      	adds	r7, #28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd90      	pop	{r4, r7, pc}
 80014ee:	bf00      	nop
 80014f0:	42c80000 	.word	0x42c80000

080014f4 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	211a      	movs	r1, #26
 8001504:	4618      	mov	r0, r3
 8001506:	f000 fe71 	bl	80021ec <SENSOR_IO_Read>
 800150a:	4603      	mov	r3, r0
 800150c:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	f023 0301 	bic.w	r3, r3, #1
 8001514:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 800151e:	88fb      	ldrh	r3, [r7, #6]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	7bfa      	ldrb	r2, [r7, #15]
 8001524:	211a      	movs	r1, #26
 8001526:	4618      	mov	r0, r3
 8001528:	f000 fe46 	bl	80021b8 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2110      	movs	r1, #16
 8001532:	4618      	mov	r0, r3
 8001534:	f000 fe5a 	bl	80021ec <SENSOR_IO_Read>
 8001538:	4603      	mov	r3, r0
 800153a:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001542:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800154a:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	f023 0302 	bic.w	r3, r3, #2
 8001552:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	f043 0302 	orr.w	r3, r3, #2
 800155a:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 800155c:	88fb      	ldrh	r3, [r7, #6]
 800155e:	b2db      	uxtb	r3, r3
 8001560:	7bfa      	ldrb	r2, [r7, #15]
 8001562:	2110      	movs	r1, #16
 8001564:	4618      	mov	r0, r3
 8001566:	f000 fe27 	bl	80021b8 <SENSOR_IO_Write>
}  
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8001572:	b580      	push	{r7, lr}
 8001574:	b084      	sub	sp, #16
 8001576:	af00      	add	r7, sp, #0
 8001578:	4603      	mov	r3, r0
 800157a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800157c:	2300      	movs	r3, #0
 800157e:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001580:	2110      	movs	r1, #16
 8001582:	20d4      	movs	r0, #212	; 0xd4
 8001584:	f000 fe32 	bl	80021ec <SENSOR_IO_Read>
 8001588:	4603      	mov	r3, r0
 800158a:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800158c:	88fb      	ldrh	r3, [r7, #6]
 800158e:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001590:	7bbb      	ldrb	r3, [r7, #14]
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001598:	7bba      	ldrb	r2, [r7, #14]
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	4313      	orrs	r3, r2
 800159e:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80015a0:	7bbb      	ldrb	r3, [r7, #14]
 80015a2:	461a      	mov	r2, r3
 80015a4:	2110      	movs	r1, #16
 80015a6:	20d4      	movs	r0, #212	; 0xd4
 80015a8:	f000 fe06 	bl	80021b8 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80015ac:	2112      	movs	r1, #18
 80015ae:	20d4      	movs	r0, #212	; 0xd4
 80015b0:	f000 fe1c 	bl	80021ec <SENSOR_IO_Read>
 80015b4:	4603      	mov	r3, r0
 80015b6:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	0a1b      	lsrs	r3, r3, #8
 80015bc:	b29b      	uxth	r3, r3
 80015be:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80015c0:	7bbb      	ldrb	r3, [r7, #14]
 80015c2:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80015c6:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80015c8:	7bba      	ldrb	r2, [r7, #14]
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80015d0:	7bbb      	ldrb	r3, [r7, #14]
 80015d2:	461a      	mov	r2, r3
 80015d4:	2112      	movs	r1, #18
 80015d6:	20d4      	movs	r0, #212	; 0xd4
 80015d8:	f000 fdee 	bl	80021b8 <SENSOR_IO_Write>
}
 80015dc:	bf00      	nop
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80015ea:	2300      	movs	r3, #0
 80015ec:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80015ee:	2110      	movs	r1, #16
 80015f0:	20d4      	movs	r0, #212	; 0xd4
 80015f2:	f000 fdfb 	bl	80021ec <SENSOR_IO_Read>
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	f003 030f 	and.w	r3, r3, #15
 8001600:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	461a      	mov	r2, r3
 8001606:	2110      	movs	r1, #16
 8001608:	20d4      	movs	r0, #212	; 0xd4
 800160a:	f000 fdd5 	bl	80021b8 <SENSOR_IO_Write>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8001616:	b580      	push	{r7, lr}
 8001618:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 800161a:	f000 fdc3 	bl	80021a4 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800161e:	210f      	movs	r1, #15
 8001620:	20d4      	movs	r0, #212	; 0xd4
 8001622:	f000 fde3 	bl	80021ec <SENSOR_IO_Read>
 8001626:	4603      	mov	r3, r0
}
 8001628:	4618      	mov	r0, r3
 800162a:	bd80      	pop	{r7, pc}

0800162c <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001636:	2300      	movs	r3, #0
 8001638:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800163a:	2115      	movs	r1, #21
 800163c:	20d4      	movs	r0, #212	; 0xd4
 800163e:	f000 fdd5 	bl	80021ec <SENSOR_IO_Read>
 8001642:	4603      	mov	r3, r0
 8001644:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	f023 0310 	bic.w	r3, r3, #16
 800164c:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800164e:	88fb      	ldrh	r3, [r7, #6]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	f043 0310 	orr.w	r3, r3, #16
 800165a:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	461a      	mov	r2, r3
 8001660:	2115      	movs	r1, #21
 8001662:	20d4      	movs	r0, #212	; 0xd4
 8001664:	f000 fda8 	bl	80021b8 <SENSOR_IO_Write>
}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8001678:	2300      	movs	r3, #0
 800167a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001680:	f04f 0300 	mov.w	r3, #0
 8001684:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001686:	2110      	movs	r1, #16
 8001688:	20d4      	movs	r0, #212	; 0xd4
 800168a:	f000 fdaf 	bl	80021ec <SENSOR_IO_Read>
 800168e:	4603      	mov	r3, r0
 8001690:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8001692:	f107 0208 	add.w	r2, r7, #8
 8001696:	2306      	movs	r3, #6
 8001698:	2128      	movs	r1, #40	; 0x28
 800169a:	20d4      	movs	r0, #212	; 0xd4
 800169c:	f000 fdc4 	bl	8002228 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80016a0:	2300      	movs	r3, #0
 80016a2:	77fb      	strb	r3, [r7, #31]
 80016a4:	e01f      	b.n	80016e6 <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80016a6:	7ffb      	ldrb	r3, [r7, #31]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	3301      	adds	r3, #1
 80016ac:	f107 0220 	add.w	r2, r7, #32
 80016b0:	4413      	add	r3, r2
 80016b2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	021b      	lsls	r3, r3, #8
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	7ffb      	ldrb	r3, [r7, #31]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	f107 0120 	add.w	r1, r7, #32
 80016c4:	440b      	add	r3, r1
 80016c6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	4413      	add	r3, r2
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	7ffb      	ldrb	r3, [r7, #31]
 80016d2:	b212      	sxth	r2, r2
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	f107 0120 	add.w	r1, r7, #32
 80016da:	440b      	add	r3, r1
 80016dc:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80016e0:	7ffb      	ldrb	r3, [r7, #31]
 80016e2:	3301      	adds	r3, #1
 80016e4:	77fb      	strb	r3, [r7, #31]
 80016e6:	7ffb      	ldrb	r3, [r7, #31]
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d9dc      	bls.n	80016a6 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 80016ec:	7dfb      	ldrb	r3, [r7, #23]
 80016ee:	f003 030c 	and.w	r3, r3, #12
 80016f2:	2b0c      	cmp	r3, #12
 80016f4:	d828      	bhi.n	8001748 <LSM6DSL_AccReadXYZ+0xd8>
 80016f6:	a201      	add	r2, pc, #4	; (adr r2, 80016fc <LSM6DSL_AccReadXYZ+0x8c>)
 80016f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016fc:	08001731 	.word	0x08001731
 8001700:	08001749 	.word	0x08001749
 8001704:	08001749 	.word	0x08001749
 8001708:	08001749 	.word	0x08001749
 800170c:	08001743 	.word	0x08001743
 8001710:	08001749 	.word	0x08001749
 8001714:	08001749 	.word	0x08001749
 8001718:	08001749 	.word	0x08001749
 800171c:	08001737 	.word	0x08001737
 8001720:	08001749 	.word	0x08001749
 8001724:	08001749 	.word	0x08001749
 8001728:	08001749 	.word	0x08001749
 800172c:	0800173d 	.word	0x0800173d
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8001730:	4b19      	ldr	r3, [pc, #100]	; (8001798 <LSM6DSL_AccReadXYZ+0x128>)
 8001732:	61bb      	str	r3, [r7, #24]
    break;
 8001734:	e008      	b.n	8001748 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8001736:	4b19      	ldr	r3, [pc, #100]	; (800179c <LSM6DSL_AccReadXYZ+0x12c>)
 8001738:	61bb      	str	r3, [r7, #24]
    break;
 800173a:	e005      	b.n	8001748 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 800173c:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <LSM6DSL_AccReadXYZ+0x130>)
 800173e:	61bb      	str	r3, [r7, #24]
    break;
 8001740:	e002      	b.n	8001748 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8001742:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <LSM6DSL_AccReadXYZ+0x134>)
 8001744:	61bb      	str	r3, [r7, #24]
    break;    
 8001746:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001748:	2300      	movs	r3, #0
 800174a:	77fb      	strb	r3, [r7, #31]
 800174c:	e01b      	b.n	8001786 <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800174e:	7ffb      	ldrb	r3, [r7, #31]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	f107 0220 	add.w	r2, r7, #32
 8001756:	4413      	add	r3, r2
 8001758:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800175c:	ee07 3a90 	vmov	s15, r3
 8001760:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001764:	edd7 7a06 	vldr	s15, [r7, #24]
 8001768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800176c:	7ffb      	ldrb	r3, [r7, #31]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	4413      	add	r3, r2
 8001774:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001778:	ee17 2a90 	vmov	r2, s15
 800177c:	b212      	sxth	r2, r2
 800177e:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001780:	7ffb      	ldrb	r3, [r7, #31]
 8001782:	3301      	adds	r3, #1
 8001784:	77fb      	strb	r3, [r7, #31]
 8001786:	7ffb      	ldrb	r3, [r7, #31]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d9e0      	bls.n	800174e <LSM6DSL_AccReadXYZ+0xde>
  }
}
 800178c:	bf00      	nop
 800178e:	bf00      	nop
 8001790:	3720      	adds	r7, #32
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	3d79db23 	.word	0x3d79db23
 800179c:	3df9db23 	.word	0x3df9db23
 80017a0:	3e79db23 	.word	0x3e79db23
 80017a4:	3ef9db23 	.word	0x3ef9db23

080017a8 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80017b2:	2300      	movs	r3, #0
 80017b4:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80017b6:	2111      	movs	r1, #17
 80017b8:	20d4      	movs	r0, #212	; 0xd4
 80017ba:	f000 fd17 	bl	80021ec <SENSOR_IO_Read>
 80017be:	4603      	mov	r3, r0
 80017c0:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80017c2:	88fb      	ldrh	r3, [r7, #6]
 80017c4:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80017c6:	7bbb      	ldrb	r3, [r7, #14]
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80017ce:	7bba      	ldrb	r2, [r7, #14]
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 80017d6:	7bbb      	ldrb	r3, [r7, #14]
 80017d8:	461a      	mov	r2, r3
 80017da:	2111      	movs	r1, #17
 80017dc:	20d4      	movs	r0, #212	; 0xd4
 80017de:	f000 fceb 	bl	80021b8 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80017e2:	2112      	movs	r1, #18
 80017e4:	20d4      	movs	r0, #212	; 0xd4
 80017e6:	f000 fd01 	bl	80021ec <SENSOR_IO_Read>
 80017ea:	4603      	mov	r3, r0
 80017ec:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80017ee:	88fb      	ldrh	r3, [r7, #6]
 80017f0:	0a1b      	lsrs	r3, r3, #8
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80017f6:	7bbb      	ldrb	r3, [r7, #14]
 80017f8:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80017fc:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80017fe:	7bba      	ldrb	r2, [r7, #14]
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	4313      	orrs	r3, r2
 8001804:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001806:	7bbb      	ldrb	r3, [r7, #14]
 8001808:	461a      	mov	r2, r3
 800180a:	2112      	movs	r1, #18
 800180c:	20d4      	movs	r0, #212	; 0xd4
 800180e:	f000 fcd3 	bl	80021b8 <SENSOR_IO_Write>
}
 8001812:	bf00      	nop
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001820:	2300      	movs	r3, #0
 8001822:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001824:	2111      	movs	r1, #17
 8001826:	20d4      	movs	r0, #212	; 0xd4
 8001828:	f000 fce0 	bl	80021ec <SENSOR_IO_Read>
 800182c:	4603      	mov	r3, r0
 800182e:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	461a      	mov	r2, r3
 800183c:	2111      	movs	r1, #17
 800183e:	20d4      	movs	r0, #212	; 0xd4
 8001840:	f000 fcba 	bl	80021b8 <SENSOR_IO_Write>
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001850:	f000 fca8 	bl	80021a4 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8001854:	210f      	movs	r1, #15
 8001856:	20d4      	movs	r0, #212	; 0xd4
 8001858:	f000 fcc8 	bl	80021ec <SENSOR_IO_Read>
 800185c:	4603      	mov	r3, r0
}
 800185e:	4618      	mov	r0, r3
 8001860:	bd80      	pop	{r7, pc}

08001862 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8001862:	b580      	push	{r7, lr}
 8001864:	b084      	sub	sp, #16
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800186c:	2300      	movs	r3, #0
 800186e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8001870:	2116      	movs	r1, #22
 8001872:	20d4      	movs	r0, #212	; 0xd4
 8001874:	f000 fcba 	bl	80021ec <SENSOR_IO_Read>
 8001878:	4603      	mov	r3, r0
 800187a:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001882:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001884:	88fb      	ldrh	r3, [r7, #6]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001890:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	461a      	mov	r2, r3
 8001896:	2116      	movs	r1, #22
 8001898:	20d4      	movs	r0, #212	; 0xd4
 800189a:	f000 fc8d 	bl	80021b8 <SENSOR_IO_Write>
}
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b088      	sub	sp, #32
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80018be:	2111      	movs	r1, #17
 80018c0:	20d4      	movs	r0, #212	; 0xd4
 80018c2:	f000 fc93 	bl	80021ec <SENSOR_IO_Read>
 80018c6:	4603      	mov	r3, r0
 80018c8:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 80018ca:	f107 0208 	add.w	r2, r7, #8
 80018ce:	2306      	movs	r3, #6
 80018d0:	2122      	movs	r1, #34	; 0x22
 80018d2:	20d4      	movs	r0, #212	; 0xd4
 80018d4:	f000 fca8 	bl	8002228 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80018d8:	2300      	movs	r3, #0
 80018da:	77fb      	strb	r3, [r7, #31]
 80018dc:	e01f      	b.n	800191e <LSM6DSL_GyroReadXYZAngRate+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80018de:	7ffb      	ldrb	r3, [r7, #31]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	3301      	adds	r3, #1
 80018e4:	f107 0220 	add.w	r2, r7, #32
 80018e8:	4413      	add	r3, r2
 80018ea:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	021b      	lsls	r3, r3, #8
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	7ffb      	ldrb	r3, [r7, #31]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	f107 0120 	add.w	r1, r7, #32
 80018fc:	440b      	add	r3, r1
 80018fe:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001902:	b29b      	uxth	r3, r3
 8001904:	4413      	add	r3, r2
 8001906:	b29a      	uxth	r2, r3
 8001908:	7ffb      	ldrb	r3, [r7, #31]
 800190a:	b212      	sxth	r2, r2
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	f107 0120 	add.w	r1, r7, #32
 8001912:	440b      	add	r3, r1
 8001914:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001918:	7ffb      	ldrb	r3, [r7, #31]
 800191a:	3301      	adds	r3, #1
 800191c:	77fb      	strb	r3, [r7, #31]
 800191e:	7ffb      	ldrb	r3, [r7, #31]
 8001920:	2b02      	cmp	r3, #2
 8001922:	d9dc      	bls.n	80018de <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8001924:	7dfb      	ldrb	r3, [r7, #23]
 8001926:	f003 030c 	and.w	r3, r3, #12
 800192a:	2b0c      	cmp	r3, #12
 800192c:	d828      	bhi.n	8001980 <LSM6DSL_GyroReadXYZAngRate+0xd8>
 800192e:	a201      	add	r2, pc, #4	; (adr r2, 8001934 <LSM6DSL_GyroReadXYZAngRate+0x8c>)
 8001930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001934:	08001969 	.word	0x08001969
 8001938:	08001981 	.word	0x08001981
 800193c:	08001981 	.word	0x08001981
 8001940:	08001981 	.word	0x08001981
 8001944:	0800196f 	.word	0x0800196f
 8001948:	08001981 	.word	0x08001981
 800194c:	08001981 	.word	0x08001981
 8001950:	08001981 	.word	0x08001981
 8001954:	08001975 	.word	0x08001975
 8001958:	08001981 	.word	0x08001981
 800195c:	08001981 	.word	0x08001981
 8001960:	08001981 	.word	0x08001981
 8001964:	0800197b 	.word	0x0800197b
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8001968:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 800196a:	61bb      	str	r3, [r7, #24]
    break;
 800196c:	e008      	b.n	8001980 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 800196e:	4b17      	ldr	r3, [pc, #92]	; (80019cc <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8001970:	61bb      	str	r3, [r7, #24]
    break;
 8001972:	e005      	b.n	8001980 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8001974:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <LSM6DSL_GyroReadXYZAngRate+0x128>)
 8001976:	61bb      	str	r3, [r7, #24]
    break;
 8001978:	e002      	b.n	8001980 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 800197a:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <LSM6DSL_GyroReadXYZAngRate+0x12c>)
 800197c:	61bb      	str	r3, [r7, #24]
    break;    
 800197e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001980:	2300      	movs	r3, #0
 8001982:	77fb      	strb	r3, [r7, #31]
 8001984:	e017      	b.n	80019b6 <LSM6DSL_GyroReadXYZAngRate+0x10e>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8001986:	7ffb      	ldrb	r3, [r7, #31]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	f107 0220 	add.w	r2, r7, #32
 800198e:	4413      	add	r3, r2
 8001990:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001994:	ee07 3a90 	vmov	s15, r3
 8001998:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800199c:	7ffb      	ldrb	r3, [r7, #31]
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	4413      	add	r3, r2
 80019a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80019a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ac:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80019b0:	7ffb      	ldrb	r3, [r7, #31]
 80019b2:	3301      	adds	r3, #1
 80019b4:	77fb      	strb	r3, [r7, #31]
 80019b6:	7ffb      	ldrb	r3, [r7, #31]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d9e4      	bls.n	8001986 <LSM6DSL_GyroReadXYZAngRate+0xde>
  }
}
 80019bc:	bf00      	nop
 80019be:	bf00      	nop
 80019c0:	3720      	adds	r7, #32
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	410c0000 	.word	0x410c0000
 80019cc:	418c0000 	.word	0x418c0000
 80019d0:	420c0000 	.word	0x420c0000
 80019d4:	428c0000 	.word	0x428c0000

080019d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4a07      	ldr	r2, [pc, #28]	; (8001a04 <vApplicationGetIdleTaskMemory+0x2c>)
 80019e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	4a06      	ldr	r2, [pc, #24]	; (8001a08 <vApplicationGetIdleTaskMemory+0x30>)
 80019ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2280      	movs	r2, #128	; 0x80
 80019f4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80019f6:	bf00      	nop
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	200002c0 	.word	0x200002c0
 8001a08:	20000314 	.word	0x20000314

08001a0c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001a0c:	b5b0      	push	{r4, r5, r7, lr}
 8001a0e:	b096      	sub	sp, #88	; 0x58
 8001a10:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001a12:	f001 f80c 	bl	8002a2e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001a16:	f000 f859 	bl	8001acc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001a1a:	f000 f95b 	bl	8001cd4 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8001a1e:	f000 f90d 	bl	8001c3c <MX_USART1_UART_Init>
	MX_I2C2_Init();
 8001a22:	f000 f8cb 	bl	8001bbc <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */
	BSP_HSENSOR_Init();
 8001a26:	f000 fccd 	bl	80023c4 <BSP_HSENSOR_Init>
	BSP_PSENSOR_Init();
 8001a2a:	f000 fd3d 	bl	80024a8 <BSP_PSENSOR_Init>
	BSP_TSENSOR_Init();
 8001a2e:	f000 fd69 	bl	8002504 <BSP_TSENSOR_Init>
	BSP_ACCELERO_Init();
 8001a32:	f000 fc17 	bl	8002264 <BSP_ACCELERO_Init>
	BSP_GYRO_Init();
 8001a36:	f000 fc6b 	bl	8002310 <BSP_GYRO_Init>
	BSP_MAGNETO_Init();
 8001a3a:	f000 fcf1 	bl	8002420 <BSP_MAGNETO_Init>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of selectMode */
	osThreadDef(selectMode, startSelectMode, osPriorityNormal, 0, 128);
 8001a3e:	4b1d      	ldr	r3, [pc, #116]	; (8001ab4 <main+0xa8>)
 8001a40:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001a44:	461d      	mov	r5, r3
 8001a46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	selectModeHandle = osThreadCreate(osThread(selectMode), NULL);
 8001a52:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a56:	2100      	movs	r1, #0
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f004 ff6a 	bl	8006932 <osThreadCreate>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	4a15      	ldr	r2, [pc, #84]	; (8001ab8 <main+0xac>)
 8001a62:	6013      	str	r3, [r2, #0]

	/* definition and creation of output */
	osThreadDef(output, startOutput, osPriorityIdle, 0, 128);
 8001a64:	4b15      	ldr	r3, [pc, #84]	; (8001abc <main+0xb0>)
 8001a66:	f107 0420 	add.w	r4, r7, #32
 8001a6a:	461d      	mov	r5, r3
 8001a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	outputHandle = osThreadCreate(osThread(output), NULL);
 8001a78:	f107 0320 	add.w	r3, r7, #32
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f004 ff57 	bl	8006932 <osThreadCreate>
 8001a84:	4603      	mov	r3, r0
 8001a86:	4a0e      	ldr	r2, [pc, #56]	; (8001ac0 <main+0xb4>)
 8001a88:	6013      	str	r3, [r2, #0]

	/* definition and creation of readSensor */
	osThreadDef(readSensor, startReadSensor, osPriorityIdle, 0, 128);
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <main+0xb8>)
 8001a8c:	1d3c      	adds	r4, r7, #4
 8001a8e:	461d      	mov	r5, r3
 8001a90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	readSensorHandle = osThreadCreate(osThread(readSensor), NULL);
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f004 ff46 	bl	8006932 <osThreadCreate>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	4a07      	ldr	r2, [pc, #28]	; (8001ac8 <main+0xbc>)
 8001aaa:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8001aac:	f004 ff3a 	bl	8006924 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <main+0xa4>
 8001ab2:	bf00      	nop
 8001ab4:	0800ab50 	.word	0x0800ab50
 8001ab8:	20001388 	.word	0x20001388
 8001abc:	0800ab6c 	.word	0x0800ab6c
 8001ac0:	200012b0 	.word	0x200012b0
 8001ac4:	0800ab88 	.word	0x0800ab88
 8001ac8:	20001384 	.word	0x20001384

08001acc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b0bc      	sub	sp, #240	; 0xf0
 8001ad0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ad2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ad6:	2244      	movs	r2, #68	; 0x44
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4618      	mov	r0, r3
 8001adc:	f006 f98e 	bl	8007dfc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ae0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	2294      	movs	r2, #148	; 0x94
 8001af4:	2100      	movs	r1, #0
 8001af6:	4618      	mov	r0, r3
 8001af8:	f006 f980 	bl	8007dfc <memset>

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001afc:	2000      	movs	r0, #0
 8001afe:	f002 f93f 	bl	8003d80 <HAL_PWREx_ControlVoltageScaling>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <SystemClock_Config+0x40>
	{
		Error_Handler();
 8001b08:	f000 fa56 	bl	8001fb8 <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001b0c:	2310      	movs	r3, #16
 8001b0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b12:	2301      	movs	r3, #1
 8001b14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001b1e:	2360      	movs	r3, #96	; 0x60
 8001b20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b24:	2302      	movs	r3, #2
 8001b26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001b30:	2301      	movs	r3, #1
 8001b32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	RCC_OscInitStruct.PLL.PLLN = 60;
 8001b36:	233c      	movs	r3, #60	; 0x3c
 8001b38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b42:	2302      	movs	r3, #2
 8001b44:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b4e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b52:	4618      	mov	r0, r3
 8001b54:	f002 f9b8 	bl	8003ec8 <HAL_RCC_OscConfig>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <SystemClock_Config+0x96>
	{
		Error_Handler();
 8001b5e:	f000 fa2b 	bl	8001fb8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b62:	230f      	movs	r3, #15
 8001b64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b80:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b84:	2105      	movs	r1, #5
 8001b86:	4618      	mov	r0, r3
 8001b88:	f002 fdc4 	bl	8004714 <HAL_RCC_ClockConfig>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <SystemClock_Config+0xca>
	{
		Error_Handler();
 8001b92:	f000 fa11 	bl	8001fb8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C2;
 8001b96:	2381      	movs	r3, #129	; 0x81
 8001b98:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ba2:	1d3b      	adds	r3, r7, #4
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f003 f899 	bl	8004cdc <HAL_RCCEx_PeriphCLKConfig>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <SystemClock_Config+0xe8>
	{
		Error_Handler();
 8001bb0:	f000 fa02 	bl	8001fb8 <Error_Handler>
	}
}
 8001bb4:	bf00      	nop
 8001bb6:	37f0      	adds	r7, #240	; 0xf0
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8001bc0:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <MX_I2C2_Init+0x74>)
 8001bc2:	4a1c      	ldr	r2, [pc, #112]	; (8001c34 <MX_I2C2_Init+0x78>)
 8001bc4:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x307075B1;
 8001bc6:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <MX_I2C2_Init+0x74>)
 8001bc8:	4a1b      	ldr	r2, [pc, #108]	; (8001c38 <MX_I2C2_Init+0x7c>)
 8001bca:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8001bcc:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <MX_I2C2_Init+0x74>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bd2:	4b17      	ldr	r3, [pc, #92]	; (8001c30 <MX_I2C2_Init+0x74>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bd8:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <MX_I2C2_Init+0x74>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8001bde:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <MX_I2C2_Init+0x74>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001be4:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <MX_I2C2_Init+0x74>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <MX_I2C2_Init+0x74>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <MX_I2C2_Init+0x74>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001bf6:	480e      	ldr	r0, [pc, #56]	; (8001c30 <MX_I2C2_Init+0x74>)
 8001bf8:	f001 fb02 	bl	8003200 <HAL_I2C_Init>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_I2C2_Init+0x4a>
	{
		Error_Handler();
 8001c02:	f000 f9d9 	bl	8001fb8 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c06:	2100      	movs	r1, #0
 8001c08:	4809      	ldr	r0, [pc, #36]	; (8001c30 <MX_I2C2_Init+0x74>)
 8001c0a:	f002 f801 	bl	8003c10 <HAL_I2CEx_ConfigAnalogFilter>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_I2C2_Init+0x5c>
	{
		Error_Handler();
 8001c14:	f000 f9d0 	bl	8001fb8 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4805      	ldr	r0, [pc, #20]	; (8001c30 <MX_I2C2_Init+0x74>)
 8001c1c:	f002 f843 	bl	8003ca6 <HAL_I2CEx_ConfigDigitalFilter>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_I2C2_Init+0x6e>
	{
		Error_Handler();
 8001c26:	f000 f9c7 	bl	8001fb8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20001264 	.word	0x20001264
 8001c34:	40005800 	.word	0x40005800
 8001c38:	307075b1 	.word	0x307075b1

08001c3c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001c40:	4b22      	ldr	r3, [pc, #136]	; (8001ccc <MX_USART1_UART_Init+0x90>)
 8001c42:	4a23      	ldr	r2, [pc, #140]	; (8001cd0 <MX_USART1_UART_Init+0x94>)
 8001c44:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001c46:	4b21      	ldr	r3, [pc, #132]	; (8001ccc <MX_USART1_UART_Init+0x90>)
 8001c48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c4c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c4e:	4b1f      	ldr	r3, [pc, #124]	; (8001ccc <MX_USART1_UART_Init+0x90>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001c54:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <MX_USART1_UART_Init+0x90>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001c5a:	4b1c      	ldr	r3, [pc, #112]	; (8001ccc <MX_USART1_UART_Init+0x90>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001c60:	4b1a      	ldr	r3, [pc, #104]	; (8001ccc <MX_USART1_UART_Init+0x90>)
 8001c62:	220c      	movs	r2, #12
 8001c64:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c66:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <MX_USART1_UART_Init+0x90>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c6c:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <MX_USART1_UART_Init+0x90>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c72:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <MX_USART1_UART_Init+0x90>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c78:	4b14      	ldr	r3, [pc, #80]	; (8001ccc <MX_USART1_UART_Init+0x90>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c7e:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <MX_USART1_UART_Init+0x90>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c84:	4811      	ldr	r0, [pc, #68]	; (8001ccc <MX_USART1_UART_Init+0x90>)
 8001c86:	f004 f813 	bl	8005cb0 <HAL_UART_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_USART1_UART_Init+0x58>
	{
		Error_Handler();
 8001c90:	f000 f992 	bl	8001fb8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c94:	2100      	movs	r1, #0
 8001c96:	480d      	ldr	r0, [pc, #52]	; (8001ccc <MX_USART1_UART_Init+0x90>)
 8001c98:	f004 fd62 	bl	8006760 <HAL_UARTEx_SetTxFifoThreshold>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_USART1_UART_Init+0x6a>
	{
		Error_Handler();
 8001ca2:	f000 f989 	bl	8001fb8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	4808      	ldr	r0, [pc, #32]	; (8001ccc <MX_USART1_UART_Init+0x90>)
 8001caa:	f004 fd97 	bl	80067dc <HAL_UARTEx_SetRxFifoThreshold>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_USART1_UART_Init+0x7c>
	{
		Error_Handler();
 8001cb4:	f000 f980 	bl	8001fb8 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001cb8:	4804      	ldr	r0, [pc, #16]	; (8001ccc <MX_USART1_UART_Init+0x90>)
 8001cba:	f004 fd18 	bl	80066ee <HAL_UARTEx_DisableFifoMode>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler();
 8001cc4:	f000 f978 	bl	8001fb8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	200012c0 	.word	0x200012c0
 8001cd0:	40013800 	.word	0x40013800

08001cd4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cda:	f107 030c 	add.w	r3, r7, #12
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
 8001ce4:	609a      	str	r2, [r3, #8]
 8001ce6:	60da      	str	r2, [r3, #12]
 8001ce8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001cea:	4b1f      	ldr	r3, [pc, #124]	; (8001d68 <MX_GPIO_Init+0x94>)
 8001cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cee:	4a1e      	ldr	r2, [pc, #120]	; (8001d68 <MX_GPIO_Init+0x94>)
 8001cf0:	f043 0304 	orr.w	r3, r3, #4
 8001cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cf6:	4b1c      	ldr	r3, [pc, #112]	; (8001d68 <MX_GPIO_Init+0x94>)
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001d02:	4b19      	ldr	r3, [pc, #100]	; (8001d68 <MX_GPIO_Init+0x94>)
 8001d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d06:	4a18      	ldr	r2, [pc, #96]	; (8001d68 <MX_GPIO_Init+0x94>)
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d0e:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <MX_GPIO_Init+0x94>)
 8001d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d20:	4812      	ldr	r0, [pc, #72]	; (8001d6c <MX_GPIO_Init+0x98>)
 8001d22:	f001 fa3b 	bl	800319c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : BUTTON_BLUE_Pin */
	GPIO_InitStruct.Pin = BUTTON_BLUE_Pin;
 8001d26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d2a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(BUTTON_BLUE_GPIO_Port, &GPIO_InitStruct);
 8001d34:	f107 030c 	add.w	r3, r7, #12
 8001d38:	4619      	mov	r1, r3
 8001d3a:	480d      	ldr	r0, [pc, #52]	; (8001d70 <MX_GPIO_Init+0x9c>)
 8001d3c:	f000 ff92 	bl	8002c64 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_GREEN_Pin */
	GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001d40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d44:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d46:	2301      	movs	r3, #1
 8001d48:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001d52:	f107 030c 	add.w	r3, r7, #12
 8001d56:	4619      	mov	r1, r3
 8001d58:	4804      	ldr	r0, [pc, #16]	; (8001d6c <MX_GPIO_Init+0x98>)
 8001d5a:	f000 ff83 	bl	8002c64 <HAL_GPIO_Init>

}
 8001d5e:	bf00      	nop
 8001d60:	3720      	adds	r7, #32
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	48000400 	.word	0x48000400
 8001d70:	48000800 	.word	0x48000800

08001d74 <startSelectMode>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_startSelectMode */
void startSelectMode(void const * argument)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	f004 fe24 	bl	80069ca <osDelay>
		if(!HAL_GPIO_ReadPin(BUTTON_BLUE_GPIO_Port, BUTTON_BLUE_Pin))
 8001d82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d86:	4812      	ldr	r0, [pc, #72]	; (8001dd0 <startSelectMode+0x5c>)
 8001d88:	f001 f9f0 	bl	800316c <HAL_GPIO_ReadPin>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d119      	bne.n	8001dc6 <startSelectMode+0x52>
		{
			if(!buttonPressed)
 8001d92:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <startSelectMode+0x60>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f0      	bne.n	8001d7c <startSelectMode+0x8>
			{
				HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8001d9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d9e:	480e      	ldr	r0, [pc, #56]	; (8001dd8 <startSelectMode+0x64>)
 8001da0:	f001 fa14 	bl	80031cc <HAL_GPIO_TogglePin>
				buttonPressed = 1;
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <startSelectMode+0x60>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	601a      	str	r2, [r3, #0]
				if (read_v_or_t < 5)
 8001daa:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <startSelectMode+0x68>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	dc05      	bgt.n	8001dbe <startSelectMode+0x4a>
				{
					read_v_or_t = read_v_or_t + 1;
 8001db2:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <startSelectMode+0x68>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	3301      	adds	r3, #1
 8001db8:	4a08      	ldr	r2, [pc, #32]	; (8001ddc <startSelectMode+0x68>)
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	e7de      	b.n	8001d7c <startSelectMode+0x8>
				}
				else
				{
					read_v_or_t = 0;
 8001dbe:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <startSelectMode+0x68>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	e7da      	b.n	8001d7c <startSelectMode+0x8>
				}
			}
		}
		else
		{
			buttonPressed = 0;
 8001dc6:	4b03      	ldr	r3, [pc, #12]	; (8001dd4 <startSelectMode+0x60>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
		osDelay(1);
 8001dcc:	e7d6      	b.n	8001d7c <startSelectMode+0x8>
 8001dce:	bf00      	nop
 8001dd0:	48000800 	.word	0x48000800
 8001dd4:	20000518 	.word	0x20000518
 8001dd8:	48000400 	.word	0x48000400
 8001ddc:	2000051c 	.word	0x2000051c

08001de0 <startOutput>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startOutput */
void startOutput(void const * argument)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startOutput */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8001de8:	2001      	movs	r0, #1
 8001dea:	f004 fdee 	bl	80069ca <osDelay>
		HAL_UART_Transmit(&huart1, (uint8_t*)buffer, length, HAL_MAX_DELAY);
 8001dee:	4b05      	ldr	r3, [pc, #20]	; (8001e04 <startOutput+0x24>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001df8:	4903      	ldr	r1, [pc, #12]	; (8001e08 <startOutput+0x28>)
 8001dfa:	4804      	ldr	r0, [pc, #16]	; (8001e0c <startOutput+0x2c>)
 8001dfc:	f003 ffa8 	bl	8005d50 <HAL_UART_Transmit>
		osDelay(1);
 8001e00:	e7f2      	b.n	8001de8 <startOutput+0x8>
 8001e02:	bf00      	nop
 8001e04:	20000514 	.word	0x20000514
 8001e08:	20001350 	.word	0x20001350
 8001e0c:	200012c0 	.word	0x200012c0

08001e10 <startReadSensor>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startReadSensor */
void startReadSensor(void const * argument)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af02      	add	r7, sp, #8
 8001e16:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startReadSensor */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8001e18:	2001      	movs	r0, #1
 8001e1a:	f004 fdd6 	bl	80069ca <osDelay>
		if (read_v_or_t == 0){
 8001e1e:	4b4e      	ldr	r3, [pc, #312]	; (8001f58 <startReadSensor+0x148>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d114      	bne.n	8001e50 <startReadSensor+0x40>
			//
			humidity_val = BSP_HSENSOR_ReadHumidity();
 8001e26:	f000 faed 	bl	8002404 <BSP_HSENSOR_ReadHumidity>
 8001e2a:	eef0 7a40 	vmov.f32	s15, s0
 8001e2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e32:	ee17 2a90 	vmov	r2, s15
 8001e36:	4b49      	ldr	r3, [pc, #292]	; (8001f5c <startReadSensor+0x14c>)
 8001e38:	601a      	str	r2, [r3, #0]
			length = sprintf(buffer, "Humidity: %d\r\n", humidity_val);
 8001e3a:	4b48      	ldr	r3, [pc, #288]	; (8001f5c <startReadSensor+0x14c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	4947      	ldr	r1, [pc, #284]	; (8001f60 <startReadSensor+0x150>)
 8001e42:	4848      	ldr	r0, [pc, #288]	; (8001f64 <startReadSensor+0x154>)
 8001e44:	f006 fc4c 	bl	80086e0 <siprintf>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	4a47      	ldr	r2, [pc, #284]	; (8001f68 <startReadSensor+0x158>)
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	e7e3      	b.n	8001e18 <startReadSensor+0x8>

		}
		else if (read_v_or_t == 1) {
 8001e50:	4b41      	ldr	r3, [pc, #260]	; (8001f58 <startReadSensor+0x148>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d114      	bne.n	8001e82 <startReadSensor+0x72>
			temp_val = BSP_TSENSOR_ReadTemp();
 8001e58:	f000 fb70 	bl	800253c <BSP_TSENSOR_ReadTemp>
 8001e5c:	eef0 7a40 	vmov.f32	s15, s0
 8001e60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e64:	ee17 2a90 	vmov	r2, s15
 8001e68:	4b40      	ldr	r3, [pc, #256]	; (8001f6c <startReadSensor+0x15c>)
 8001e6a:	601a      	str	r2, [r3, #0]
			length = sprintf(buffer, "Temperature: %d\r\n", temp_val);
 8001e6c:	4b3f      	ldr	r3, [pc, #252]	; (8001f6c <startReadSensor+0x15c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	461a      	mov	r2, r3
 8001e72:	493f      	ldr	r1, [pc, #252]	; (8001f70 <startReadSensor+0x160>)
 8001e74:	483b      	ldr	r0, [pc, #236]	; (8001f64 <startReadSensor+0x154>)
 8001e76:	f006 fc33 	bl	80086e0 <siprintf>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	4a3a      	ldr	r2, [pc, #232]	; (8001f68 <startReadSensor+0x158>)
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	e7ca      	b.n	8001e18 <startReadSensor+0x8>

		}
		else if (read_v_or_t == 2) {
 8001e82:	4b35      	ldr	r3, [pc, #212]	; (8001f58 <startReadSensor+0x148>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d114      	bne.n	8001eb4 <startReadSensor+0xa4>

			pressure_val = BSP_PSENSOR_ReadPressure();
 8001e8a:	f000 fb2d 	bl	80024e8 <BSP_PSENSOR_ReadPressure>
 8001e8e:	eef0 7a40 	vmov.f32	s15, s0
 8001e92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e96:	ee17 2a90 	vmov	r2, s15
 8001e9a:	4b36      	ldr	r3, [pc, #216]	; (8001f74 <startReadSensor+0x164>)
 8001e9c:	601a      	str	r2, [r3, #0]
			length = sprintf(buffer, "Pressure: %d\r\n", pressure_val);
 8001e9e:	4b35      	ldr	r3, [pc, #212]	; (8001f74 <startReadSensor+0x164>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4934      	ldr	r1, [pc, #208]	; (8001f78 <startReadSensor+0x168>)
 8001ea6:	482f      	ldr	r0, [pc, #188]	; (8001f64 <startReadSensor+0x154>)
 8001ea8:	f006 fc1a 	bl	80086e0 <siprintf>
 8001eac:	4603      	mov	r3, r0
 8001eae:	4a2e      	ldr	r2, [pc, #184]	; (8001f68 <startReadSensor+0x158>)
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	e7b1      	b.n	8001e18 <startReadSensor+0x8>
		}
		else if (read_v_or_t == 3) {
 8001eb4:	4b28      	ldr	r3, [pc, #160]	; (8001f58 <startReadSensor+0x148>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d114      	bne.n	8001ee6 <startReadSensor+0xd6>

			BSP_GYRO_GetXYZ(gyro);
 8001ebc:	482f      	ldr	r0, [pc, #188]	; (8001f7c <startReadSensor+0x16c>)
 8001ebe:	f000 fa69 	bl	8002394 <BSP_GYRO_GetXYZ>
			length = sprintf(buffer, "Gyrometer: X:%d, Y:%d, Z:%d\r\n", (int)gyro[0], (int)gyro[1], (int)gyro[2]);
 8001ec2:	4b2e      	ldr	r3, [pc, #184]	; (8001f7c <startReadSensor+0x16c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4b2c      	ldr	r3, [pc, #176]	; (8001f7c <startReadSensor+0x16c>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4b2b      	ldr	r3, [pc, #172]	; (8001f7c <startReadSensor+0x16c>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	492a      	ldr	r1, [pc, #168]	; (8001f80 <startReadSensor+0x170>)
 8001ed8:	4822      	ldr	r0, [pc, #136]	; (8001f64 <startReadSensor+0x154>)
 8001eda:	f006 fc01 	bl	80086e0 <siprintf>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	4a21      	ldr	r2, [pc, #132]	; (8001f68 <startReadSensor+0x158>)
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	e798      	b.n	8001e18 <startReadSensor+0x8>

		}
		else if (read_v_or_t == 4) {
 8001ee6:	4b1c      	ldr	r3, [pc, #112]	; (8001f58 <startReadSensor+0x148>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d117      	bne.n	8001f1e <startReadSensor+0x10e>

			BSP_ACCELERO_AccGetXYZ(accelero);
 8001eee:	4825      	ldr	r0, [pc, #148]	; (8001f84 <startReadSensor+0x174>)
 8001ef0:	f000 f9f6 	bl	80022e0 <BSP_ACCELERO_AccGetXYZ>
			length = sprintf(buffer, "Accelerometer: X:%d, Y:%d, Z:%d\r\n", (int)accelero[0], (int)accelero[1], (int)accelero[2]);
 8001ef4:	4b23      	ldr	r3, [pc, #140]	; (8001f84 <startReadSensor+0x174>)
 8001ef6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001efa:	461a      	mov	r2, r3
 8001efc:	4b21      	ldr	r3, [pc, #132]	; (8001f84 <startReadSensor+0x174>)
 8001efe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f02:	4619      	mov	r1, r3
 8001f04:	4b1f      	ldr	r3, [pc, #124]	; (8001f84 <startReadSensor+0x174>)
 8001f06:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	491e      	ldr	r1, [pc, #120]	; (8001f88 <startReadSensor+0x178>)
 8001f10:	4814      	ldr	r0, [pc, #80]	; (8001f64 <startReadSensor+0x154>)
 8001f12:	f006 fbe5 	bl	80086e0 <siprintf>
 8001f16:	4603      	mov	r3, r0
 8001f18:	4a13      	ldr	r2, [pc, #76]	; (8001f68 <startReadSensor+0x158>)
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	e77c      	b.n	8001e18 <startReadSensor+0x8>

		}
		else if (read_v_or_t == 5) {
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <startReadSensor+0x148>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2b05      	cmp	r3, #5
 8001f24:	f47f af78 	bne.w	8001e18 <startReadSensor+0x8>

			BSP_MAGNETO_GetXYZ(magneto);
 8001f28:	4818      	ldr	r0, [pc, #96]	; (8001f8c <startReadSensor+0x17c>)
 8001f2a:	f000 faa5 	bl	8002478 <BSP_MAGNETO_GetXYZ>
			length = sprintf(buffer, "Magnetometer: X:%d, Y:%d, Z:%d\r\n", (int)magneto[0], (int)magneto[1], (int)magneto[2]);
 8001f2e:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <startReadSensor+0x17c>)
 8001f30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f34:	461a      	mov	r2, r3
 8001f36:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <startReadSensor+0x17c>)
 8001f38:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <startReadSensor+0x17c>)
 8001f40:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	460b      	mov	r3, r1
 8001f48:	4911      	ldr	r1, [pc, #68]	; (8001f90 <startReadSensor+0x180>)
 8001f4a:	4806      	ldr	r0, [pc, #24]	; (8001f64 <startReadSensor+0x154>)
 8001f4c:	f006 fbc8 	bl	80086e0 <siprintf>
 8001f50:	4603      	mov	r3, r0
 8001f52:	4a05      	ldr	r2, [pc, #20]	; (8001f68 <startReadSensor+0x158>)
 8001f54:	6013      	str	r3, [r2, #0]
		osDelay(1);
 8001f56:	e75f      	b.n	8001e18 <startReadSensor+0x8>
 8001f58:	2000051c 	.word	0x2000051c
 8001f5c:	20001260 	.word	0x20001260
 8001f60:	0800aba4 	.word	0x0800aba4
 8001f64:	20001350 	.word	0x20001350
 8001f68:	20000514 	.word	0x20000514
 8001f6c:	2000125c 	.word	0x2000125c
 8001f70:	0800abb4 	.word	0x0800abb4
 8001f74:	20001250 	.word	0x20001250
 8001f78:	0800abc8 	.word	0x0800abc8
 8001f7c:	200012b4 	.word	0x200012b4
 8001f80:	0800abd8 	.word	0x0800abd8
 8001f84:	2000138c 	.word	0x2000138c
 8001f88:	0800abf8 	.word	0x0800abf8
 8001f8c:	20001254 	.word	0x20001254
 8001f90:	0800ac1c 	.word	0x0800ac1c

08001f94 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a04      	ldr	r2, [pc, #16]	; (8001fb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d101      	bne.n	8001faa <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001fa6:	f000 fd5b 	bl	8002a60 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40001000 	.word	0x40001000

08001fb8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fbc:	b672      	cpsid	i
}
 8001fbe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001fc0:	e7fe      	b.n	8001fc0 <Error_Handler+0x8>
	...

08001fc4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08a      	sub	sp, #40	; 0x28
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001fcc:	4b27      	ldr	r3, [pc, #156]	; (800206c <I2Cx_MspInit+0xa8>)
 8001fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd0:	4a26      	ldr	r2, [pc, #152]	; (800206c <I2Cx_MspInit+0xa8>)
 8001fd2:	f043 0302 	orr.w	r3, r3, #2
 8001fd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fd8:	4b24      	ldr	r3, [pc, #144]	; (800206c <I2Cx_MspInit+0xa8>)
 8001fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001fe4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001fe8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001fea:	2312      	movs	r3, #18
 8001fec:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001ffa:	f107 0314 	add.w	r3, r7, #20
 8001ffe:	4619      	mov	r1, r3
 8002000:	481b      	ldr	r0, [pc, #108]	; (8002070 <I2Cx_MspInit+0xac>)
 8002002:	f000 fe2f 	bl	8002c64 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002006:	f107 0314 	add.w	r3, r7, #20
 800200a:	4619      	mov	r1, r3
 800200c:	4818      	ldr	r0, [pc, #96]	; (8002070 <I2Cx_MspInit+0xac>)
 800200e:	f000 fe29 	bl	8002c64 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002012:	4b16      	ldr	r3, [pc, #88]	; (800206c <I2Cx_MspInit+0xa8>)
 8002014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002016:	4a15      	ldr	r2, [pc, #84]	; (800206c <I2Cx_MspInit+0xa8>)
 8002018:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800201c:	6593      	str	r3, [r2, #88]	; 0x58
 800201e:	4b13      	ldr	r3, [pc, #76]	; (800206c <I2Cx_MspInit+0xa8>)
 8002020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800202a:	4b10      	ldr	r3, [pc, #64]	; (800206c <I2Cx_MspInit+0xa8>)
 800202c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202e:	4a0f      	ldr	r2, [pc, #60]	; (800206c <I2Cx_MspInit+0xa8>)
 8002030:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002034:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002036:	4b0d      	ldr	r3, [pc, #52]	; (800206c <I2Cx_MspInit+0xa8>)
 8002038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203a:	4a0c      	ldr	r2, [pc, #48]	; (800206c <I2Cx_MspInit+0xa8>)
 800203c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002040:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002042:	2200      	movs	r2, #0
 8002044:	210f      	movs	r1, #15
 8002046:	2021      	movs	r0, #33	; 0x21
 8002048:	f000 fde2 	bl	8002c10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800204c:	2021      	movs	r0, #33	; 0x21
 800204e:	f000 fdfb 	bl	8002c48 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002052:	2200      	movs	r2, #0
 8002054:	210f      	movs	r1, #15
 8002056:	2022      	movs	r0, #34	; 0x22
 8002058:	f000 fdda 	bl	8002c10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800205c:	2022      	movs	r0, #34	; 0x22
 800205e:	f000 fdf3 	bl	8002c48 <HAL_NVIC_EnableIRQ>
}
 8002062:	bf00      	nop
 8002064:	3728      	adds	r7, #40	; 0x28
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40021000 	.word	0x40021000
 8002070:	48000400 	.word	0x48000400

08002074 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a12      	ldr	r2, [pc, #72]	; (80020c8 <I2Cx_Init+0x54>)
 8002080:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a11      	ldr	r2, [pc, #68]	; (80020cc <I2Cx_Init+0x58>)
 8002086:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff ff89 	bl	8001fc4 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f001 f8a4 	bl	8003200 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80020b8:	2100      	movs	r1, #0
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f001 fda8 	bl	8003c10 <HAL_I2CEx_ConfigAnalogFilter>
}
 80020c0:	bf00      	nop
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40005800 	.word	0x40005800
 80020cc:	00702681 	.word	0x00702681

080020d0 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	; 0x28
 80020d4:	af04      	add	r7, sp, #16
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	4608      	mov	r0, r1
 80020da:	4611      	mov	r1, r2
 80020dc:	461a      	mov	r2, r3
 80020de:	4603      	mov	r3, r0
 80020e0:	72fb      	strb	r3, [r7, #11]
 80020e2:	460b      	mov	r3, r1
 80020e4:	813b      	strh	r3, [r7, #8]
 80020e6:	4613      	mov	r3, r2
 80020e8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80020ea:	2300      	movs	r3, #0
 80020ec:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80020ee:	7afb      	ldrb	r3, [r7, #11]
 80020f0:	b299      	uxth	r1, r3
 80020f2:	88f8      	ldrh	r0, [r7, #6]
 80020f4:	893a      	ldrh	r2, [r7, #8]
 80020f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020fa:	9302      	str	r3, [sp, #8]
 80020fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020fe:	9301      	str	r3, [sp, #4]
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	4603      	mov	r3, r0
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f001 fa4c 	bl	80035a4 <HAL_I2C_Mem_Read>
 800210c:	4603      	mov	r3, r0
 800210e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002110:	7dfb      	ldrb	r3, [r7, #23]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d004      	beq.n	8002120 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8002116:	7afb      	ldrb	r3, [r7, #11]
 8002118:	4619      	mov	r1, r3
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 f832 	bl	8002184 <I2Cx_Error>
  }
  return status;
 8002120:	7dfb      	ldrb	r3, [r7, #23]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b08a      	sub	sp, #40	; 0x28
 800212e:	af04      	add	r7, sp, #16
 8002130:	60f8      	str	r0, [r7, #12]
 8002132:	4608      	mov	r0, r1
 8002134:	4611      	mov	r1, r2
 8002136:	461a      	mov	r2, r3
 8002138:	4603      	mov	r3, r0
 800213a:	72fb      	strb	r3, [r7, #11]
 800213c:	460b      	mov	r3, r1
 800213e:	813b      	strh	r3, [r7, #8]
 8002140:	4613      	mov	r3, r2
 8002142:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002144:	2300      	movs	r3, #0
 8002146:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002148:	7afb      	ldrb	r3, [r7, #11]
 800214a:	b299      	uxth	r1, r3
 800214c:	88f8      	ldrh	r0, [r7, #6]
 800214e:	893a      	ldrh	r2, [r7, #8]
 8002150:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002154:	9302      	str	r3, [sp, #8]
 8002156:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002158:	9301      	str	r3, [sp, #4]
 800215a:	6a3b      	ldr	r3, [r7, #32]
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	4603      	mov	r3, r0
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f001 f90b 	bl	800337c <HAL_I2C_Mem_Write>
 8002166:	4603      	mov	r3, r0
 8002168:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800216a:	7dfb      	ldrb	r3, [r7, #23]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d004      	beq.n	800217a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002170:	7afb      	ldrb	r3, [r7, #11]
 8002172:	4619      	mov	r1, r3
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 f805 	bl	8002184 <I2Cx_Error>
  }
  return status;
 800217a:	7dfb      	ldrb	r3, [r7, #23]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f001 f8c4 	bl	800331e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff ff6c 	bl	8002074 <I2Cx_Init>
}
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80021a8:	4802      	ldr	r0, [pc, #8]	; (80021b4 <SENSOR_IO_Init+0x10>)
 80021aa:	f7ff ff63 	bl	8002074 <I2Cx_Init>
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20001424 	.word	0x20001424

080021b8 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af02      	add	r7, sp, #8
 80021be:	4603      	mov	r3, r0
 80021c0:	71fb      	strb	r3, [r7, #7]
 80021c2:	460b      	mov	r3, r1
 80021c4:	71bb      	strb	r3, [r7, #6]
 80021c6:	4613      	mov	r3, r2
 80021c8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80021ca:	79bb      	ldrb	r3, [r7, #6]
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	79f9      	ldrb	r1, [r7, #7]
 80021d0:	2301      	movs	r3, #1
 80021d2:	9301      	str	r3, [sp, #4]
 80021d4:	1d7b      	adds	r3, r7, #5
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	2301      	movs	r3, #1
 80021da:	4803      	ldr	r0, [pc, #12]	; (80021e8 <SENSOR_IO_Write+0x30>)
 80021dc:	f7ff ffa5 	bl	800212a <I2Cx_WriteMultiple>
}
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20001424 	.word	0x20001424

080021ec <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af02      	add	r7, sp, #8
 80021f2:	4603      	mov	r3, r0
 80021f4:	460a      	mov	r2, r1
 80021f6:	71fb      	strb	r3, [r7, #7]
 80021f8:	4613      	mov	r3, r2
 80021fa:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002200:	79bb      	ldrb	r3, [r7, #6]
 8002202:	b29a      	uxth	r2, r3
 8002204:	79f9      	ldrb	r1, [r7, #7]
 8002206:	2301      	movs	r3, #1
 8002208:	9301      	str	r3, [sp, #4]
 800220a:	f107 030f 	add.w	r3, r7, #15
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	2301      	movs	r3, #1
 8002212:	4804      	ldr	r0, [pc, #16]	; (8002224 <SENSOR_IO_Read+0x38>)
 8002214:	f7ff ff5c 	bl	80020d0 <I2Cx_ReadMultiple>

  return read_value;
 8002218:	7bfb      	ldrb	r3, [r7, #15]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20001424 	.word	0x20001424

08002228 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af02      	add	r7, sp, #8
 800222e:	603a      	str	r2, [r7, #0]
 8002230:	461a      	mov	r2, r3
 8002232:	4603      	mov	r3, r0
 8002234:	71fb      	strb	r3, [r7, #7]
 8002236:	460b      	mov	r3, r1
 8002238:	71bb      	strb	r3, [r7, #6]
 800223a:	4613      	mov	r3, r2
 800223c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800223e:	79bb      	ldrb	r3, [r7, #6]
 8002240:	b29a      	uxth	r2, r3
 8002242:	79f9      	ldrb	r1, [r7, #7]
 8002244:	88bb      	ldrh	r3, [r7, #4]
 8002246:	9301      	str	r3, [sp, #4]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	2301      	movs	r3, #1
 800224e:	4804      	ldr	r0, [pc, #16]	; (8002260 <SENSOR_IO_ReadMultiple+0x38>)
 8002250:	f7ff ff3e 	bl	80020d0 <I2Cx_ReadMultiple>
 8002254:	4603      	mov	r3, r0
 8002256:	b29b      	uxth	r3, r3
}
 8002258:	4618      	mov	r0, r3
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20001424 	.word	0x20001424

08002264 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800226a:	2300      	movs	r3, #0
 800226c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800226e:	2300      	movs	r3, #0
 8002270:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8002272:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <BSP_ACCELERO_Init+0x74>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	4798      	blx	r3
 8002278:	4603      	mov	r3, r0
 800227a:	2b6a      	cmp	r3, #106	; 0x6a
 800227c:	d002      	beq.n	8002284 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	73fb      	strb	r3, [r7, #15]
 8002282:	e024      	b.n	80022ce <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8002284:	4b15      	ldr	r3, [pc, #84]	; (80022dc <BSP_ACCELERO_Init+0x78>)
 8002286:	4a14      	ldr	r2, [pc, #80]	; (80022d8 <BSP_ACCELERO_Init+0x74>)
 8002288:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800228a:	2330      	movs	r3, #48	; 0x30
 800228c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8002292:	2300      	movs	r3, #0
 8002294:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8002296:	2340      	movs	r3, #64	; 0x40
 8002298:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800229a:	2300      	movs	r3, #0
 800229c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800229e:	2300      	movs	r3, #0
 80022a0:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80022a2:	797a      	ldrb	r2, [r7, #5]
 80022a4:	7abb      	ldrb	r3, [r7, #10]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80022ac:	7a3b      	ldrb	r3, [r7, #8]
 80022ae:	f043 0304 	orr.w	r3, r3, #4
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	021b      	lsls	r3, r3, #8
 80022b6:	b21a      	sxth	r2, r3
 80022b8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80022bc:	4313      	orrs	r3, r2
 80022be:	b21b      	sxth	r3, r3
 80022c0:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80022c2:	4b06      	ldr	r3, [pc, #24]	; (80022dc <BSP_ACCELERO_Init+0x78>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	89ba      	ldrh	r2, [r7, #12]
 80022ca:	4610      	mov	r0, r2
 80022cc:	4798      	blx	r3
  }  

  return ret;
 80022ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	2000005c 	.word	0x2000005c
 80022dc:	20000520 	.word	0x20000520

080022e0 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80022e8:	4b08      	ldr	r3, [pc, #32]	; (800230c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d009      	beq.n	8002304 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d004      	beq.n	8002304 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80022fa:	4b04      	ldr	r3, [pc, #16]	; (800230c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	4798      	blx	r3
    }
  }
}
 8002304:	bf00      	nop
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	20000520 	.word	0x20000520

08002310 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800231a:	2300      	movs	r3, #0
 800231c:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800231e:	4b1b      	ldr	r3, [pc, #108]	; (800238c <BSP_GYRO_Init+0x7c>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	4798      	blx	r3
 8002324:	4603      	mov	r3, r0
 8002326:	2b6a      	cmp	r3, #106	; 0x6a
 8002328:	d002      	beq.n	8002330 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	73fb      	strb	r3, [r7, #15]
 800232e:	e028      	b.n	8002382 <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8002330:	4b17      	ldr	r3, [pc, #92]	; (8002390 <BSP_GYRO_Init+0x80>)
 8002332:	4a16      	ldr	r2, [pc, #88]	; (800238c <BSP_GYRO_Init+0x7c>)
 8002334:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8002336:	2300      	movs	r3, #0
 8002338:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 800233a:	2330      	movs	r3, #48	; 0x30
 800233c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800233e:	2300      	movs	r3, #0
 8002340:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8002346:	2340      	movs	r3, #64	; 0x40
 8002348:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 800234a:	2300      	movs	r3, #0
 800234c:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 800234e:	230c      	movs	r3, #12
 8002350:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8002352:	7aba      	ldrb	r2, [r7, #10]
 8002354:	797b      	ldrb	r3, [r7, #5]
 8002356:	4313      	orrs	r3, r2
 8002358:	b2db      	uxtb	r3, r3
 800235a:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800235c:	7a3b      	ldrb	r3, [r7, #8]
 800235e:	f043 0304 	orr.w	r3, r3, #4
 8002362:	b2db      	uxtb	r3, r3
 8002364:	021b      	lsls	r3, r3, #8
 8002366:	b21a      	sxth	r2, r3
 8002368:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800236c:	4313      	orrs	r3, r2
 800236e:	b21b      	sxth	r3, r3
 8002370:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8002372:	4b07      	ldr	r3, [pc, #28]	; (8002390 <BSP_GYRO_Init+0x80>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	89ba      	ldrh	r2, [r7, #12]
 800237a:	4610      	mov	r0, r2
 800237c:	4798      	blx	r3
    
    ret = GYRO_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8002382:	7bfb      	ldrb	r3, [r7, #15]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20000090 	.word	0x20000090
 8002390:	20000524 	.word	0x20000524

08002394 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 800239c:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <BSP_GYRO_GetXYZ+0x2c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d009      	beq.n	80023b8 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 80023a4:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <BSP_GYRO_GetXYZ+0x2c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d004      	beq.n	80023b8 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 80023ae:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <BSP_GYRO_GetXYZ+0x2c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	4798      	blx	r3
    }
  }
}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20000524 	.word	0x20000524

080023c4 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80023ca:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <BSP_HSENSOR_Init+0x38>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	20be      	movs	r0, #190	; 0xbe
 80023d0:	4798      	blx	r3
 80023d2:	4603      	mov	r3, r0
 80023d4:	2bbc      	cmp	r3, #188	; 0xbc
 80023d6:	d002      	beq.n	80023de <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	607b      	str	r3, [r7, #4]
 80023dc:	e009      	b.n	80023f2 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 80023de:	4b08      	ldr	r3, [pc, #32]	; (8002400 <BSP_HSENSOR_Init+0x3c>)
 80023e0:	4a06      	ldr	r2, [pc, #24]	; (80023fc <BSP_HSENSOR_Init+0x38>)
 80023e2:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80023e4:	4b06      	ldr	r3, [pc, #24]	; (8002400 <BSP_HSENSOR_Init+0x3c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	20be      	movs	r0, #190	; 0xbe
 80023ec:	4798      	blx	r3
    ret = HSENSOR_OK;
 80023ee:	2300      	movs	r3, #0
 80023f0:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80023f2:	687b      	ldr	r3, [r7, #4]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	20000000 	.word	0x20000000
 8002400:	20000528 	.word	0x20000528

08002404 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8002408:	4b04      	ldr	r3, [pc, #16]	; (800241c <BSP_HSENSOR_ReadHumidity+0x18>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	20be      	movs	r0, #190	; 0xbe
 8002410:	4798      	blx	r3
 8002412:	eef0 7a40 	vmov.f32	s15, s0
}
 8002416:	eeb0 0a67 	vmov.f32	s0, s15
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20000528 	.word	0x20000528

08002420 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 800242a:	4b11      	ldr	r3, [pc, #68]	; (8002470 <BSP_MAGNETO_Init+0x50>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	4798      	blx	r3
 8002430:	4603      	mov	r3, r0
 8002432:	2b3d      	cmp	r3, #61	; 0x3d
 8002434:	d002      	beq.n	800243c <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	71fb      	strb	r3, [r7, #7]
 800243a:	e013      	b.n	8002464 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 800243c:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <BSP_MAGNETO_Init+0x54>)
 800243e:	4a0c      	ldr	r2, [pc, #48]	; (8002470 <BSP_MAGNETO_Init+0x50>)
 8002440:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8002442:	2358      	movs	r3, #88	; 0x58
 8002444:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8002446:	2300      	movs	r3, #0
 8002448:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 800244a:	2300      	movs	r3, #0
 800244c:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 800244e:	2308      	movs	r3, #8
 8002450:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8002452:	2340      	movs	r3, #64	; 0x40
 8002454:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8002456:	4b07      	ldr	r3, [pc, #28]	; (8002474 <BSP_MAGNETO_Init+0x54>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	463a      	mov	r2, r7
 800245e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002462:	4798      	blx	r3
  } 

  return ret;  
 8002464:	79fb      	ldrb	r3, [r7, #7]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	2000001c 	.word	0x2000001c
 8002474:	2000052c 	.word	0x2000052c

08002478 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8002480:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <BSP_MAGNETO_GetXYZ+0x2c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d009      	beq.n	800249c <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <BSP_MAGNETO_GetXYZ+0x2c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	2b00      	cmp	r3, #0
 8002490:	d004      	beq.n	800249c <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8002492:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <BSP_MAGNETO_GetXYZ+0x2c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	4798      	blx	r3
    }
  }
}
 800249c:	bf00      	nop
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	2000052c 	.word	0x2000052c

080024a8 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 80024ae:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <BSP_PSENSOR_Init+0x38>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	20ba      	movs	r0, #186	; 0xba
 80024b4:	4798      	blx	r3
 80024b6:	4603      	mov	r3, r0
 80024b8:	2bb1      	cmp	r3, #177	; 0xb1
 80024ba:	d002      	beq.n	80024c2 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	607b      	str	r3, [r7, #4]
 80024c0:	e009      	b.n	80024d6 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 80024c2:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <BSP_PSENSOR_Init+0x3c>)
 80024c4:	4a06      	ldr	r2, [pc, #24]	; (80024e0 <BSP_PSENSOR_Init+0x38>)
 80024c6:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 80024c8:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <BSP_PSENSOR_Init+0x3c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	20ba      	movs	r0, #186	; 0xba
 80024d0:	4798      	blx	r3
    ret = PSENSOR_OK;
 80024d2:	2300      	movs	r3, #0
 80024d4:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80024d6:	687b      	ldr	r3, [r7, #4]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20000050 	.word	0x20000050
 80024e4:	20000530 	.word	0x20000530

080024e8 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <BSP_PSENSOR_ReadPressure+0x18>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	20ba      	movs	r0, #186	; 0xba
 80024f4:	4798      	blx	r3
 80024f6:	eef0 7a40 	vmov.f32	s15, s0
}
 80024fa:	eeb0 0a67 	vmov.f32	s0, s15
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	20000530 	.word	0x20000530

08002504 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800250e:	4b09      	ldr	r3, [pc, #36]	; (8002534 <BSP_TSENSOR_Init+0x30>)
 8002510:	4a09      	ldr	r2, [pc, #36]	; (8002538 <BSP_TSENSOR_Init+0x34>)
 8002512:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8002514:	f7ff fe46 	bl	80021a4 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <BSP_TSENSOR_Init+0x30>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2100      	movs	r1, #0
 8002520:	20be      	movs	r0, #190	; 0xbe
 8002522:	4798      	blx	r3

  ret = TSENSOR_OK;
 8002524:	2300      	movs	r3, #0
 8002526:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8002528:	79fb      	ldrb	r3, [r7, #7]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000534 	.word	0x20000534
 8002538:	2000000c 	.word	0x2000000c

0800253c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8002540:	4b04      	ldr	r3, [pc, #16]	; (8002554 <BSP_TSENSOR_ReadTemp+0x18>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	20be      	movs	r0, #190	; 0xbe
 8002548:	4798      	blx	r3
 800254a:	eef0 7a40 	vmov.f32	s15, s0
}
 800254e:	eeb0 0a67 	vmov.f32	s0, s15
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20000534 	.word	0x20000534

08002558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800255e:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <HAL_MspInit+0x4c>)
 8002560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002562:	4a10      	ldr	r2, [pc, #64]	; (80025a4 <HAL_MspInit+0x4c>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	6613      	str	r3, [r2, #96]	; 0x60
 800256a:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <HAL_MspInit+0x4c>)
 800256c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	607b      	str	r3, [r7, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002576:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <HAL_MspInit+0x4c>)
 8002578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257a:	4a0a      	ldr	r2, [pc, #40]	; (80025a4 <HAL_MspInit+0x4c>)
 800257c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002580:	6593      	str	r3, [r2, #88]	; 0x58
 8002582:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <HAL_MspInit+0x4c>)
 8002584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258a:	603b      	str	r3, [r7, #0]
 800258c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800258e:	2200      	movs	r2, #0
 8002590:	210f      	movs	r1, #15
 8002592:	f06f 0001 	mvn.w	r0, #1
 8002596:	f000 fb3b 	bl	8002c10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40021000 	.word	0x40021000

080025a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08a      	sub	sp, #40	; 0x28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b0:	f107 0314 	add.w	r3, r7, #20
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	60da      	str	r2, [r3, #12]
 80025be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a17      	ldr	r2, [pc, #92]	; (8002624 <HAL_I2C_MspInit+0x7c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d128      	bne.n	800261c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ca:	4b17      	ldr	r3, [pc, #92]	; (8002628 <HAL_I2C_MspInit+0x80>)
 80025cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ce:	4a16      	ldr	r2, [pc, #88]	; (8002628 <HAL_I2C_MspInit+0x80>)
 80025d0:	f043 0302 	orr.w	r3, r3, #2
 80025d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025d6:	4b14      	ldr	r3, [pc, #80]	; (8002628 <HAL_I2C_MspInit+0x80>)
 80025d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	613b      	str	r3, [r7, #16]
 80025e0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80025e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80025e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025e8:	2312      	movs	r3, #18
 80025ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025ec:	2301      	movs	r3, #1
 80025ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f0:	2303      	movs	r3, #3
 80025f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80025f4:	2304      	movs	r3, #4
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f8:	f107 0314 	add.w	r3, r7, #20
 80025fc:	4619      	mov	r1, r3
 80025fe:	480b      	ldr	r0, [pc, #44]	; (800262c <HAL_I2C_MspInit+0x84>)
 8002600:	f000 fb30 	bl	8002c64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002604:	4b08      	ldr	r3, [pc, #32]	; (8002628 <HAL_I2C_MspInit+0x80>)
 8002606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002608:	4a07      	ldr	r2, [pc, #28]	; (8002628 <HAL_I2C_MspInit+0x80>)
 800260a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800260e:	6593      	str	r3, [r2, #88]	; 0x58
 8002610:	4b05      	ldr	r3, [pc, #20]	; (8002628 <HAL_I2C_MspInit+0x80>)
 8002612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002614:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800261c:	bf00      	nop
 800261e:	3728      	adds	r7, #40	; 0x28
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40005800 	.word	0x40005800
 8002628:	40021000 	.word	0x40021000
 800262c:	48000400 	.word	0x48000400

08002630 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a0b      	ldr	r2, [pc, #44]	; (800266c <HAL_I2C_MspDeInit+0x3c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d10f      	bne.n	8002662 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002642:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <HAL_I2C_MspDeInit+0x40>)
 8002644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002646:	4a0a      	ldr	r2, [pc, #40]	; (8002670 <HAL_I2C_MspDeInit+0x40>)
 8002648:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800264c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800264e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002652:	4808      	ldr	r0, [pc, #32]	; (8002674 <HAL_I2C_MspDeInit+0x44>)
 8002654:	f000 fc98 	bl	8002f88 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8002658:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800265c:	4805      	ldr	r0, [pc, #20]	; (8002674 <HAL_I2C_MspDeInit+0x44>)
 800265e:	f000 fc93 	bl	8002f88 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40005800 	.word	0x40005800
 8002670:	40021000 	.word	0x40021000
 8002674:	48000400 	.word	0x48000400

08002678 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08a      	sub	sp, #40	; 0x28
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002680:	f107 0314 	add.w	r3, r7, #20
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a17      	ldr	r2, [pc, #92]	; (80026f4 <HAL_UART_MspInit+0x7c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d127      	bne.n	80026ea <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800269a:	4b17      	ldr	r3, [pc, #92]	; (80026f8 <HAL_UART_MspInit+0x80>)
 800269c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800269e:	4a16      	ldr	r2, [pc, #88]	; (80026f8 <HAL_UART_MspInit+0x80>)
 80026a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026a4:	6613      	str	r3, [r2, #96]	; 0x60
 80026a6:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <HAL_UART_MspInit+0x80>)
 80026a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ae:	613b      	str	r3, [r7, #16]
 80026b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b2:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <HAL_UART_MspInit+0x80>)
 80026b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b6:	4a10      	ldr	r2, [pc, #64]	; (80026f8 <HAL_UART_MspInit+0x80>)
 80026b8:	f043 0302 	orr.w	r3, r3, #2
 80026bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026be:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <HAL_UART_MspInit+0x80>)
 80026c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026ca:	23c0      	movs	r3, #192	; 0xc0
 80026cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ce:	2302      	movs	r3, #2
 80026d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d2:	2300      	movs	r3, #0
 80026d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d6:	2303      	movs	r3, #3
 80026d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026da:	2307      	movs	r3, #7
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026de:	f107 0314 	add.w	r3, r7, #20
 80026e2:	4619      	mov	r1, r3
 80026e4:	4805      	ldr	r0, [pc, #20]	; (80026fc <HAL_UART_MspInit+0x84>)
 80026e6:	f000 fabd 	bl	8002c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80026ea:	bf00      	nop
 80026ec:	3728      	adds	r7, #40	; 0x28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40013800 	.word	0x40013800
 80026f8:	40021000 	.word	0x40021000
 80026fc:	48000400 	.word	0x48000400

08002700 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08c      	sub	sp, #48	; 0x30
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002708:	2300      	movs	r3, #0
 800270a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002710:	2200      	movs	r2, #0
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	2036      	movs	r0, #54	; 0x36
 8002716:	f000 fa7b 	bl	8002c10 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800271a:	2036      	movs	r0, #54	; 0x36
 800271c:	f000 fa94 	bl	8002c48 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002720:	4b1e      	ldr	r3, [pc, #120]	; (800279c <HAL_InitTick+0x9c>)
 8002722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002724:	4a1d      	ldr	r2, [pc, #116]	; (800279c <HAL_InitTick+0x9c>)
 8002726:	f043 0310 	orr.w	r3, r3, #16
 800272a:	6593      	str	r3, [r2, #88]	; 0x58
 800272c:	4b1b      	ldr	r3, [pc, #108]	; (800279c <HAL_InitTick+0x9c>)
 800272e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002730:	f003 0310 	and.w	r3, r3, #16
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002738:	f107 0210 	add.w	r2, r7, #16
 800273c:	f107 0314 	add.w	r3, r7, #20
 8002740:	4611      	mov	r1, r2
 8002742:	4618      	mov	r0, r3
 8002744:	f002 f9d6 	bl	8004af4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002748:	f002 f9a8 	bl	8004a9c <HAL_RCC_GetPCLK1Freq>
 800274c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800274e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002750:	4a13      	ldr	r2, [pc, #76]	; (80027a0 <HAL_InitTick+0xa0>)
 8002752:	fba2 2303 	umull	r2, r3, r2, r3
 8002756:	0c9b      	lsrs	r3, r3, #18
 8002758:	3b01      	subs	r3, #1
 800275a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800275c:	4b11      	ldr	r3, [pc, #68]	; (80027a4 <HAL_InitTick+0xa4>)
 800275e:	4a12      	ldr	r2, [pc, #72]	; (80027a8 <HAL_InitTick+0xa8>)
 8002760:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002762:	4b10      	ldr	r3, [pc, #64]	; (80027a4 <HAL_InitTick+0xa4>)
 8002764:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002768:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800276a:	4a0e      	ldr	r2, [pc, #56]	; (80027a4 <HAL_InitTick+0xa4>)
 800276c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002770:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <HAL_InitTick+0xa4>)
 8002772:	2200      	movs	r2, #0
 8002774:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002776:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <HAL_InitTick+0xa4>)
 8002778:	2200      	movs	r2, #0
 800277a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800277c:	4809      	ldr	r0, [pc, #36]	; (80027a4 <HAL_InitTick+0xa4>)
 800277e:	f002 ffc5 	bl	800570c <HAL_TIM_Base_Init>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d104      	bne.n	8002792 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002788:	4806      	ldr	r0, [pc, #24]	; (80027a4 <HAL_InitTick+0xa4>)
 800278a:	f003 f821 	bl	80057d0 <HAL_TIM_Base_Start_IT>
 800278e:	4603      	mov	r3, r0
 8002790:	e000      	b.n	8002794 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
}
 8002794:	4618      	mov	r0, r3
 8002796:	3730      	adds	r7, #48	; 0x30
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40021000 	.word	0x40021000
 80027a0:	431bde83 	.word	0x431bde83
 80027a4:	20001470 	.word	0x20001470
 80027a8:	40001000 	.word	0x40001000

080027ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027b0:	e7fe      	b.n	80027b0 <NMI_Handler+0x4>

080027b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027b2:	b480      	push	{r7}
 80027b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027b6:	e7fe      	b.n	80027b6 <HardFault_Handler+0x4>

080027b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027bc:	e7fe      	b.n	80027bc <MemManage_Handler+0x4>

080027be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027be:	b480      	push	{r7}
 80027c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027c2:	e7fe      	b.n	80027c2 <BusFault_Handler+0x4>

080027c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027c8:	e7fe      	b.n	80027c8 <UsageFault_Handler+0x4>

080027ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027ca:	b480      	push	{r7}
 80027cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027ce:	bf00      	nop
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027dc:	4802      	ldr	r0, [pc, #8]	; (80027e8 <TIM6_DAC_IRQHandler+0x10>)
 80027de:	f003 f867 	bl	80058b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20001470 	.word	0x20001470

080027ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
	return 1;
 80027f0:	2301      	movs	r3, #1
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <_kill>:

int _kill(int pid, int sig)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002806:	f005 fac1 	bl	8007d8c <__errno>
 800280a:	4603      	mov	r3, r0
 800280c:	2216      	movs	r2, #22
 800280e:	601a      	str	r2, [r3, #0]
	return -1;
 8002810:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <_exit>:

void _exit (int status)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002824:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff ffe7 	bl	80027fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800282e:	e7fe      	b.n	800282e <_exit+0x12>

08002830 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	e00a      	b.n	8002858 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002842:	f3af 8000 	nop.w
 8002846:	4601      	mov	r1, r0
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	1c5a      	adds	r2, r3, #1
 800284c:	60ba      	str	r2, [r7, #8]
 800284e:	b2ca      	uxtb	r2, r1
 8002850:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	3301      	adds	r3, #1
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	429a      	cmp	r2, r3
 800285e:	dbf0      	blt.n	8002842 <_read+0x12>
	}

return len;
 8002860:	687b      	ldr	r3, [r7, #4]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b086      	sub	sp, #24
 800286e:	af00      	add	r7, sp, #0
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]
 800287a:	e009      	b.n	8002890 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	60ba      	str	r2, [r7, #8]
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	3301      	adds	r3, #1
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	429a      	cmp	r2, r3
 8002896:	dbf1      	blt.n	800287c <_write+0x12>
	}
	return len;
 8002898:	687b      	ldr	r3, [r7, #4]
}
 800289a:	4618      	mov	r0, r3
 800289c:	3718      	adds	r7, #24
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <_close>:

int _close(int file)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
	return -1;
 80028aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028ca:	605a      	str	r2, [r3, #4]
	return 0;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <_isatty>:

int _isatty(int file)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
	return 1;
 80028e2:	2301      	movs	r3, #1
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
	return 0;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
	...

0800290c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002914:	4a14      	ldr	r2, [pc, #80]	; (8002968 <_sbrk+0x5c>)
 8002916:	4b15      	ldr	r3, [pc, #84]	; (800296c <_sbrk+0x60>)
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002920:	4b13      	ldr	r3, [pc, #76]	; (8002970 <_sbrk+0x64>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d102      	bne.n	800292e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002928:	4b11      	ldr	r3, [pc, #68]	; (8002970 <_sbrk+0x64>)
 800292a:	4a12      	ldr	r2, [pc, #72]	; (8002974 <_sbrk+0x68>)
 800292c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800292e:	4b10      	ldr	r3, [pc, #64]	; (8002970 <_sbrk+0x64>)
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4413      	add	r3, r2
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	429a      	cmp	r2, r3
 800293a:	d207      	bcs.n	800294c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800293c:	f005 fa26 	bl	8007d8c <__errno>
 8002940:	4603      	mov	r3, r0
 8002942:	220c      	movs	r2, #12
 8002944:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800294a:	e009      	b.n	8002960 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800294c:	4b08      	ldr	r3, [pc, #32]	; (8002970 <_sbrk+0x64>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002952:	4b07      	ldr	r3, [pc, #28]	; (8002970 <_sbrk+0x64>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4413      	add	r3, r2
 800295a:	4a05      	ldr	r2, [pc, #20]	; (8002970 <_sbrk+0x64>)
 800295c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800295e:	68fb      	ldr	r3, [r7, #12]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	200a0000 	.word	0x200a0000
 800296c:	00000400 	.word	0x00000400
 8002970:	20000538 	.word	0x20000538
 8002974:	200014d0 	.word	0x200014d0

08002978 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800297c:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <SystemInit+0x5c>)
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002982:	4a14      	ldr	r2, [pc, #80]	; (80029d4 <SystemInit+0x5c>)
 8002984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800298c:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <SystemInit+0x60>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a11      	ldr	r2, [pc, #68]	; (80029d8 <SystemInit+0x60>)
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002998:	4b0f      	ldr	r3, [pc, #60]	; (80029d8 <SystemInit+0x60>)
 800299a:	2200      	movs	r2, #0
 800299c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800299e:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <SystemInit+0x60>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a0d      	ldr	r2, [pc, #52]	; (80029d8 <SystemInit+0x60>)
 80029a4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80029a8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80029ac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80029ae:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <SystemInit+0x60>)
 80029b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029b4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80029b6:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <SystemInit+0x60>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a07      	ldr	r2, [pc, #28]	; (80029d8 <SystemInit+0x60>)
 80029bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029c0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80029c2:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <SystemInit+0x60>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	619a      	str	r2, [r3, #24]
}
 80029c8:	bf00      	nop
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	e000ed00 	.word	0xe000ed00
 80029d8:	40021000 	.word	0x40021000

080029dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80029dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80029e0:	f7ff ffca 	bl	8002978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80029e4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80029e6:	e003      	b.n	80029f0 <LoopCopyDataInit>

080029e8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80029e8:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80029ea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80029ec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80029ee:	3104      	adds	r1, #4

080029f0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80029f0:	480a      	ldr	r0, [pc, #40]	; (8002a1c <LoopForever+0xa>)
	ldr	r3, =_edata
 80029f2:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <LoopForever+0xe>)
	adds	r2, r0, r1
 80029f4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80029f6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80029f8:	d3f6      	bcc.n	80029e8 <CopyDataInit>
	ldr	r2, =_sbss
 80029fa:	4a0a      	ldr	r2, [pc, #40]	; (8002a24 <LoopForever+0x12>)
	b	LoopFillZerobss
 80029fc:	e002      	b.n	8002a04 <LoopFillZerobss>

080029fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80029fe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002a00:	f842 3b04 	str.w	r3, [r2], #4

08002a04 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002a04:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <LoopForever+0x16>)
	cmp	r2, r3
 8002a06:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002a08:	d3f9      	bcc.n	80029fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a0a:	f005 f9c5 	bl	8007d98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a0e:	f7fe fffd 	bl	8001a0c <main>

08002a12 <LoopForever>:

LoopForever:
    b LoopForever
 8002a12:	e7fe      	b.n	8002a12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002a14:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8002a18:	0800b0ac 	.word	0x0800b0ac
	ldr	r0, =_sdata
 8002a1c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002a20:	200002a4 	.word	0x200002a4
	ldr	r2, =_sbss
 8002a24:	200002a4 	.word	0x200002a4
	ldr	r3, = _ebss
 8002a28:	200014d0 	.word	0x200014d0

08002a2c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a2c:	e7fe      	b.n	8002a2c <ADC1_IRQHandler>

08002a2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a34:	2300      	movs	r3, #0
 8002a36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a38:	2003      	movs	r0, #3
 8002a3a:	f000 f8de 	bl	8002bfa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a3e:	2000      	movs	r0, #0
 8002a40:	f7ff fe5e 	bl	8002700 <HAL_InitTick>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d002      	beq.n	8002a50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	71fb      	strb	r3, [r7, #7]
 8002a4e:	e001      	b.n	8002a54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a50:	f7ff fd82 	bl	8002558 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a54:	79fb      	ldrb	r3, [r7, #7]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
	...

08002a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a64:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <HAL_IncTick+0x20>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <HAL_IncTick+0x24>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4413      	add	r3, r2
 8002a70:	4a04      	ldr	r2, [pc, #16]	; (8002a84 <HAL_IncTick+0x24>)
 8002a72:	6013      	str	r3, [r2, #0]
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	200000cc 	.word	0x200000cc
 8002a84:	200014bc 	.word	0x200014bc

08002a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a8c:	4b03      	ldr	r3, [pc, #12]	; (8002a9c <HAL_GetTick+0x14>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	200014bc 	.word	0x200014bc

08002aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ab0:	4b0c      	ldr	r3, [pc, #48]	; (8002ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002abc:	4013      	ands	r3, r2
 8002abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ac8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ad2:	4a04      	ldr	r2, [pc, #16]	; (8002ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	60d3      	str	r3, [r2, #12]
}
 8002ad8:	bf00      	nop
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	e000ed00 	.word	0xe000ed00

08002ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aec:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <__NVIC_GetPriorityGrouping+0x18>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	0a1b      	lsrs	r3, r3, #8
 8002af2:	f003 0307 	and.w	r3, r3, #7
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	e000ed00 	.word	0xe000ed00

08002b04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	db0b      	blt.n	8002b2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b16:	79fb      	ldrb	r3, [r7, #7]
 8002b18:	f003 021f 	and.w	r2, r3, #31
 8002b1c:	4907      	ldr	r1, [pc, #28]	; (8002b3c <__NVIC_EnableIRQ+0x38>)
 8002b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	2001      	movs	r0, #1
 8002b26:	fa00 f202 	lsl.w	r2, r0, r2
 8002b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	e000e100 	.word	0xe000e100

08002b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	6039      	str	r1, [r7, #0]
 8002b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	db0a      	blt.n	8002b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	490c      	ldr	r1, [pc, #48]	; (8002b8c <__NVIC_SetPriority+0x4c>)
 8002b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5e:	0112      	lsls	r2, r2, #4
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	440b      	add	r3, r1
 8002b64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b68:	e00a      	b.n	8002b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	4908      	ldr	r1, [pc, #32]	; (8002b90 <__NVIC_SetPriority+0x50>)
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	3b04      	subs	r3, #4
 8002b78:	0112      	lsls	r2, r2, #4
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	761a      	strb	r2, [r3, #24]
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	e000e100 	.word	0xe000e100
 8002b90:	e000ed00 	.word	0xe000ed00

08002b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b089      	sub	sp, #36	; 0x24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f1c3 0307 	rsb	r3, r3, #7
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	bf28      	it	cs
 8002bb2:	2304      	movcs	r3, #4
 8002bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	2b06      	cmp	r3, #6
 8002bbc:	d902      	bls.n	8002bc4 <NVIC_EncodePriority+0x30>
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	3b03      	subs	r3, #3
 8002bc2:	e000      	b.n	8002bc6 <NVIC_EncodePriority+0x32>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	43da      	mvns	r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	401a      	ands	r2, r3
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	fa01 f303 	lsl.w	r3, r1, r3
 8002be6:	43d9      	mvns	r1, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bec:	4313      	orrs	r3, r2
         );
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3724      	adds	r7, #36	; 0x24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b082      	sub	sp, #8
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7ff ff4c 	bl	8002aa0 <__NVIC_SetPriorityGrouping>
}
 8002c08:	bf00      	nop
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	4603      	mov	r3, r0
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
 8002c1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c22:	f7ff ff61 	bl	8002ae8 <__NVIC_GetPriorityGrouping>
 8002c26:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	68b9      	ldr	r1, [r7, #8]
 8002c2c:	6978      	ldr	r0, [r7, #20]
 8002c2e:	f7ff ffb1 	bl	8002b94 <NVIC_EncodePriority>
 8002c32:	4602      	mov	r2, r0
 8002c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c38:	4611      	mov	r1, r2
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff ff80 	bl	8002b40 <__NVIC_SetPriority>
}
 8002c40:	bf00      	nop
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff ff54 	bl	8002b04 <__NVIC_EnableIRQ>
}
 8002c5c:	bf00      	nop
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c72:	e166      	b.n	8002f42 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	2101      	movs	r1, #1
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c80:	4013      	ands	r3, r2
 8002c82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 8158 	beq.w	8002f3c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d00b      	beq.n	8002cac <HAL_GPIO_Init+0x48>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d007      	beq.n	8002cac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ca0:	2b11      	cmp	r3, #17
 8002ca2:	d003      	beq.n	8002cac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2b12      	cmp	r3, #18
 8002caa:	d130      	bne.n	8002d0e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	68da      	ldr	r2, [r3, #12]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	43db      	mvns	r3, r3
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	091b      	lsrs	r3, r3, #4
 8002cf8:	f003 0201 	and.w	r2, r3, #1
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	2203      	movs	r2, #3
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4013      	ands	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d003      	beq.n	8002d4e <HAL_GPIO_Init+0xea>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b12      	cmp	r3, #18
 8002d4c:	d123      	bne.n	8002d96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	08da      	lsrs	r2, r3, #3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	3208      	adds	r2, #8
 8002d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	220f      	movs	r2, #15
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	691a      	ldr	r2, [r3, #16]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f003 0307 	and.w	r3, r3, #7
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	08da      	lsrs	r2, r3, #3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3208      	adds	r2, #8
 8002d90:	6939      	ldr	r1, [r7, #16]
 8002d92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	2203      	movs	r2, #3
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	43db      	mvns	r3, r3
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	4013      	ands	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f003 0203 	and.w	r2, r3, #3
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 80b2 	beq.w	8002f3c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd8:	4b61      	ldr	r3, [pc, #388]	; (8002f60 <HAL_GPIO_Init+0x2fc>)
 8002dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ddc:	4a60      	ldr	r2, [pc, #384]	; (8002f60 <HAL_GPIO_Init+0x2fc>)
 8002dde:	f043 0301 	orr.w	r3, r3, #1
 8002de2:	6613      	str	r3, [r2, #96]	; 0x60
 8002de4:	4b5e      	ldr	r3, [pc, #376]	; (8002f60 <HAL_GPIO_Init+0x2fc>)
 8002de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002df0:	4a5c      	ldr	r2, [pc, #368]	; (8002f64 <HAL_GPIO_Init+0x300>)
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	089b      	lsrs	r3, r3, #2
 8002df6:	3302      	adds	r3, #2
 8002df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	220f      	movs	r2, #15
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4013      	ands	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e1a:	d02b      	beq.n	8002e74 <HAL_GPIO_Init+0x210>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a52      	ldr	r2, [pc, #328]	; (8002f68 <HAL_GPIO_Init+0x304>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d025      	beq.n	8002e70 <HAL_GPIO_Init+0x20c>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a51      	ldr	r2, [pc, #324]	; (8002f6c <HAL_GPIO_Init+0x308>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d01f      	beq.n	8002e6c <HAL_GPIO_Init+0x208>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a50      	ldr	r2, [pc, #320]	; (8002f70 <HAL_GPIO_Init+0x30c>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d019      	beq.n	8002e68 <HAL_GPIO_Init+0x204>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a4f      	ldr	r2, [pc, #316]	; (8002f74 <HAL_GPIO_Init+0x310>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d013      	beq.n	8002e64 <HAL_GPIO_Init+0x200>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a4e      	ldr	r2, [pc, #312]	; (8002f78 <HAL_GPIO_Init+0x314>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d00d      	beq.n	8002e60 <HAL_GPIO_Init+0x1fc>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a4d      	ldr	r2, [pc, #308]	; (8002f7c <HAL_GPIO_Init+0x318>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d007      	beq.n	8002e5c <HAL_GPIO_Init+0x1f8>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a4c      	ldr	r2, [pc, #304]	; (8002f80 <HAL_GPIO_Init+0x31c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d101      	bne.n	8002e58 <HAL_GPIO_Init+0x1f4>
 8002e54:	2307      	movs	r3, #7
 8002e56:	e00e      	b.n	8002e76 <HAL_GPIO_Init+0x212>
 8002e58:	2308      	movs	r3, #8
 8002e5a:	e00c      	b.n	8002e76 <HAL_GPIO_Init+0x212>
 8002e5c:	2306      	movs	r3, #6
 8002e5e:	e00a      	b.n	8002e76 <HAL_GPIO_Init+0x212>
 8002e60:	2305      	movs	r3, #5
 8002e62:	e008      	b.n	8002e76 <HAL_GPIO_Init+0x212>
 8002e64:	2304      	movs	r3, #4
 8002e66:	e006      	b.n	8002e76 <HAL_GPIO_Init+0x212>
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e004      	b.n	8002e76 <HAL_GPIO_Init+0x212>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e002      	b.n	8002e76 <HAL_GPIO_Init+0x212>
 8002e70:	2301      	movs	r3, #1
 8002e72:	e000      	b.n	8002e76 <HAL_GPIO_Init+0x212>
 8002e74:	2300      	movs	r3, #0
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	f002 0203 	and.w	r2, r2, #3
 8002e7c:	0092      	lsls	r2, r2, #2
 8002e7e:	4093      	lsls	r3, r2
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e86:	4937      	ldr	r1, [pc, #220]	; (8002f64 <HAL_GPIO_Init+0x300>)
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	089b      	lsrs	r3, r3, #2
 8002e8c:	3302      	adds	r3, #2
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002e94:	4b3b      	ldr	r3, [pc, #236]	; (8002f84 <HAL_GPIO_Init+0x320>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002eb8:	4a32      	ldr	r2, [pc, #200]	; (8002f84 <HAL_GPIO_Init+0x320>)
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002ebe:	4b31      	ldr	r3, [pc, #196]	; (8002f84 <HAL_GPIO_Init+0x320>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ee2:	4a28      	ldr	r2, [pc, #160]	; (8002f84 <HAL_GPIO_Init+0x320>)
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ee8:	4b26      	ldr	r3, [pc, #152]	; (8002f84 <HAL_GPIO_Init+0x320>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f0c:	4a1d      	ldr	r2, [pc, #116]	; (8002f84 <HAL_GPIO_Init+0x320>)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f12:	4b1c      	ldr	r3, [pc, #112]	; (8002f84 <HAL_GPIO_Init+0x320>)
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f36:	4a13      	ldr	r2, [pc, #76]	; (8002f84 <HAL_GPIO_Init+0x320>)
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	fa22 f303 	lsr.w	r3, r2, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f47f ae91 	bne.w	8002c74 <HAL_GPIO_Init+0x10>
  }
}
 8002f52:	bf00      	nop
 8002f54:	bf00      	nop
 8002f56:	371c      	adds	r7, #28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	40021000 	.word	0x40021000
 8002f64:	40010000 	.word	0x40010000
 8002f68:	48000400 	.word	0x48000400
 8002f6c:	48000800 	.word	0x48000800
 8002f70:	48000c00 	.word	0x48000c00
 8002f74:	48001000 	.word	0x48001000
 8002f78:	48001400 	.word	0x48001400
 8002f7c:	48001800 	.word	0x48001800
 8002f80:	48001c00 	.word	0x48001c00
 8002f84:	40010400 	.word	0x40010400

08002f88 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f92:	2300      	movs	r3, #0
 8002f94:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002f96:	e0c9      	b.n	800312c <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002f98:	2201      	movs	r2, #1
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 80bc 	beq.w	8003126 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002fae:	4a66      	ldr	r2, [pc, #408]	; (8003148 <HAL_GPIO_DeInit+0x1c0>)
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	089b      	lsrs	r3, r3, #2
 8002fb4:	3302      	adds	r3, #2
 8002fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fba:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	f003 0303 	and.w	r3, r3, #3
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	220f      	movs	r2, #15
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002fd6:	d02b      	beq.n	8003030 <HAL_GPIO_DeInit+0xa8>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a5c      	ldr	r2, [pc, #368]	; (800314c <HAL_GPIO_DeInit+0x1c4>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d025      	beq.n	800302c <HAL_GPIO_DeInit+0xa4>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a5b      	ldr	r2, [pc, #364]	; (8003150 <HAL_GPIO_DeInit+0x1c8>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d01f      	beq.n	8003028 <HAL_GPIO_DeInit+0xa0>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a5a      	ldr	r2, [pc, #360]	; (8003154 <HAL_GPIO_DeInit+0x1cc>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d019      	beq.n	8003024 <HAL_GPIO_DeInit+0x9c>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a59      	ldr	r2, [pc, #356]	; (8003158 <HAL_GPIO_DeInit+0x1d0>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d013      	beq.n	8003020 <HAL_GPIO_DeInit+0x98>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a58      	ldr	r2, [pc, #352]	; (800315c <HAL_GPIO_DeInit+0x1d4>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00d      	beq.n	800301c <HAL_GPIO_DeInit+0x94>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a57      	ldr	r2, [pc, #348]	; (8003160 <HAL_GPIO_DeInit+0x1d8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d007      	beq.n	8003018 <HAL_GPIO_DeInit+0x90>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a56      	ldr	r2, [pc, #344]	; (8003164 <HAL_GPIO_DeInit+0x1dc>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d101      	bne.n	8003014 <HAL_GPIO_DeInit+0x8c>
 8003010:	2307      	movs	r3, #7
 8003012:	e00e      	b.n	8003032 <HAL_GPIO_DeInit+0xaa>
 8003014:	2308      	movs	r3, #8
 8003016:	e00c      	b.n	8003032 <HAL_GPIO_DeInit+0xaa>
 8003018:	2306      	movs	r3, #6
 800301a:	e00a      	b.n	8003032 <HAL_GPIO_DeInit+0xaa>
 800301c:	2305      	movs	r3, #5
 800301e:	e008      	b.n	8003032 <HAL_GPIO_DeInit+0xaa>
 8003020:	2304      	movs	r3, #4
 8003022:	e006      	b.n	8003032 <HAL_GPIO_DeInit+0xaa>
 8003024:	2303      	movs	r3, #3
 8003026:	e004      	b.n	8003032 <HAL_GPIO_DeInit+0xaa>
 8003028:	2302      	movs	r3, #2
 800302a:	e002      	b.n	8003032 <HAL_GPIO_DeInit+0xaa>
 800302c:	2301      	movs	r3, #1
 800302e:	e000      	b.n	8003032 <HAL_GPIO_DeInit+0xaa>
 8003030:	2300      	movs	r3, #0
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	f002 0203 	and.w	r2, r2, #3
 8003038:	0092      	lsls	r2, r2, #2
 800303a:	4093      	lsls	r3, r2
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	429a      	cmp	r2, r3
 8003040:	d132      	bne.n	80030a8 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003042:	4b49      	ldr	r3, [pc, #292]	; (8003168 <HAL_GPIO_DeInit+0x1e0>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	43db      	mvns	r3, r3
 800304a:	4947      	ldr	r1, [pc, #284]	; (8003168 <HAL_GPIO_DeInit+0x1e0>)
 800304c:	4013      	ands	r3, r2
 800304e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003050:	4b45      	ldr	r3, [pc, #276]	; (8003168 <HAL_GPIO_DeInit+0x1e0>)
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	43db      	mvns	r3, r3
 8003058:	4943      	ldr	r1, [pc, #268]	; (8003168 <HAL_GPIO_DeInit+0x1e0>)
 800305a:	4013      	ands	r3, r2
 800305c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800305e:	4b42      	ldr	r3, [pc, #264]	; (8003168 <HAL_GPIO_DeInit+0x1e0>)
 8003060:	689a      	ldr	r2, [r3, #8]
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	43db      	mvns	r3, r3
 8003066:	4940      	ldr	r1, [pc, #256]	; (8003168 <HAL_GPIO_DeInit+0x1e0>)
 8003068:	4013      	ands	r3, r2
 800306a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800306c:	4b3e      	ldr	r3, [pc, #248]	; (8003168 <HAL_GPIO_DeInit+0x1e0>)
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	43db      	mvns	r3, r3
 8003074:	493c      	ldr	r1, [pc, #240]	; (8003168 <HAL_GPIO_DeInit+0x1e0>)
 8003076:	4013      	ands	r3, r2
 8003078:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f003 0303 	and.w	r3, r3, #3
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	220f      	movs	r2, #15
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800308a:	4a2f      	ldr	r2, [pc, #188]	; (8003148 <HAL_GPIO_DeInit+0x1c0>)
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	089b      	lsrs	r3, r3, #2
 8003090:	3302      	adds	r3, #2
 8003092:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	43da      	mvns	r2, r3
 800309a:	482b      	ldr	r0, [pc, #172]	; (8003148 <HAL_GPIO_DeInit+0x1c0>)
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	089b      	lsrs	r3, r3, #2
 80030a0:	400a      	ands	r2, r1
 80030a2:	3302      	adds	r3, #2
 80030a4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	2103      	movs	r1, #3
 80030b2:	fa01 f303 	lsl.w	r3, r1, r3
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	08da      	lsrs	r2, r3, #3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3208      	adds	r2, #8
 80030c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	220f      	movs	r2, #15
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	43db      	mvns	r3, r3
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	08d2      	lsrs	r2, r2, #3
 80030dc:	4019      	ands	r1, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3208      	adds	r2, #8
 80030e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	2103      	movs	r1, #3
 80030f0:	fa01 f303 	lsl.w	r3, r1, r3
 80030f4:	43db      	mvns	r3, r3
 80030f6:	401a      	ands	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	2101      	movs	r1, #1
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	fa01 f303 	lsl.w	r3, r1, r3
 8003108:	43db      	mvns	r3, r3
 800310a:	401a      	ands	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	2103      	movs	r1, #3
 800311a:	fa01 f303 	lsl.w	r3, r1, r3
 800311e:	43db      	mvns	r3, r3
 8003120:	401a      	ands	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	3301      	adds	r3, #1
 800312a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	fa22 f303 	lsr.w	r3, r2, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	f47f af2f 	bne.w	8002f98 <HAL_GPIO_DeInit+0x10>
  }
}
 800313a:	bf00      	nop
 800313c:	bf00      	nop
 800313e:	371c      	adds	r7, #28
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	40010000 	.word	0x40010000
 800314c:	48000400 	.word	0x48000400
 8003150:	48000800 	.word	0x48000800
 8003154:	48000c00 	.word	0x48000c00
 8003158:	48001000 	.word	0x48001000
 800315c:	48001400 	.word	0x48001400
 8003160:	48001800 	.word	0x48001800
 8003164:	48001c00 	.word	0x48001c00
 8003168:	40010400 	.word	0x40010400

0800316c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	887b      	ldrh	r3, [r7, #2]
 800317e:	4013      	ands	r3, r2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003184:	2301      	movs	r3, #1
 8003186:	73fb      	strb	r3, [r7, #15]
 8003188:	e001      	b.n	800318e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800318a:	2300      	movs	r3, #0
 800318c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800318e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3714      	adds	r7, #20
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	460b      	mov	r3, r1
 80031a6:	807b      	strh	r3, [r7, #2]
 80031a8:	4613      	mov	r3, r2
 80031aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031ac:	787b      	ldrb	r3, [r7, #1]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031b2:	887a      	ldrh	r2, [r7, #2]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031b8:	e002      	b.n	80031c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031ba:	887a      	ldrh	r2, [r7, #2]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	460b      	mov	r3, r1
 80031d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031de:	887a      	ldrh	r2, [r7, #2]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4013      	ands	r3, r2
 80031e4:	041a      	lsls	r2, r3, #16
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	43d9      	mvns	r1, r3
 80031ea:	887b      	ldrh	r3, [r7, #2]
 80031ec:	400b      	ands	r3, r1
 80031ee:	431a      	orrs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	619a      	str	r2, [r3, #24]
}
 80031f4:	bf00      	nop
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e081      	b.n	8003316 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d106      	bne.n	800322c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7ff f9be 	bl	80025a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2224      	movs	r2, #36	; 0x24
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0201 	bic.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003250:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003260:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d107      	bne.n	800327a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003276:	609a      	str	r2, [r3, #8]
 8003278:	e006      	b.n	8003288 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003286:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	2b02      	cmp	r3, #2
 800328e:	d104      	bne.n	800329a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003298:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6812      	ldr	r2, [r2, #0]
 80032a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691a      	ldr	r2, [r3, #16]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	ea42 0103 	orr.w	r1, r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	021a      	lsls	r2, r3, #8
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	69d9      	ldr	r1, [r3, #28]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a1a      	ldr	r2, [r3, #32]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0201 	orr.w	r2, r2, #1
 80032f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2220      	movs	r2, #32
 8003302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b082      	sub	sp, #8
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e021      	b.n	8003374 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2224      	movs	r2, #36	; 0x24
 8003334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 0201 	bic.w	r2, r2, #1
 8003346:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff f971 	bl	8002630 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b088      	sub	sp, #32
 8003380:	af02      	add	r7, sp, #8
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	4608      	mov	r0, r1
 8003386:	4611      	mov	r1, r2
 8003388:	461a      	mov	r2, r3
 800338a:	4603      	mov	r3, r0
 800338c:	817b      	strh	r3, [r7, #10]
 800338e:	460b      	mov	r3, r1
 8003390:	813b      	strh	r3, [r7, #8]
 8003392:	4613      	mov	r3, r2
 8003394:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b20      	cmp	r3, #32
 80033a0:	f040 80f9 	bne.w	8003596 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <HAL_I2C_Mem_Write+0x34>
 80033aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d105      	bne.n	80033bc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e0ed      	b.n	8003598 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d101      	bne.n	80033ca <HAL_I2C_Mem_Write+0x4e>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e0e6      	b.n	8003598 <HAL_I2C_Mem_Write+0x21c>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033d2:	f7ff fb59 	bl	8002a88 <HAL_GetTick>
 80033d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	2319      	movs	r3, #25
 80033de:	2201      	movs	r2, #1
 80033e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 fac3 	bl	8003970 <I2C_WaitOnFlagUntilTimeout>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e0d1      	b.n	8003598 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2221      	movs	r2, #33	; 0x21
 80033f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2240      	movs	r2, #64	; 0x40
 8003400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6a3a      	ldr	r2, [r7, #32]
 800340e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003414:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800341c:	88f8      	ldrh	r0, [r7, #6]
 800341e:	893a      	ldrh	r2, [r7, #8]
 8003420:	8979      	ldrh	r1, [r7, #10]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	9301      	str	r3, [sp, #4]
 8003426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	4603      	mov	r3, r0
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 f9d3 	bl	80037d8 <I2C_RequestMemoryWrite>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e0a9      	b.n	8003598 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003448:	b29b      	uxth	r3, r3
 800344a:	2bff      	cmp	r3, #255	; 0xff
 800344c:	d90e      	bls.n	800346c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	22ff      	movs	r2, #255	; 0xff
 8003452:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003458:	b2da      	uxtb	r2, r3
 800345a:	8979      	ldrh	r1, [r7, #10]
 800345c:	2300      	movs	r3, #0
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 fba5 	bl	8003bb4 <I2C_TransferConfig>
 800346a:	e00f      	b.n	800348c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003470:	b29a      	uxth	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347a:	b2da      	uxtb	r2, r3
 800347c:	8979      	ldrh	r1, [r7, #10]
 800347e:	2300      	movs	r3, #0
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 fb94 	bl	8003bb4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 faad 	bl	80039f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e07b      	b.n	8003598 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	781a      	ldrb	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	1c5a      	adds	r2, r3, #1
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	3b01      	subs	r3, #1
 80034be:	b29a      	uxth	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d034      	beq.n	8003544 <HAL_I2C_Mem_Write+0x1c8>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d130      	bne.n	8003544 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e8:	2200      	movs	r2, #0
 80034ea:	2180      	movs	r1, #128	; 0x80
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 fa3f 	bl	8003970 <I2C_WaitOnFlagUntilTimeout>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e04d      	b.n	8003598 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003500:	b29b      	uxth	r3, r3
 8003502:	2bff      	cmp	r3, #255	; 0xff
 8003504:	d90e      	bls.n	8003524 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	22ff      	movs	r2, #255	; 0xff
 800350a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003510:	b2da      	uxtb	r2, r3
 8003512:	8979      	ldrh	r1, [r7, #10]
 8003514:	2300      	movs	r3, #0
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 fb49 	bl	8003bb4 <I2C_TransferConfig>
 8003522:	e00f      	b.n	8003544 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003528:	b29a      	uxth	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003532:	b2da      	uxtb	r2, r3
 8003534:	8979      	ldrh	r1, [r7, #10]
 8003536:	2300      	movs	r3, #0
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f000 fb38 	bl	8003bb4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003548:	b29b      	uxth	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d19e      	bne.n	800348c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 fa8c 	bl	8003a70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e01a      	b.n	8003598 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2220      	movs	r2, #32
 8003568:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6859      	ldr	r1, [r3, #4]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	4b0a      	ldr	r3, [pc, #40]	; (80035a0 <HAL_I2C_Mem_Write+0x224>)
 8003576:	400b      	ands	r3, r1
 8003578:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2220      	movs	r2, #32
 800357e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	e000      	b.n	8003598 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003596:	2302      	movs	r3, #2
  }
}
 8003598:	4618      	mov	r0, r3
 800359a:	3718      	adds	r7, #24
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	fe00e800 	.word	0xfe00e800

080035a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b088      	sub	sp, #32
 80035a8:	af02      	add	r7, sp, #8
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	4608      	mov	r0, r1
 80035ae:	4611      	mov	r1, r2
 80035b0:	461a      	mov	r2, r3
 80035b2:	4603      	mov	r3, r0
 80035b4:	817b      	strh	r3, [r7, #10]
 80035b6:	460b      	mov	r3, r1
 80035b8:	813b      	strh	r3, [r7, #8]
 80035ba:	4613      	mov	r3, r2
 80035bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b20      	cmp	r3, #32
 80035c8:	f040 80fd 	bne.w	80037c6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d002      	beq.n	80035d8 <HAL_I2C_Mem_Read+0x34>
 80035d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d105      	bne.n	80035e4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0f1      	b.n	80037c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d101      	bne.n	80035f2 <HAL_I2C_Mem_Read+0x4e>
 80035ee:	2302      	movs	r3, #2
 80035f0:	e0ea      	b.n	80037c8 <HAL_I2C_Mem_Read+0x224>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035fa:	f7ff fa45 	bl	8002a88 <HAL_GetTick>
 80035fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	2319      	movs	r3, #25
 8003606:	2201      	movs	r2, #1
 8003608:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 f9af 	bl	8003970 <I2C_WaitOnFlagUntilTimeout>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e0d5      	b.n	80037c8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2222      	movs	r2, #34	; 0x22
 8003620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2240      	movs	r2, #64	; 0x40
 8003628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a3a      	ldr	r2, [r7, #32]
 8003636:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800363c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003644:	88f8      	ldrh	r0, [r7, #6]
 8003646:	893a      	ldrh	r2, [r7, #8]
 8003648:	8979      	ldrh	r1, [r7, #10]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	9301      	str	r3, [sp, #4]
 800364e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	4603      	mov	r3, r0
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 f913 	bl	8003880 <I2C_RequestMemoryRead>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e0ad      	b.n	80037c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003670:	b29b      	uxth	r3, r3
 8003672:	2bff      	cmp	r3, #255	; 0xff
 8003674:	d90e      	bls.n	8003694 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	22ff      	movs	r2, #255	; 0xff
 800367a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003680:	b2da      	uxtb	r2, r3
 8003682:	8979      	ldrh	r1, [r7, #10]
 8003684:	4b52      	ldr	r3, [pc, #328]	; (80037d0 <HAL_I2C_Mem_Read+0x22c>)
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 fa91 	bl	8003bb4 <I2C_TransferConfig>
 8003692:	e00f      	b.n	80036b4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003698:	b29a      	uxth	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	8979      	ldrh	r1, [r7, #10]
 80036a6:	4b4a      	ldr	r3, [pc, #296]	; (80037d0 <HAL_I2C_Mem_Read+0x22c>)
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 fa80 	bl	8003bb4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ba:	2200      	movs	r2, #0
 80036bc:	2104      	movs	r1, #4
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 f956 	bl	8003970 <I2C_WaitOnFlagUntilTimeout>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e07c      	b.n	80037c8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	b2d2      	uxtb	r2, r2
 80036da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	1c5a      	adds	r2, r3, #1
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003704:	b29b      	uxth	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d034      	beq.n	8003774 <HAL_I2C_Mem_Read+0x1d0>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370e:	2b00      	cmp	r3, #0
 8003710:	d130      	bne.n	8003774 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003718:	2200      	movs	r2, #0
 800371a:	2180      	movs	r1, #128	; 0x80
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 f927 	bl	8003970 <I2C_WaitOnFlagUntilTimeout>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e04d      	b.n	80037c8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003730:	b29b      	uxth	r3, r3
 8003732:	2bff      	cmp	r3, #255	; 0xff
 8003734:	d90e      	bls.n	8003754 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	22ff      	movs	r2, #255	; 0xff
 800373a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003740:	b2da      	uxtb	r2, r3
 8003742:	8979      	ldrh	r1, [r7, #10]
 8003744:	2300      	movs	r3, #0
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 fa31 	bl	8003bb4 <I2C_TransferConfig>
 8003752:	e00f      	b.n	8003774 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003762:	b2da      	uxtb	r2, r3
 8003764:	8979      	ldrh	r1, [r7, #10]
 8003766:	2300      	movs	r3, #0
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 fa20 	bl	8003bb4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003778:	b29b      	uxth	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d19a      	bne.n	80036b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 f974 	bl	8003a70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e01a      	b.n	80037c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2220      	movs	r2, #32
 8003798:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6859      	ldr	r1, [r3, #4]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <HAL_I2C_Mem_Read+0x230>)
 80037a6:	400b      	ands	r3, r1
 80037a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2220      	movs	r2, #32
 80037ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	e000      	b.n	80037c8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80037c6:	2302      	movs	r3, #2
  }
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	80002400 	.word	0x80002400
 80037d4:	fe00e800 	.word	0xfe00e800

080037d8 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af02      	add	r7, sp, #8
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	4608      	mov	r0, r1
 80037e2:	4611      	mov	r1, r2
 80037e4:	461a      	mov	r2, r3
 80037e6:	4603      	mov	r3, r0
 80037e8:	817b      	strh	r3, [r7, #10]
 80037ea:	460b      	mov	r3, r1
 80037ec:	813b      	strh	r3, [r7, #8]
 80037ee:	4613      	mov	r3, r2
 80037f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80037f2:	88fb      	ldrh	r3, [r7, #6]
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	8979      	ldrh	r1, [r7, #10]
 80037f8:	4b20      	ldr	r3, [pc, #128]	; (800387c <I2C_RequestMemoryWrite+0xa4>)
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 f9d7 	bl	8003bb4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003806:	69fa      	ldr	r2, [r7, #28]
 8003808:	69b9      	ldr	r1, [r7, #24]
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 f8f0 	bl	80039f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e02c      	b.n	8003874 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800381a:	88fb      	ldrh	r3, [r7, #6]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d105      	bne.n	800382c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003820:	893b      	ldrh	r3, [r7, #8]
 8003822:	b2da      	uxtb	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	629a      	str	r2, [r3, #40]	; 0x28
 800382a:	e015      	b.n	8003858 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800382c:	893b      	ldrh	r3, [r7, #8]
 800382e:	0a1b      	lsrs	r3, r3, #8
 8003830:	b29b      	uxth	r3, r3
 8003832:	b2da      	uxtb	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800383a:	69fa      	ldr	r2, [r7, #28]
 800383c:	69b9      	ldr	r1, [r7, #24]
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 f8d6 	bl	80039f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e012      	b.n	8003874 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800384e:	893b      	ldrh	r3, [r7, #8]
 8003850:	b2da      	uxtb	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	2200      	movs	r2, #0
 8003860:	2180      	movs	r1, #128	; 0x80
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 f884 	bl	8003970 <I2C_WaitOnFlagUntilTimeout>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	80002000 	.word	0x80002000

08003880 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af02      	add	r7, sp, #8
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	4608      	mov	r0, r1
 800388a:	4611      	mov	r1, r2
 800388c:	461a      	mov	r2, r3
 800388e:	4603      	mov	r3, r0
 8003890:	817b      	strh	r3, [r7, #10]
 8003892:	460b      	mov	r3, r1
 8003894:	813b      	strh	r3, [r7, #8]
 8003896:	4613      	mov	r3, r2
 8003898:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800389a:	88fb      	ldrh	r3, [r7, #6]
 800389c:	b2da      	uxtb	r2, r3
 800389e:	8979      	ldrh	r1, [r7, #10]
 80038a0:	4b20      	ldr	r3, [pc, #128]	; (8003924 <I2C_RequestMemoryRead+0xa4>)
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	2300      	movs	r3, #0
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 f984 	bl	8003bb4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ac:	69fa      	ldr	r2, [r7, #28]
 80038ae:	69b9      	ldr	r1, [r7, #24]
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 f89d 	bl	80039f0 <I2C_WaitOnTXISFlagUntilTimeout>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e02c      	b.n	800391a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038c0:	88fb      	ldrh	r3, [r7, #6]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d105      	bne.n	80038d2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038c6:	893b      	ldrh	r3, [r7, #8]
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	629a      	str	r2, [r3, #40]	; 0x28
 80038d0:	e015      	b.n	80038fe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80038d2:	893b      	ldrh	r3, [r7, #8]
 80038d4:	0a1b      	lsrs	r3, r3, #8
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038e0:	69fa      	ldr	r2, [r7, #28]
 80038e2:	69b9      	ldr	r1, [r7, #24]
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 f883 	bl	80039f0 <I2C_WaitOnTXISFlagUntilTimeout>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e012      	b.n	800391a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038f4:	893b      	ldrh	r3, [r7, #8]
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	2200      	movs	r2, #0
 8003906:	2140      	movs	r1, #64	; 0x40
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f000 f831 	bl	8003970 <I2C_WaitOnFlagUntilTimeout>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e000      	b.n	800391a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	80002000 	.word	0x80002000

08003928 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b02      	cmp	r3, #2
 800393c:	d103      	bne.n	8003946 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2200      	movs	r2, #0
 8003944:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b01      	cmp	r3, #1
 8003952:	d007      	beq.n	8003964 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699a      	ldr	r2, [r3, #24]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0201 	orr.w	r2, r2, #1
 8003962:	619a      	str	r2, [r3, #24]
  }
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	603b      	str	r3, [r7, #0]
 800397c:	4613      	mov	r3, r2
 800397e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003980:	e022      	b.n	80039c8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003988:	d01e      	beq.n	80039c8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398a:	f7ff f87d 	bl	8002a88 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	429a      	cmp	r2, r3
 8003998:	d302      	bcc.n	80039a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d113      	bne.n	80039c8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a4:	f043 0220 	orr.w	r2, r3, #32
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e00f      	b.n	80039e8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699a      	ldr	r2, [r3, #24]
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	4013      	ands	r3, r2
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	bf0c      	ite	eq
 80039d8:	2301      	moveq	r3, #1
 80039da:	2300      	movne	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	461a      	mov	r2, r3
 80039e0:	79fb      	ldrb	r3, [r7, #7]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d0cd      	beq.n	8003982 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039fc:	e02c      	b.n	8003a58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	68b9      	ldr	r1, [r7, #8]
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 f870 	bl	8003ae8 <I2C_IsAcknowledgeFailed>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e02a      	b.n	8003a68 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a18:	d01e      	beq.n	8003a58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a1a:	f7ff f835 	bl	8002a88 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d302      	bcc.n	8003a30 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d113      	bne.n	8003a58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a34:	f043 0220 	orr.w	r2, r3, #32
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e007      	b.n	8003a68 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d1cb      	bne.n	80039fe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a7c:	e028      	b.n	8003ad0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	68b9      	ldr	r1, [r7, #8]
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 f830 	bl	8003ae8 <I2C_IsAcknowledgeFailed>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e026      	b.n	8003ae0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a92:	f7fe fff9 	bl	8002a88 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d302      	bcc.n	8003aa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d113      	bne.n	8003ad0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aac:	f043 0220 	orr.w	r2, r3, #32
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e007      	b.n	8003ae0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	f003 0320 	and.w	r3, r3, #32
 8003ada:	2b20      	cmp	r3, #32
 8003adc:	d1cf      	bne.n	8003a7e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	f003 0310 	and.w	r3, r3, #16
 8003afe:	2b10      	cmp	r3, #16
 8003b00:	d151      	bne.n	8003ba6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b02:	e022      	b.n	8003b4a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b0a:	d01e      	beq.n	8003b4a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b0c:	f7fe ffbc 	bl	8002a88 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	68ba      	ldr	r2, [r7, #8]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d302      	bcc.n	8003b22 <I2C_IsAcknowledgeFailed+0x3a>
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d113      	bne.n	8003b4a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b26:	f043 0220 	orr.w	r2, r3, #32
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2220      	movs	r2, #32
 8003b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e02e      	b.n	8003ba8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	f003 0320 	and.w	r3, r3, #32
 8003b54:	2b20      	cmp	r3, #32
 8003b56:	d1d5      	bne.n	8003b04 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2220      	movs	r2, #32
 8003b66:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f7ff fedd 	bl	8003928 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6859      	ldr	r1, [r3, #4]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	4b0d      	ldr	r3, [pc, #52]	; (8003bb0 <I2C_IsAcknowledgeFailed+0xc8>)
 8003b7a:	400b      	ands	r3, r1
 8003b7c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b82:	f043 0204 	orr.w	r2, r3, #4
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e000      	b.n	8003ba8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	fe00e800 	.word	0xfe00e800

08003bb4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	607b      	str	r3, [r7, #4]
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	817b      	strh	r3, [r7, #10]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	0d5b      	lsrs	r3, r3, #21
 8003bd0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003bd4:	4b0d      	ldr	r3, [pc, #52]	; (8003c0c <I2C_TransferConfig+0x58>)
 8003bd6:	430b      	orrs	r3, r1
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	ea02 0103 	and.w	r1, r2, r3
 8003bde:	897b      	ldrh	r3, [r7, #10]
 8003be0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003be4:	7a7b      	ldrb	r3, [r7, #9]
 8003be6:	041b      	lsls	r3, r3, #16
 8003be8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003bfe:	bf00      	nop
 8003c00:	3714      	adds	r7, #20
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	03ff63ff 	.word	0x03ff63ff

08003c10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	d138      	bne.n	8003c98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d101      	bne.n	8003c34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c30:	2302      	movs	r3, #2
 8003c32:	e032      	b.n	8003c9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2224      	movs	r2, #36	; 0x24
 8003c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0201 	bic.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6819      	ldr	r1, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 0201 	orr.w	r2, r2, #1
 8003c82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c94:	2300      	movs	r3, #0
 8003c96:	e000      	b.n	8003c9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c98:	2302      	movs	r3, #2
  }
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b085      	sub	sp, #20
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b20      	cmp	r3, #32
 8003cba:	d139      	bne.n	8003d30 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d101      	bne.n	8003cca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	e033      	b.n	8003d32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2224      	movs	r2, #36	; 0x24
 8003cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0201 	bic.w	r2, r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003cf8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	021b      	lsls	r3, r3, #8
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0201 	orr.w	r2, r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	e000      	b.n	8003d32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d30:	2302      	movs	r3, #2
  }
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
	...

08003d40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d44:	4b0d      	ldr	r3, [pc, #52]	; (8003d7c <HAL_PWREx_GetVoltageRange+0x3c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d50:	d102      	bne.n	8003d58 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d56:	e00b      	b.n	8003d70 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003d58:	4b08      	ldr	r3, [pc, #32]	; (8003d7c <HAL_PWREx_GetVoltageRange+0x3c>)
 8003d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d66:	d102      	bne.n	8003d6e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003d68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d6c:	e000      	b.n	8003d70 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003d6e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	40007000 	.word	0x40007000

08003d80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d141      	bne.n	8003e12 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d8e:	4b4b      	ldr	r3, [pc, #300]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9a:	d131      	bne.n	8003e00 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d9c:	4b47      	ldr	r3, [pc, #284]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003da2:	4a46      	ldr	r2, [pc, #280]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003da8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dac:	4b43      	ldr	r3, [pc, #268]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003db4:	4a41      	ldr	r2, [pc, #260]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003dbc:	4b40      	ldr	r3, [pc, #256]	; (8003ec0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2232      	movs	r2, #50	; 0x32
 8003dc2:	fb02 f303 	mul.w	r3, r2, r3
 8003dc6:	4a3f      	ldr	r2, [pc, #252]	; (8003ec4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dcc:	0c9b      	lsrs	r3, r3, #18
 8003dce:	3301      	adds	r3, #1
 8003dd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dd2:	e002      	b.n	8003dda <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dda:	4b38      	ldr	r3, [pc, #224]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de6:	d102      	bne.n	8003dee <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f2      	bne.n	8003dd4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dee:	4b33      	ldr	r3, [pc, #204]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dfa:	d158      	bne.n	8003eae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e057      	b.n	8003eb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e00:	4b2e      	ldr	r3, [pc, #184]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e06:	4a2d      	ldr	r2, [pc, #180]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e10:	e04d      	b.n	8003eae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e18:	d141      	bne.n	8003e9e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e1a:	4b28      	ldr	r3, [pc, #160]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e26:	d131      	bne.n	8003e8c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e28:	4b24      	ldr	r3, [pc, #144]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e2e:	4a23      	ldr	r2, [pc, #140]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e38:	4b20      	ldr	r3, [pc, #128]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e40:	4a1e      	ldr	r2, [pc, #120]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003e48:	4b1d      	ldr	r3, [pc, #116]	; (8003ec0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2232      	movs	r2, #50	; 0x32
 8003e4e:	fb02 f303 	mul.w	r3, r2, r3
 8003e52:	4a1c      	ldr	r2, [pc, #112]	; (8003ec4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e54:	fba2 2303 	umull	r2, r3, r2, r3
 8003e58:	0c9b      	lsrs	r3, r3, #18
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e5e:	e002      	b.n	8003e66 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e66:	4b15      	ldr	r3, [pc, #84]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e72:	d102      	bne.n	8003e7a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1f2      	bne.n	8003e60 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e7a:	4b10      	ldr	r3, [pc, #64]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e86:	d112      	bne.n	8003eae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e011      	b.n	8003eb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e8c:	4b0b      	ldr	r3, [pc, #44]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e92:	4a0a      	ldr	r2, [pc, #40]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e9c:	e007      	b.n	8003eae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e9e:	4b07      	ldr	r3, [pc, #28]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ea6:	4a05      	ldr	r2, [pc, #20]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ea8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003eac:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	40007000 	.word	0x40007000
 8003ec0:	200000c4 	.word	0x200000c4
 8003ec4:	431bde83 	.word	0x431bde83

08003ec8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b088      	sub	sp, #32
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d102      	bne.n	8003edc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	f000 bc16 	b.w	8004708 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003edc:	4ba0      	ldr	r3, [pc, #640]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f003 030c 	and.w	r3, r3, #12
 8003ee4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ee6:	4b9e      	ldr	r3, [pc, #632]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0310 	and.w	r3, r3, #16
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 80e4 	beq.w	80040c6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d007      	beq.n	8003f14 <HAL_RCC_OscConfig+0x4c>
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	2b0c      	cmp	r3, #12
 8003f08:	f040 808b 	bne.w	8004022 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	f040 8087 	bne.w	8004022 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f14:	4b92      	ldr	r3, [pc, #584]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d005      	beq.n	8003f2c <HAL_RCC_OscConfig+0x64>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e3ed      	b.n	8004708 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a1a      	ldr	r2, [r3, #32]
 8003f30:	4b8b      	ldr	r3, [pc, #556]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0308 	and.w	r3, r3, #8
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d004      	beq.n	8003f46 <HAL_RCC_OscConfig+0x7e>
 8003f3c:	4b88      	ldr	r3, [pc, #544]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f44:	e005      	b.n	8003f52 <HAL_RCC_OscConfig+0x8a>
 8003f46:	4b86      	ldr	r3, [pc, #536]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 8003f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f4c:	091b      	lsrs	r3, r3, #4
 8003f4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d223      	bcs.n	8003f9e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fdfc 	bl	8004b58 <RCC_SetFlashLatencyFromMSIRange>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e3ce      	b.n	8004708 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f6a:	4b7d      	ldr	r3, [pc, #500]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a7c      	ldr	r2, [pc, #496]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 8003f70:	f043 0308 	orr.w	r3, r3, #8
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	4b7a      	ldr	r3, [pc, #488]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	4977      	ldr	r1, [pc, #476]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f88:	4b75      	ldr	r3, [pc, #468]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	021b      	lsls	r3, r3, #8
 8003f96:	4972      	ldr	r1, [pc, #456]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	604b      	str	r3, [r1, #4]
 8003f9c:	e025      	b.n	8003fea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f9e:	4b70      	ldr	r3, [pc, #448]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a6f      	ldr	r2, [pc, #444]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 8003fa4:	f043 0308 	orr.w	r3, r3, #8
 8003fa8:	6013      	str	r3, [r2, #0]
 8003faa:	4b6d      	ldr	r3, [pc, #436]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	496a      	ldr	r1, [pc, #424]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fbc:	4b68      	ldr	r3, [pc, #416]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	021b      	lsls	r3, r3, #8
 8003fca:	4965      	ldr	r1, [pc, #404]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d109      	bne.n	8003fea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 fdbc 	bl	8004b58 <RCC_SetFlashLatencyFromMSIRange>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e38e      	b.n	8004708 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fea:	f000 fcbf 	bl	800496c <HAL_RCC_GetSysClockFreq>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	4b5b      	ldr	r3, [pc, #364]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	091b      	lsrs	r3, r3, #4
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	495a      	ldr	r1, [pc, #360]	; (8004164 <HAL_RCC_OscConfig+0x29c>)
 8003ffc:	5ccb      	ldrb	r3, [r1, r3]
 8003ffe:	f003 031f 	and.w	r3, r3, #31
 8004002:	fa22 f303 	lsr.w	r3, r2, r3
 8004006:	4a58      	ldr	r2, [pc, #352]	; (8004168 <HAL_RCC_OscConfig+0x2a0>)
 8004008:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800400a:	4b58      	ldr	r3, [pc, #352]	; (800416c <HAL_RCC_OscConfig+0x2a4>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f7fe fb76 	bl	8002700 <HAL_InitTick>
 8004014:	4603      	mov	r3, r0
 8004016:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004018:	7bfb      	ldrb	r3, [r7, #15]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d052      	beq.n	80040c4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800401e:	7bfb      	ldrb	r3, [r7, #15]
 8004020:	e372      	b.n	8004708 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d032      	beq.n	8004090 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800402a:	4b4d      	ldr	r3, [pc, #308]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a4c      	ldr	r2, [pc, #304]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 8004030:	f043 0301 	orr.w	r3, r3, #1
 8004034:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004036:	f7fe fd27 	bl	8002a88 <HAL_GetTick>
 800403a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800403c:	e008      	b.n	8004050 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800403e:	f7fe fd23 	bl	8002a88 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e35b      	b.n	8004708 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004050:	4b43      	ldr	r3, [pc, #268]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0f0      	beq.n	800403e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800405c:	4b40      	ldr	r3, [pc, #256]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a3f      	ldr	r2, [pc, #252]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 8004062:	f043 0308 	orr.w	r3, r3, #8
 8004066:	6013      	str	r3, [r2, #0]
 8004068:	4b3d      	ldr	r3, [pc, #244]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	493a      	ldr	r1, [pc, #232]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 8004076:	4313      	orrs	r3, r2
 8004078:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800407a:	4b39      	ldr	r3, [pc, #228]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	021b      	lsls	r3, r3, #8
 8004088:	4935      	ldr	r1, [pc, #212]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 800408a:	4313      	orrs	r3, r2
 800408c:	604b      	str	r3, [r1, #4]
 800408e:	e01a      	b.n	80040c6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004090:	4b33      	ldr	r3, [pc, #204]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a32      	ldr	r2, [pc, #200]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 8004096:	f023 0301 	bic.w	r3, r3, #1
 800409a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800409c:	f7fe fcf4 	bl	8002a88 <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040a4:	f7fe fcf0 	bl	8002a88 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e328      	b.n	8004708 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80040b6:	4b2a      	ldr	r3, [pc, #168]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1f0      	bne.n	80040a4 <HAL_RCC_OscConfig+0x1dc>
 80040c2:	e000      	b.n	80040c6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d073      	beq.n	80041ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	d005      	beq.n	80040e4 <HAL_RCC_OscConfig+0x21c>
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	2b0c      	cmp	r3, #12
 80040dc:	d10e      	bne.n	80040fc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	2b03      	cmp	r3, #3
 80040e2:	d10b      	bne.n	80040fc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e4:	4b1e      	ldr	r3, [pc, #120]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d063      	beq.n	80041b8 <HAL_RCC_OscConfig+0x2f0>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d15f      	bne.n	80041b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e305      	b.n	8004708 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004104:	d106      	bne.n	8004114 <HAL_RCC_OscConfig+0x24c>
 8004106:	4b16      	ldr	r3, [pc, #88]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a15      	ldr	r2, [pc, #84]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 800410c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	e01d      	b.n	8004150 <HAL_RCC_OscConfig+0x288>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800411c:	d10c      	bne.n	8004138 <HAL_RCC_OscConfig+0x270>
 800411e:	4b10      	ldr	r3, [pc, #64]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a0f      	ldr	r2, [pc, #60]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 8004124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004128:	6013      	str	r3, [r2, #0]
 800412a:	4b0d      	ldr	r3, [pc, #52]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a0c      	ldr	r2, [pc, #48]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 8004130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	e00b      	b.n	8004150 <HAL_RCC_OscConfig+0x288>
 8004138:	4b09      	ldr	r3, [pc, #36]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a08      	ldr	r2, [pc, #32]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 800413e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004142:	6013      	str	r3, [r2, #0]
 8004144:	4b06      	ldr	r3, [pc, #24]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a05      	ldr	r2, [pc, #20]	; (8004160 <HAL_RCC_OscConfig+0x298>)
 800414a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800414e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d01b      	beq.n	8004190 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004158:	f7fe fc96 	bl	8002a88 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800415e:	e010      	b.n	8004182 <HAL_RCC_OscConfig+0x2ba>
 8004160:	40021000 	.word	0x40021000
 8004164:	0800ac48 	.word	0x0800ac48
 8004168:	200000c4 	.word	0x200000c4
 800416c:	200000c8 	.word	0x200000c8
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004170:	f7fe fc8a 	bl	8002a88 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b64      	cmp	r3, #100	; 0x64
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e2c2      	b.n	8004708 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004182:	4baf      	ldr	r3, [pc, #700]	; (8004440 <HAL_RCC_OscConfig+0x578>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0f0      	beq.n	8004170 <HAL_RCC_OscConfig+0x2a8>
 800418e:	e014      	b.n	80041ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004190:	f7fe fc7a 	bl	8002a88 <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004198:	f7fe fc76 	bl	8002a88 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b64      	cmp	r3, #100	; 0x64
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e2ae      	b.n	8004708 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041aa:	4ba5      	ldr	r3, [pc, #660]	; (8004440 <HAL_RCC_OscConfig+0x578>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1f0      	bne.n	8004198 <HAL_RCC_OscConfig+0x2d0>
 80041b6:	e000      	b.n	80041ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d060      	beq.n	8004288 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	d005      	beq.n	80041d8 <HAL_RCC_OscConfig+0x310>
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	2b0c      	cmp	r3, #12
 80041d0:	d119      	bne.n	8004206 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d116      	bne.n	8004206 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041d8:	4b99      	ldr	r3, [pc, #612]	; (8004440 <HAL_RCC_OscConfig+0x578>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d005      	beq.n	80041f0 <HAL_RCC_OscConfig+0x328>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e28b      	b.n	8004708 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f0:	4b93      	ldr	r3, [pc, #588]	; (8004440 <HAL_RCC_OscConfig+0x578>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	061b      	lsls	r3, r3, #24
 80041fe:	4990      	ldr	r1, [pc, #576]	; (8004440 <HAL_RCC_OscConfig+0x578>)
 8004200:	4313      	orrs	r3, r2
 8004202:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004204:	e040      	b.n	8004288 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d023      	beq.n	8004256 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800420e:	4b8c      	ldr	r3, [pc, #560]	; (8004440 <HAL_RCC_OscConfig+0x578>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a8b      	ldr	r2, [pc, #556]	; (8004440 <HAL_RCC_OscConfig+0x578>)
 8004214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004218:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421a:	f7fe fc35 	bl	8002a88 <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004220:	e008      	b.n	8004234 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004222:	f7fe fc31 	bl	8002a88 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e269      	b.n	8004708 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004234:	4b82      	ldr	r3, [pc, #520]	; (8004440 <HAL_RCC_OscConfig+0x578>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0f0      	beq.n	8004222 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004240:	4b7f      	ldr	r3, [pc, #508]	; (8004440 <HAL_RCC_OscConfig+0x578>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	061b      	lsls	r3, r3, #24
 800424e:	497c      	ldr	r1, [pc, #496]	; (8004440 <HAL_RCC_OscConfig+0x578>)
 8004250:	4313      	orrs	r3, r2
 8004252:	604b      	str	r3, [r1, #4]
 8004254:	e018      	b.n	8004288 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004256:	4b7a      	ldr	r3, [pc, #488]	; (8004440 <HAL_RCC_OscConfig+0x578>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a79      	ldr	r2, [pc, #484]	; (8004440 <HAL_RCC_OscConfig+0x578>)
 800425c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004260:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004262:	f7fe fc11 	bl	8002a88 <HAL_GetTick>
 8004266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004268:	e008      	b.n	800427c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800426a:	f7fe fc0d 	bl	8002a88 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e245      	b.n	8004708 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800427c:	4b70      	ldr	r3, [pc, #448]	; (8004440 <HAL_RCC_OscConfig+0x578>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1f0      	bne.n	800426a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0308 	and.w	r3, r3, #8
 8004290:	2b00      	cmp	r3, #0
 8004292:	d03c      	beq.n	800430e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d01c      	beq.n	80042d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800429c:	4b68      	ldr	r3, [pc, #416]	; (8004440 <HAL_RCC_OscConfig+0x578>)
 800429e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042a2:	4a67      	ldr	r2, [pc, #412]	; (8004440 <HAL_RCC_OscConfig+0x578>)
 80042a4:	f043 0301 	orr.w	r3, r3, #1
 80042a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ac:	f7fe fbec 	bl	8002a88 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042b4:	f7fe fbe8 	bl	8002a88 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e220      	b.n	8004708 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042c6:	4b5e      	ldr	r3, [pc, #376]	; (8004440 <HAL_RCC_OscConfig+0x578>)
 80042c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0ef      	beq.n	80042b4 <HAL_RCC_OscConfig+0x3ec>
 80042d4:	e01b      	b.n	800430e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042d6:	4b5a      	ldr	r3, [pc, #360]	; (8004440 <HAL_RCC_OscConfig+0x578>)
 80042d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042dc:	4a58      	ldr	r2, [pc, #352]	; (8004440 <HAL_RCC_OscConfig+0x578>)
 80042de:	f023 0301 	bic.w	r3, r3, #1
 80042e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e6:	f7fe fbcf 	bl	8002a88 <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042ec:	e008      	b.n	8004300 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042ee:	f7fe fbcb 	bl	8002a88 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e203      	b.n	8004708 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004300:	4b4f      	ldr	r3, [pc, #316]	; (8004440 <HAL_RCC_OscConfig+0x578>)
 8004302:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1ef      	bne.n	80042ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0304 	and.w	r3, r3, #4
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 80a6 	beq.w	8004468 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800431c:	2300      	movs	r3, #0
 800431e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004320:	4b47      	ldr	r3, [pc, #284]	; (8004440 <HAL_RCC_OscConfig+0x578>)
 8004322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10d      	bne.n	8004348 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800432c:	4b44      	ldr	r3, [pc, #272]	; (8004440 <HAL_RCC_OscConfig+0x578>)
 800432e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004330:	4a43      	ldr	r2, [pc, #268]	; (8004440 <HAL_RCC_OscConfig+0x578>)
 8004332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004336:	6593      	str	r3, [r2, #88]	; 0x58
 8004338:	4b41      	ldr	r3, [pc, #260]	; (8004440 <HAL_RCC_OscConfig+0x578>)
 800433a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800433c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004340:	60bb      	str	r3, [r7, #8]
 8004342:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004344:	2301      	movs	r3, #1
 8004346:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004348:	4b3e      	ldr	r3, [pc, #248]	; (8004444 <HAL_RCC_OscConfig+0x57c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004350:	2b00      	cmp	r3, #0
 8004352:	d118      	bne.n	8004386 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004354:	4b3b      	ldr	r3, [pc, #236]	; (8004444 <HAL_RCC_OscConfig+0x57c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a3a      	ldr	r2, [pc, #232]	; (8004444 <HAL_RCC_OscConfig+0x57c>)
 800435a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800435e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004360:	f7fe fb92 	bl	8002a88 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004368:	f7fe fb8e 	bl	8002a88 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e1c6      	b.n	8004708 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800437a:	4b32      	ldr	r3, [pc, #200]	; (8004444 <HAL_RCC_OscConfig+0x57c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0f0      	beq.n	8004368 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d108      	bne.n	80043a0 <HAL_RCC_OscConfig+0x4d8>
 800438e:	4b2c      	ldr	r3, [pc, #176]	; (8004440 <HAL_RCC_OscConfig+0x578>)
 8004390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004394:	4a2a      	ldr	r2, [pc, #168]	; (8004440 <HAL_RCC_OscConfig+0x578>)
 8004396:	f043 0301 	orr.w	r3, r3, #1
 800439a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800439e:	e024      	b.n	80043ea <HAL_RCC_OscConfig+0x522>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	2b05      	cmp	r3, #5
 80043a6:	d110      	bne.n	80043ca <HAL_RCC_OscConfig+0x502>
 80043a8:	4b25      	ldr	r3, [pc, #148]	; (8004440 <HAL_RCC_OscConfig+0x578>)
 80043aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ae:	4a24      	ldr	r2, [pc, #144]	; (8004440 <HAL_RCC_OscConfig+0x578>)
 80043b0:	f043 0304 	orr.w	r3, r3, #4
 80043b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043b8:	4b21      	ldr	r3, [pc, #132]	; (8004440 <HAL_RCC_OscConfig+0x578>)
 80043ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043be:	4a20      	ldr	r2, [pc, #128]	; (8004440 <HAL_RCC_OscConfig+0x578>)
 80043c0:	f043 0301 	orr.w	r3, r3, #1
 80043c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043c8:	e00f      	b.n	80043ea <HAL_RCC_OscConfig+0x522>
 80043ca:	4b1d      	ldr	r3, [pc, #116]	; (8004440 <HAL_RCC_OscConfig+0x578>)
 80043cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d0:	4a1b      	ldr	r2, [pc, #108]	; (8004440 <HAL_RCC_OscConfig+0x578>)
 80043d2:	f023 0301 	bic.w	r3, r3, #1
 80043d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043da:	4b19      	ldr	r3, [pc, #100]	; (8004440 <HAL_RCC_OscConfig+0x578>)
 80043dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e0:	4a17      	ldr	r2, [pc, #92]	; (8004440 <HAL_RCC_OscConfig+0x578>)
 80043e2:	f023 0304 	bic.w	r3, r3, #4
 80043e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d016      	beq.n	8004420 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f2:	f7fe fb49 	bl	8002a88 <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043f8:	e00a      	b.n	8004410 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043fa:	f7fe fb45 	bl	8002a88 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	f241 3288 	movw	r2, #5000	; 0x1388
 8004408:	4293      	cmp	r3, r2
 800440a:	d901      	bls.n	8004410 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e17b      	b.n	8004708 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004410:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <HAL_RCC_OscConfig+0x578>)
 8004412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0ed      	beq.n	80043fa <HAL_RCC_OscConfig+0x532>
 800441e:	e01a      	b.n	8004456 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004420:	f7fe fb32 	bl	8002a88 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004426:	e00f      	b.n	8004448 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004428:	f7fe fb2e 	bl	8002a88 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	f241 3288 	movw	r2, #5000	; 0x1388
 8004436:	4293      	cmp	r3, r2
 8004438:	d906      	bls.n	8004448 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e164      	b.n	8004708 <HAL_RCC_OscConfig+0x840>
 800443e:	bf00      	nop
 8004440:	40021000 	.word	0x40021000
 8004444:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004448:	4ba8      	ldr	r3, [pc, #672]	; (80046ec <HAL_RCC_OscConfig+0x824>)
 800444a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1e8      	bne.n	8004428 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004456:	7ffb      	ldrb	r3, [r7, #31]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d105      	bne.n	8004468 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800445c:	4ba3      	ldr	r3, [pc, #652]	; (80046ec <HAL_RCC_OscConfig+0x824>)
 800445e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004460:	4aa2      	ldr	r2, [pc, #648]	; (80046ec <HAL_RCC_OscConfig+0x824>)
 8004462:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004466:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0320 	and.w	r3, r3, #32
 8004470:	2b00      	cmp	r3, #0
 8004472:	d03c      	beq.n	80044ee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	2b00      	cmp	r3, #0
 800447a:	d01c      	beq.n	80044b6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800447c:	4b9b      	ldr	r3, [pc, #620]	; (80046ec <HAL_RCC_OscConfig+0x824>)
 800447e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004482:	4a9a      	ldr	r2, [pc, #616]	; (80046ec <HAL_RCC_OscConfig+0x824>)
 8004484:	f043 0301 	orr.w	r3, r3, #1
 8004488:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800448c:	f7fe fafc 	bl	8002a88 <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004494:	f7fe faf8 	bl	8002a88 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e130      	b.n	8004708 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044a6:	4b91      	ldr	r3, [pc, #580]	; (80046ec <HAL_RCC_OscConfig+0x824>)
 80044a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0ef      	beq.n	8004494 <HAL_RCC_OscConfig+0x5cc>
 80044b4:	e01b      	b.n	80044ee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044b6:	4b8d      	ldr	r3, [pc, #564]	; (80046ec <HAL_RCC_OscConfig+0x824>)
 80044b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044bc:	4a8b      	ldr	r2, [pc, #556]	; (80046ec <HAL_RCC_OscConfig+0x824>)
 80044be:	f023 0301 	bic.w	r3, r3, #1
 80044c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c6:	f7fe fadf 	bl	8002a88 <HAL_GetTick>
 80044ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044ce:	f7fe fadb 	bl	8002a88 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e113      	b.n	8004708 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044e0:	4b82      	ldr	r3, [pc, #520]	; (80046ec <HAL_RCC_OscConfig+0x824>)
 80044e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1ef      	bne.n	80044ce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 8107 	beq.w	8004706 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	f040 80cb 	bne.w	8004698 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004502:	4b7a      	ldr	r3, [pc, #488]	; (80046ec <HAL_RCC_OscConfig+0x824>)
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f003 0203 	and.w	r2, r3, #3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004512:	429a      	cmp	r2, r3
 8004514:	d12c      	bne.n	8004570 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004520:	3b01      	subs	r3, #1
 8004522:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004524:	429a      	cmp	r2, r3
 8004526:	d123      	bne.n	8004570 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004532:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004534:	429a      	cmp	r2, r3
 8004536:	d11b      	bne.n	8004570 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004542:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004544:	429a      	cmp	r2, r3
 8004546:	d113      	bne.n	8004570 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004552:	085b      	lsrs	r3, r3, #1
 8004554:	3b01      	subs	r3, #1
 8004556:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004558:	429a      	cmp	r2, r3
 800455a:	d109      	bne.n	8004570 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	085b      	lsrs	r3, r3, #1
 8004568:	3b01      	subs	r3, #1
 800456a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800456c:	429a      	cmp	r2, r3
 800456e:	d06d      	beq.n	800464c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	2b0c      	cmp	r3, #12
 8004574:	d068      	beq.n	8004648 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004576:	4b5d      	ldr	r3, [pc, #372]	; (80046ec <HAL_RCC_OscConfig+0x824>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d105      	bne.n	800458e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004582:	4b5a      	ldr	r3, [pc, #360]	; (80046ec <HAL_RCC_OscConfig+0x824>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e0ba      	b.n	8004708 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004592:	4b56      	ldr	r3, [pc, #344]	; (80046ec <HAL_RCC_OscConfig+0x824>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a55      	ldr	r2, [pc, #340]	; (80046ec <HAL_RCC_OscConfig+0x824>)
 8004598:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800459c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800459e:	f7fe fa73 	bl	8002a88 <HAL_GetTick>
 80045a2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045a4:	e008      	b.n	80045b8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a6:	f7fe fa6f 	bl	8002a88 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e0a7      	b.n	8004708 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045b8:	4b4c      	ldr	r3, [pc, #304]	; (80046ec <HAL_RCC_OscConfig+0x824>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1f0      	bne.n	80045a6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045c4:	4b49      	ldr	r3, [pc, #292]	; (80046ec <HAL_RCC_OscConfig+0x824>)
 80045c6:	68da      	ldr	r2, [r3, #12]
 80045c8:	4b49      	ldr	r3, [pc, #292]	; (80046f0 <HAL_RCC_OscConfig+0x828>)
 80045ca:	4013      	ands	r3, r2
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045d4:	3a01      	subs	r2, #1
 80045d6:	0112      	lsls	r2, r2, #4
 80045d8:	4311      	orrs	r1, r2
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045de:	0212      	lsls	r2, r2, #8
 80045e0:	4311      	orrs	r1, r2
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80045e6:	0852      	lsrs	r2, r2, #1
 80045e8:	3a01      	subs	r2, #1
 80045ea:	0552      	lsls	r2, r2, #21
 80045ec:	4311      	orrs	r1, r2
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80045f2:	0852      	lsrs	r2, r2, #1
 80045f4:	3a01      	subs	r2, #1
 80045f6:	0652      	lsls	r2, r2, #25
 80045f8:	4311      	orrs	r1, r2
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045fe:	06d2      	lsls	r2, r2, #27
 8004600:	430a      	orrs	r2, r1
 8004602:	493a      	ldr	r1, [pc, #232]	; (80046ec <HAL_RCC_OscConfig+0x824>)
 8004604:	4313      	orrs	r3, r2
 8004606:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004608:	4b38      	ldr	r3, [pc, #224]	; (80046ec <HAL_RCC_OscConfig+0x824>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a37      	ldr	r2, [pc, #220]	; (80046ec <HAL_RCC_OscConfig+0x824>)
 800460e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004612:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004614:	4b35      	ldr	r3, [pc, #212]	; (80046ec <HAL_RCC_OscConfig+0x824>)
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	4a34      	ldr	r2, [pc, #208]	; (80046ec <HAL_RCC_OscConfig+0x824>)
 800461a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800461e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004620:	f7fe fa32 	bl	8002a88 <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004628:	f7fe fa2e 	bl	8002a88 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e066      	b.n	8004708 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800463a:	4b2c      	ldr	r3, [pc, #176]	; (80046ec <HAL_RCC_OscConfig+0x824>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d0f0      	beq.n	8004628 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004646:	e05e      	b.n	8004706 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e05d      	b.n	8004708 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800464c:	4b27      	ldr	r3, [pc, #156]	; (80046ec <HAL_RCC_OscConfig+0x824>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d156      	bne.n	8004706 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004658:	4b24      	ldr	r3, [pc, #144]	; (80046ec <HAL_RCC_OscConfig+0x824>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a23      	ldr	r2, [pc, #140]	; (80046ec <HAL_RCC_OscConfig+0x824>)
 800465e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004662:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004664:	4b21      	ldr	r3, [pc, #132]	; (80046ec <HAL_RCC_OscConfig+0x824>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	4a20      	ldr	r2, [pc, #128]	; (80046ec <HAL_RCC_OscConfig+0x824>)
 800466a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800466e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004670:	f7fe fa0a 	bl	8002a88 <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004678:	f7fe fa06 	bl	8002a88 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e03e      	b.n	8004708 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800468a:	4b18      	ldr	r3, [pc, #96]	; (80046ec <HAL_RCC_OscConfig+0x824>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0f0      	beq.n	8004678 <HAL_RCC_OscConfig+0x7b0>
 8004696:	e036      	b.n	8004706 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	2b0c      	cmp	r3, #12
 800469c:	d031      	beq.n	8004702 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800469e:	4b13      	ldr	r3, [pc, #76]	; (80046ec <HAL_RCC_OscConfig+0x824>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a12      	ldr	r2, [pc, #72]	; (80046ec <HAL_RCC_OscConfig+0x824>)
 80046a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046a8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80046aa:	4b10      	ldr	r3, [pc, #64]	; (80046ec <HAL_RCC_OscConfig+0x824>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d105      	bne.n	80046c2 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80046b6:	4b0d      	ldr	r3, [pc, #52]	; (80046ec <HAL_RCC_OscConfig+0x824>)
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	4a0c      	ldr	r2, [pc, #48]	; (80046ec <HAL_RCC_OscConfig+0x824>)
 80046bc:	f023 0303 	bic.w	r3, r3, #3
 80046c0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80046c2:	4b0a      	ldr	r3, [pc, #40]	; (80046ec <HAL_RCC_OscConfig+0x824>)
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	4a09      	ldr	r2, [pc, #36]	; (80046ec <HAL_RCC_OscConfig+0x824>)
 80046c8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80046cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046d0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d2:	f7fe f9d9 	bl	8002a88 <HAL_GetTick>
 80046d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046d8:	e00c      	b.n	80046f4 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046da:	f7fe f9d5 	bl	8002a88 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d905      	bls.n	80046f4 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e00d      	b.n	8004708 <HAL_RCC_OscConfig+0x840>
 80046ec:	40021000 	.word	0x40021000
 80046f0:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046f4:	4b06      	ldr	r3, [pc, #24]	; (8004710 <HAL_RCC_OscConfig+0x848>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1ec      	bne.n	80046da <HAL_RCC_OscConfig+0x812>
 8004700:	e001      	b.n	8004706 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3720      	adds	r7, #32
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	40021000 	.word	0x40021000

08004714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800471e:	2300      	movs	r3, #0
 8004720:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e10f      	b.n	800494c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800472c:	4b89      	ldr	r3, [pc, #548]	; (8004954 <HAL_RCC_ClockConfig+0x240>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 030f 	and.w	r3, r3, #15
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d910      	bls.n	800475c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473a:	4b86      	ldr	r3, [pc, #536]	; (8004954 <HAL_RCC_ClockConfig+0x240>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f023 020f 	bic.w	r2, r3, #15
 8004742:	4984      	ldr	r1, [pc, #528]	; (8004954 <HAL_RCC_ClockConfig+0x240>)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	4313      	orrs	r3, r2
 8004748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800474a:	4b82      	ldr	r3, [pc, #520]	; (8004954 <HAL_RCC_ClockConfig+0x240>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	429a      	cmp	r2, r3
 8004756:	d001      	beq.n	800475c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e0f7      	b.n	800494c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 8089 	beq.w	800487c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2b03      	cmp	r3, #3
 8004770:	d133      	bne.n	80047da <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004772:	4b79      	ldr	r3, [pc, #484]	; (8004958 <HAL_RCC_ClockConfig+0x244>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e0e4      	b.n	800494c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004782:	f000 fa43 	bl	8004c0c <RCC_GetSysClockFreqFromPLLSource>
 8004786:	4603      	mov	r3, r0
 8004788:	4a74      	ldr	r2, [pc, #464]	; (800495c <HAL_RCC_ClockConfig+0x248>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d955      	bls.n	800483a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800478e:	4b72      	ldr	r3, [pc, #456]	; (8004958 <HAL_RCC_ClockConfig+0x244>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10a      	bne.n	80047b0 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800479a:	4b6f      	ldr	r3, [pc, #444]	; (8004958 <HAL_RCC_ClockConfig+0x244>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047a2:	4a6d      	ldr	r2, [pc, #436]	; (8004958 <HAL_RCC_ClockConfig+0x244>)
 80047a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047a8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80047aa:	2380      	movs	r3, #128	; 0x80
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	e044      	b.n	800483a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d03e      	beq.n	800483a <HAL_RCC_ClockConfig+0x126>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d13a      	bne.n	800483a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047c4:	4b64      	ldr	r3, [pc, #400]	; (8004958 <HAL_RCC_ClockConfig+0x244>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047cc:	4a62      	ldr	r2, [pc, #392]	; (8004958 <HAL_RCC_ClockConfig+0x244>)
 80047ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047d2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80047d4:	2380      	movs	r3, #128	; 0x80
 80047d6:	617b      	str	r3, [r7, #20]
 80047d8:	e02f      	b.n	800483a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d107      	bne.n	80047f2 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047e2:	4b5d      	ldr	r3, [pc, #372]	; (8004958 <HAL_RCC_ClockConfig+0x244>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d115      	bne.n	800481a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e0ac      	b.n	800494c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d107      	bne.n	800480a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047fa:	4b57      	ldr	r3, [pc, #348]	; (8004958 <HAL_RCC_ClockConfig+0x244>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d109      	bne.n	800481a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e0a0      	b.n	800494c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800480a:	4b53      	ldr	r3, [pc, #332]	; (8004958 <HAL_RCC_ClockConfig+0x244>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e098      	b.n	800494c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800481a:	f000 f8a7 	bl	800496c <HAL_RCC_GetSysClockFreq>
 800481e:	4603      	mov	r3, r0
 8004820:	4a4e      	ldr	r2, [pc, #312]	; (800495c <HAL_RCC_ClockConfig+0x248>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d909      	bls.n	800483a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004826:	4b4c      	ldr	r3, [pc, #304]	; (8004958 <HAL_RCC_ClockConfig+0x244>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800482e:	4a4a      	ldr	r2, [pc, #296]	; (8004958 <HAL_RCC_ClockConfig+0x244>)
 8004830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004834:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004836:	2380      	movs	r3, #128	; 0x80
 8004838:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800483a:	4b47      	ldr	r3, [pc, #284]	; (8004958 <HAL_RCC_ClockConfig+0x244>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f023 0203 	bic.w	r2, r3, #3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	4944      	ldr	r1, [pc, #272]	; (8004958 <HAL_RCC_ClockConfig+0x244>)
 8004848:	4313      	orrs	r3, r2
 800484a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800484c:	f7fe f91c 	bl	8002a88 <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004852:	e00a      	b.n	800486a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004854:	f7fe f918 	bl	8002a88 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004862:	4293      	cmp	r3, r2
 8004864:	d901      	bls.n	800486a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e070      	b.n	800494c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800486a:	4b3b      	ldr	r3, [pc, #236]	; (8004958 <HAL_RCC_ClockConfig+0x244>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 020c 	and.w	r2, r3, #12
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	429a      	cmp	r2, r3
 800487a:	d1eb      	bne.n	8004854 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d009      	beq.n	800489c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004888:	4b33      	ldr	r3, [pc, #204]	; (8004958 <HAL_RCC_ClockConfig+0x244>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	4930      	ldr	r1, [pc, #192]	; (8004958 <HAL_RCC_ClockConfig+0x244>)
 8004896:	4313      	orrs	r3, r2
 8004898:	608b      	str	r3, [r1, #8]
 800489a:	e008      	b.n	80048ae <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	2b80      	cmp	r3, #128	; 0x80
 80048a0:	d105      	bne.n	80048ae <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80048a2:	4b2d      	ldr	r3, [pc, #180]	; (8004958 <HAL_RCC_ClockConfig+0x244>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	4a2c      	ldr	r2, [pc, #176]	; (8004958 <HAL_RCC_ClockConfig+0x244>)
 80048a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048ac:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048ae:	4b29      	ldr	r3, [pc, #164]	; (8004954 <HAL_RCC_ClockConfig+0x240>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d210      	bcs.n	80048de <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048bc:	4b25      	ldr	r3, [pc, #148]	; (8004954 <HAL_RCC_ClockConfig+0x240>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f023 020f 	bic.w	r2, r3, #15
 80048c4:	4923      	ldr	r1, [pc, #140]	; (8004954 <HAL_RCC_ClockConfig+0x240>)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048cc:	4b21      	ldr	r3, [pc, #132]	; (8004954 <HAL_RCC_ClockConfig+0x240>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 030f 	and.w	r3, r3, #15
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d001      	beq.n	80048de <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e036      	b.n	800494c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0304 	and.w	r3, r3, #4
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d008      	beq.n	80048fc <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048ea:	4b1b      	ldr	r3, [pc, #108]	; (8004958 <HAL_RCC_ClockConfig+0x244>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	4918      	ldr	r1, [pc, #96]	; (8004958 <HAL_RCC_ClockConfig+0x244>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0308 	and.w	r3, r3, #8
 8004904:	2b00      	cmp	r3, #0
 8004906:	d009      	beq.n	800491c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004908:	4b13      	ldr	r3, [pc, #76]	; (8004958 <HAL_RCC_ClockConfig+0x244>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	00db      	lsls	r3, r3, #3
 8004916:	4910      	ldr	r1, [pc, #64]	; (8004958 <HAL_RCC_ClockConfig+0x244>)
 8004918:	4313      	orrs	r3, r2
 800491a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800491c:	f000 f826 	bl	800496c <HAL_RCC_GetSysClockFreq>
 8004920:	4602      	mov	r2, r0
 8004922:	4b0d      	ldr	r3, [pc, #52]	; (8004958 <HAL_RCC_ClockConfig+0x244>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	091b      	lsrs	r3, r3, #4
 8004928:	f003 030f 	and.w	r3, r3, #15
 800492c:	490c      	ldr	r1, [pc, #48]	; (8004960 <HAL_RCC_ClockConfig+0x24c>)
 800492e:	5ccb      	ldrb	r3, [r1, r3]
 8004930:	f003 031f 	and.w	r3, r3, #31
 8004934:	fa22 f303 	lsr.w	r3, r2, r3
 8004938:	4a0a      	ldr	r2, [pc, #40]	; (8004964 <HAL_RCC_ClockConfig+0x250>)
 800493a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800493c:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <HAL_RCC_ClockConfig+0x254>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4618      	mov	r0, r3
 8004942:	f7fd fedd 	bl	8002700 <HAL_InitTick>
 8004946:	4603      	mov	r3, r0
 8004948:	73fb      	strb	r3, [r7, #15]

  return status;
 800494a:	7bfb      	ldrb	r3, [r7, #15]
}
 800494c:	4618      	mov	r0, r3
 800494e:	3718      	adds	r7, #24
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	40022000 	.word	0x40022000
 8004958:	40021000 	.word	0x40021000
 800495c:	04c4b400 	.word	0x04c4b400
 8004960:	0800ac48 	.word	0x0800ac48
 8004964:	200000c4 	.word	0x200000c4
 8004968:	200000c8 	.word	0x200000c8

0800496c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800496c:	b480      	push	{r7}
 800496e:	b089      	sub	sp, #36	; 0x24
 8004970:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004972:	2300      	movs	r3, #0
 8004974:	61fb      	str	r3, [r7, #28]
 8004976:	2300      	movs	r3, #0
 8004978:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800497a:	4b3e      	ldr	r3, [pc, #248]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x108>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f003 030c 	and.w	r3, r3, #12
 8004982:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004984:	4b3b      	ldr	r3, [pc, #236]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x108>)
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f003 0303 	and.w	r3, r3, #3
 800498c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d005      	beq.n	80049a0 <HAL_RCC_GetSysClockFreq+0x34>
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	2b0c      	cmp	r3, #12
 8004998:	d121      	bne.n	80049de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d11e      	bne.n	80049de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80049a0:	4b34      	ldr	r3, [pc, #208]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x108>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d107      	bne.n	80049bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80049ac:	4b31      	ldr	r3, [pc, #196]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x108>)
 80049ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049b2:	0a1b      	lsrs	r3, r3, #8
 80049b4:	f003 030f 	and.w	r3, r3, #15
 80049b8:	61fb      	str	r3, [r7, #28]
 80049ba:	e005      	b.n	80049c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80049bc:	4b2d      	ldr	r3, [pc, #180]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x108>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	091b      	lsrs	r3, r3, #4
 80049c2:	f003 030f 	and.w	r3, r3, #15
 80049c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80049c8:	4a2b      	ldr	r2, [pc, #172]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x10c>)
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10d      	bne.n	80049f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049dc:	e00a      	b.n	80049f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	2b04      	cmp	r3, #4
 80049e2:	d102      	bne.n	80049ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049e4:	4b25      	ldr	r3, [pc, #148]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x110>)
 80049e6:	61bb      	str	r3, [r7, #24]
 80049e8:	e004      	b.n	80049f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	2b08      	cmp	r3, #8
 80049ee:	d101      	bne.n	80049f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80049f0:	4b23      	ldr	r3, [pc, #140]	; (8004a80 <HAL_RCC_GetSysClockFreq+0x114>)
 80049f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	2b0c      	cmp	r3, #12
 80049f8:	d134      	bne.n	8004a64 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049fa:	4b1e      	ldr	r3, [pc, #120]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x108>)
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	f003 0303 	and.w	r3, r3, #3
 8004a02:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d003      	beq.n	8004a12 <HAL_RCC_GetSysClockFreq+0xa6>
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	2b03      	cmp	r3, #3
 8004a0e:	d003      	beq.n	8004a18 <HAL_RCC_GetSysClockFreq+0xac>
 8004a10:	e005      	b.n	8004a1e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004a12:	4b1a      	ldr	r3, [pc, #104]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x110>)
 8004a14:	617b      	str	r3, [r7, #20]
      break;
 8004a16:	e005      	b.n	8004a24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004a18:	4b19      	ldr	r3, [pc, #100]	; (8004a80 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a1a:	617b      	str	r3, [r7, #20]
      break;
 8004a1c:	e002      	b.n	8004a24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	617b      	str	r3, [r7, #20]
      break;
 8004a22:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a24:	4b13      	ldr	r3, [pc, #76]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	091b      	lsrs	r3, r3, #4
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	3301      	adds	r3, #1
 8004a30:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a32:	4b10      	ldr	r3, [pc, #64]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	0a1b      	lsrs	r3, r3, #8
 8004a38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	fb02 f203 	mul.w	r2, r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a48:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a4a:	4b0a      	ldr	r3, [pc, #40]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	0e5b      	lsrs	r3, r3, #25
 8004a50:	f003 0303 	and.w	r3, r3, #3
 8004a54:	3301      	adds	r3, #1
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a62:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a64:	69bb      	ldr	r3, [r7, #24]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3724      	adds	r7, #36	; 0x24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	40021000 	.word	0x40021000
 8004a78:	0800ac60 	.word	0x0800ac60
 8004a7c:	00f42400 	.word	0x00f42400
 8004a80:	007a1200 	.word	0x007a1200

08004a84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a84:	b480      	push	{r7}
 8004a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a88:	4b03      	ldr	r3, [pc, #12]	; (8004a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	200000c4 	.word	0x200000c4

08004a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004aa0:	f7ff fff0 	bl	8004a84 <HAL_RCC_GetHCLKFreq>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	4b06      	ldr	r3, [pc, #24]	; (8004ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	0a1b      	lsrs	r3, r3, #8
 8004aac:	f003 0307 	and.w	r3, r3, #7
 8004ab0:	4904      	ldr	r1, [pc, #16]	; (8004ac4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ab2:	5ccb      	ldrb	r3, [r1, r3]
 8004ab4:	f003 031f 	and.w	r3, r3, #31
 8004ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	0800ac58 	.word	0x0800ac58

08004ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004acc:	f7ff ffda 	bl	8004a84 <HAL_RCC_GetHCLKFreq>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	4b06      	ldr	r3, [pc, #24]	; (8004aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	0adb      	lsrs	r3, r3, #11
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	4904      	ldr	r1, [pc, #16]	; (8004af0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ade:	5ccb      	ldrb	r3, [r1, r3]
 8004ae0:	f003 031f 	and.w	r3, r3, #31
 8004ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	40021000 	.word	0x40021000
 8004af0:	0800ac58 	.word	0x0800ac58

08004af4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	220f      	movs	r2, #15
 8004b02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004b04:	4b12      	ldr	r3, [pc, #72]	; (8004b50 <HAL_RCC_GetClockConfig+0x5c>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f003 0203 	and.w	r2, r3, #3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004b10:	4b0f      	ldr	r3, [pc, #60]	; (8004b50 <HAL_RCC_GetClockConfig+0x5c>)
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004b1c:	4b0c      	ldr	r3, [pc, #48]	; (8004b50 <HAL_RCC_GetClockConfig+0x5c>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004b28:	4b09      	ldr	r3, [pc, #36]	; (8004b50 <HAL_RCC_GetClockConfig+0x5c>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	08db      	lsrs	r3, r3, #3
 8004b2e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004b36:	4b07      	ldr	r3, [pc, #28]	; (8004b54 <HAL_RCC_GetClockConfig+0x60>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 020f 	and.w	r2, r3, #15
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	601a      	str	r2, [r3, #0]
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	40021000 	.word	0x40021000
 8004b54:	40022000 	.word	0x40022000

08004b58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b60:	2300      	movs	r3, #0
 8004b62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b64:	4b27      	ldr	r3, [pc, #156]	; (8004c04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d003      	beq.n	8004b78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b70:	f7ff f8e6 	bl	8003d40 <HAL_PWREx_GetVoltageRange>
 8004b74:	6178      	str	r0, [r7, #20]
 8004b76:	e014      	b.n	8004ba2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b78:	4b22      	ldr	r3, [pc, #136]	; (8004c04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b7c:	4a21      	ldr	r2, [pc, #132]	; (8004c04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b82:	6593      	str	r3, [r2, #88]	; 0x58
 8004b84:	4b1f      	ldr	r3, [pc, #124]	; (8004c04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b8c:	60fb      	str	r3, [r7, #12]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b90:	f7ff f8d6 	bl	8003d40 <HAL_PWREx_GetVoltageRange>
 8004b94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b96:	4b1b      	ldr	r3, [pc, #108]	; (8004c04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b9a:	4a1a      	ldr	r2, [pc, #104]	; (8004c04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ba0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ba8:	d10b      	bne.n	8004bc2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b80      	cmp	r3, #128	; 0x80
 8004bae:	d913      	bls.n	8004bd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2ba0      	cmp	r3, #160	; 0xa0
 8004bb4:	d902      	bls.n	8004bbc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	613b      	str	r3, [r7, #16]
 8004bba:	e00d      	b.n	8004bd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	613b      	str	r3, [r7, #16]
 8004bc0:	e00a      	b.n	8004bd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2b7f      	cmp	r3, #127	; 0x7f
 8004bc6:	d902      	bls.n	8004bce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004bc8:	2302      	movs	r3, #2
 8004bca:	613b      	str	r3, [r7, #16]
 8004bcc:	e004      	b.n	8004bd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b70      	cmp	r3, #112	; 0x70
 8004bd2:	d101      	bne.n	8004bd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004bd8:	4b0b      	ldr	r3, [pc, #44]	; (8004c08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f023 020f 	bic.w	r2, r3, #15
 8004be0:	4909      	ldr	r1, [pc, #36]	; (8004c08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004be8:	4b07      	ldr	r3, [pc, #28]	; (8004c08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 030f 	and.w	r3, r3, #15
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d001      	beq.n	8004bfa <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e000      	b.n	8004bfc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3718      	adds	r7, #24
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	40021000 	.word	0x40021000
 8004c08:	40022000 	.word	0x40022000

08004c0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8004c16:	4b2d      	ldr	r3, [pc, #180]	; (8004ccc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	f003 0303 	and.w	r3, r3, #3
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d118      	bne.n	8004c54 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c22:	4b2a      	ldr	r3, [pc, #168]	; (8004ccc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0308 	and.w	r3, r3, #8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d107      	bne.n	8004c3e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c2e:	4b27      	ldr	r3, [pc, #156]	; (8004ccc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c34:	0a1b      	lsrs	r3, r3, #8
 8004c36:	f003 030f 	and.w	r3, r3, #15
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	e005      	b.n	8004c4a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c3e:	4b23      	ldr	r3, [pc, #140]	; (8004ccc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	091b      	lsrs	r3, r3, #4
 8004c44:	f003 030f 	and.w	r3, r3, #15
 8004c48:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c4a:	4a21      	ldr	r2, [pc, #132]	; (8004cd0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c52:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c54:	4b1d      	ldr	r3, [pc, #116]	; (8004ccc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f003 0303 	and.w	r3, r3, #3
 8004c5c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d003      	beq.n	8004c6c <RCC_GetSysClockFreqFromPLLSource+0x60>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2b03      	cmp	r3, #3
 8004c68:	d003      	beq.n	8004c72 <RCC_GetSysClockFreqFromPLLSource+0x66>
 8004c6a:	e005      	b.n	8004c78 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004c6c:	4b19      	ldr	r3, [pc, #100]	; (8004cd4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004c6e:	613b      	str	r3, [r7, #16]
    break;
 8004c70:	e005      	b.n	8004c7e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004c72:	4b19      	ldr	r3, [pc, #100]	; (8004cd8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004c74:	613b      	str	r3, [r7, #16]
    break;
 8004c76:	e002      	b.n	8004c7e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	613b      	str	r3, [r7, #16]
    break;
 8004c7c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c7e:	4b13      	ldr	r3, [pc, #76]	; (8004ccc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	091b      	lsrs	r3, r3, #4
 8004c84:	f003 030f 	and.w	r3, r3, #15
 8004c88:	3301      	adds	r3, #1
 8004c8a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c8c:	4b0f      	ldr	r3, [pc, #60]	; (8004ccc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	0a1b      	lsrs	r3, r3, #8
 8004c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	fb02 f203 	mul.w	r2, r2, r3
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ca4:	4b09      	ldr	r3, [pc, #36]	; (8004ccc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	0e5b      	lsrs	r3, r3, #25
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	3301      	adds	r3, #1
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cbc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004cbe:	683b      	ldr	r3, [r7, #0]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	371c      	adds	r7, #28
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	0800ac60 	.word	0x0800ac60
 8004cd4:	00f42400 	.word	0x00f42400
 8004cd8:	007a1200 	.word	0x007a1200

08004cdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ce8:	2300      	movs	r3, #0
 8004cea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d040      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cfc:	2b80      	cmp	r3, #128	; 0x80
 8004cfe:	d02a      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004d00:	2b80      	cmp	r3, #128	; 0x80
 8004d02:	d825      	bhi.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004d04:	2b60      	cmp	r3, #96	; 0x60
 8004d06:	d026      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004d08:	2b60      	cmp	r3, #96	; 0x60
 8004d0a:	d821      	bhi.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004d0c:	2b40      	cmp	r3, #64	; 0x40
 8004d0e:	d006      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004d10:	2b40      	cmp	r3, #64	; 0x40
 8004d12:	d81d      	bhi.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d009      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004d18:	2b20      	cmp	r3, #32
 8004d1a:	d010      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004d1c:	e018      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d1e:	4b89      	ldr	r3, [pc, #548]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	4a88      	ldr	r2, [pc, #544]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d28:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d2a:	e015      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3304      	adds	r3, #4
 8004d30:	2100      	movs	r1, #0
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 fb02 	bl	800533c <RCCEx_PLLSAI1_Config>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d3c:	e00c      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	3320      	adds	r3, #32
 8004d42:	2100      	movs	r1, #0
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 fbed 	bl	8005524 <RCCEx_PLLSAI2_Config>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d4e:	e003      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	74fb      	strb	r3, [r7, #19]
      break;
 8004d54:	e000      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004d56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d58:	7cfb      	ldrb	r3, [r7, #19]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10b      	bne.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d5e:	4b79      	ldr	r3, [pc, #484]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d64:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d6c:	4975      	ldr	r1, [pc, #468]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004d74:	e001      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d76:	7cfb      	ldrb	r3, [r7, #19]
 8004d78:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d047      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d8e:	d030      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d94:	d82a      	bhi.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004d96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d9a:	d02a      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004d9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004da0:	d824      	bhi.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004da2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004da6:	d008      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dac:	d81e      	bhi.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004db6:	d010      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004db8:	e018      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004dba:	4b62      	ldr	r3, [pc, #392]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	4a61      	ldr	r2, [pc, #388]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dc4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004dc6:	e015      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	2100      	movs	r1, #0
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 fab4 	bl	800533c <RCCEx_PLLSAI1_Config>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004dd8:	e00c      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	3320      	adds	r3, #32
 8004dde:	2100      	movs	r1, #0
 8004de0:	4618      	mov	r0, r3
 8004de2:	f000 fb9f 	bl	8005524 <RCCEx_PLLSAI2_Config>
 8004de6:	4603      	mov	r3, r0
 8004de8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004dea:	e003      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	74fb      	strb	r3, [r7, #19]
      break;
 8004df0:	e000      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004df2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004df4:	7cfb      	ldrb	r3, [r7, #19]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10b      	bne.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004dfa:	4b52      	ldr	r3, [pc, #328]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e08:	494e      	ldr	r1, [pc, #312]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004e10:	e001      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e12:	7cfb      	ldrb	r3, [r7, #19]
 8004e14:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f000 809f 	beq.w	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e24:	2300      	movs	r3, #0
 8004e26:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e28:	4b46      	ldr	r3, [pc, #280]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004e34:	2301      	movs	r3, #1
 8004e36:	e000      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004e38:	2300      	movs	r3, #0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00d      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e3e:	4b41      	ldr	r3, [pc, #260]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e42:	4a40      	ldr	r2, [pc, #256]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e48:	6593      	str	r3, [r2, #88]	; 0x58
 8004e4a:	4b3e      	ldr	r3, [pc, #248]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e52:	60bb      	str	r3, [r7, #8]
 8004e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e56:	2301      	movs	r3, #1
 8004e58:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e5a:	4b3b      	ldr	r3, [pc, #236]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a3a      	ldr	r2, [pc, #232]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e66:	f7fd fe0f 	bl	8002a88 <HAL_GetTick>
 8004e6a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e6c:	e009      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e6e:	f7fd fe0b 	bl	8002a88 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d902      	bls.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	74fb      	strb	r3, [r7, #19]
        break;
 8004e80:	e005      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e82:	4b31      	ldr	r3, [pc, #196]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0ef      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004e8e:	7cfb      	ldrb	r3, [r7, #19]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d15b      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e94:	4b2b      	ldr	r3, [pc, #172]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e9e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d01f      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d019      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004eb2:	4b24      	ldr	r3, [pc, #144]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ebc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ebe:	4b21      	ldr	r3, [pc, #132]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec4:	4a1f      	ldr	r2, [pc, #124]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ece:	4b1d      	ldr	r3, [pc, #116]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed4:	4a1b      	ldr	r2, [pc, #108]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ede:	4a19      	ldr	r2, [pc, #100]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d016      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef0:	f7fd fdca 	bl	8002a88 <HAL_GetTick>
 8004ef4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ef6:	e00b      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ef8:	f7fd fdc6 	bl	8002a88 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d902      	bls.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	74fb      	strb	r3, [r7, #19]
            break;
 8004f0e:	e006      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f10:	4b0c      	ldr	r3, [pc, #48]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0ec      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004f1e:	7cfb      	ldrb	r3, [r7, #19]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10c      	bne.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f24:	4b07      	ldr	r3, [pc, #28]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f34:	4903      	ldr	r1, [pc, #12]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f3c:	e008      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f3e:	7cfb      	ldrb	r3, [r7, #19]
 8004f40:	74bb      	strb	r3, [r7, #18]
 8004f42:	e005      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004f44:	40021000 	.word	0x40021000
 8004f48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f4c:	7cfb      	ldrb	r3, [r7, #19]
 8004f4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f50:	7c7b      	ldrb	r3, [r7, #17]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d105      	bne.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f56:	4ba0      	ldr	r3, [pc, #640]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f5a:	4a9f      	ldr	r2, [pc, #636]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f60:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00a      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f6e:	4b9a      	ldr	r3, [pc, #616]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f74:	f023 0203 	bic.w	r2, r3, #3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7c:	4996      	ldr	r1, [pc, #600]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00a      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f90:	4b91      	ldr	r3, [pc, #580]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f96:	f023 020c 	bic.w	r2, r3, #12
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	498e      	ldr	r1, [pc, #568]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0304 	and.w	r3, r3, #4
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004fb2:	4b89      	ldr	r3, [pc, #548]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc0:	4985      	ldr	r1, [pc, #532]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0308 	and.w	r3, r3, #8
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00a      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fd4:	4b80      	ldr	r3, [pc, #512]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fda:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe2:	497d      	ldr	r1, [pc, #500]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0310 	and.w	r3, r3, #16
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ff6:	4b78      	ldr	r3, [pc, #480]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005004:	4974      	ldr	r1, [pc, #464]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005006:	4313      	orrs	r3, r2
 8005008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0320 	and.w	r3, r3, #32
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00a      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005018:	4b6f      	ldr	r3, [pc, #444]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800501a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005026:	496c      	ldr	r1, [pc, #432]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005028:	4313      	orrs	r3, r2
 800502a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800503a:	4b67      	ldr	r3, [pc, #412]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800503c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005040:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005048:	4963      	ldr	r1, [pc, #396]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800504a:	4313      	orrs	r3, r2
 800504c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00a      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800505c:	4b5e      	ldr	r3, [pc, #376]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800505e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005062:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800506a:	495b      	ldr	r1, [pc, #364]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800506c:	4313      	orrs	r3, r2
 800506e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800507e:	4b56      	ldr	r3, [pc, #344]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005084:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508c:	4952      	ldr	r1, [pc, #328]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800508e:	4313      	orrs	r3, r2
 8005090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00a      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050a0:	4b4d      	ldr	r3, [pc, #308]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ae:	494a      	ldr	r1, [pc, #296]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00a      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050c2:	4b45      	ldr	r3, [pc, #276]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d0:	4941      	ldr	r1, [pc, #260]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00a      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80050e4:	4b3c      	ldr	r3, [pc, #240]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050ea:	f023 0203 	bic.w	r2, r3, #3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050f2:	4939      	ldr	r1, [pc, #228]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d028      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005106:	4b34      	ldr	r3, [pc, #208]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005114:	4930      	ldr	r1, [pc, #192]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005116:	4313      	orrs	r3, r2
 8005118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005120:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005124:	d106      	bne.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005126:	4b2c      	ldr	r3, [pc, #176]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	4a2b      	ldr	r2, [pc, #172]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800512c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005130:	60d3      	str	r3, [r2, #12]
 8005132:	e011      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005138:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800513c:	d10c      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	3304      	adds	r3, #4
 8005142:	2101      	movs	r1, #1
 8005144:	4618      	mov	r0, r3
 8005146:	f000 f8f9 	bl	800533c <RCCEx_PLLSAI1_Config>
 800514a:	4603      	mov	r3, r0
 800514c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800514e:	7cfb      	ldrb	r3, [r7, #19]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005154:	7cfb      	ldrb	r3, [r7, #19]
 8005156:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d04d      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005168:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800516c:	d108      	bne.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800516e:	4b1a      	ldr	r3, [pc, #104]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005170:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005174:	4a18      	ldr	r2, [pc, #96]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005176:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800517a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800517e:	e012      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005180:	4b15      	ldr	r3, [pc, #84]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005182:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005186:	4a14      	ldr	r2, [pc, #80]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005188:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800518c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005190:	4b11      	ldr	r3, [pc, #68]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005196:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800519e:	490e      	ldr	r1, [pc, #56]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051ae:	d106      	bne.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051b0:	4b09      	ldr	r3, [pc, #36]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	4a08      	ldr	r2, [pc, #32]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051ba:	60d3      	str	r3, [r2, #12]
 80051bc:	e020      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051c6:	d109      	bne.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051c8:	4b03      	ldr	r3, [pc, #12]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	4a02      	ldr	r2, [pc, #8]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051d2:	60d3      	str	r3, [r2, #12]
 80051d4:	e014      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80051d6:	bf00      	nop
 80051d8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051e4:	d10c      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	3304      	adds	r3, #4
 80051ea:	2101      	movs	r1, #1
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 f8a5 	bl	800533c <RCCEx_PLLSAI1_Config>
 80051f2:	4603      	mov	r3, r0
 80051f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051f6:	7cfb      	ldrb	r3, [r7, #19]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d001      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80051fc:	7cfb      	ldrb	r3, [r7, #19]
 80051fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d028      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800520c:	4b4a      	ldr	r3, [pc, #296]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800520e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005212:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800521a:	4947      	ldr	r1, [pc, #284]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800521c:	4313      	orrs	r3, r2
 800521e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005226:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800522a:	d106      	bne.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800522c:	4b42      	ldr	r3, [pc, #264]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	4a41      	ldr	r2, [pc, #260]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005232:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005236:	60d3      	str	r3, [r2, #12]
 8005238:	e011      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800523e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005242:	d10c      	bne.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3304      	adds	r3, #4
 8005248:	2101      	movs	r1, #1
 800524a:	4618      	mov	r0, r3
 800524c:	f000 f876 	bl	800533c <RCCEx_PLLSAI1_Config>
 8005250:	4603      	mov	r3, r0
 8005252:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005254:	7cfb      	ldrb	r3, [r7, #19]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800525a:	7cfb      	ldrb	r3, [r7, #19]
 800525c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d01e      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800526a:	4b33      	ldr	r3, [pc, #204]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800526c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005270:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800527a:	492f      	ldr	r1, [pc, #188]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800527c:	4313      	orrs	r3, r2
 800527e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005288:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800528c:	d10c      	bne.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	3304      	adds	r3, #4
 8005292:	2102      	movs	r1, #2
 8005294:	4618      	mov	r0, r3
 8005296:	f000 f851 	bl	800533c <RCCEx_PLLSAI1_Config>
 800529a:	4603      	mov	r3, r0
 800529c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800529e:	7cfb      	ldrb	r3, [r7, #19]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d001      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80052a4:	7cfb      	ldrb	r3, [r7, #19]
 80052a6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00b      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80052b4:	4b20      	ldr	r3, [pc, #128]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052ba:	f023 0204 	bic.w	r2, r3, #4
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052c4:	491c      	ldr	r1, [pc, #112]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00b      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80052d8:	4b17      	ldr	r3, [pc, #92]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052de:	f023 0218 	bic.w	r2, r3, #24
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e8:	4913      	ldr	r1, [pc, #76]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d017      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80052fc:	4b0e      	ldr	r3, [pc, #56]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005302:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800530c:	490a      	ldr	r1, [pc, #40]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800530e:	4313      	orrs	r3, r2
 8005310:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800531a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800531e:	d105      	bne.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005320:	4b05      	ldr	r3, [pc, #20]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	4a04      	ldr	r2, [pc, #16]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005326:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800532a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800532c:	7cbb      	ldrb	r3, [r7, #18]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3718      	adds	r7, #24
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	40021000 	.word	0x40021000

0800533c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005346:	2300      	movs	r3, #0
 8005348:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800534a:	4b72      	ldr	r3, [pc, #456]	; (8005514 <RCCEx_PLLSAI1_Config+0x1d8>)
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f003 0303 	and.w	r3, r3, #3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00e      	beq.n	8005374 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005356:	4b6f      	ldr	r3, [pc, #444]	; (8005514 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	f003 0203 	and.w	r2, r3, #3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	429a      	cmp	r2, r3
 8005364:	d103      	bne.n	800536e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
       ||
 800536a:	2b00      	cmp	r3, #0
 800536c:	d142      	bne.n	80053f4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	73fb      	strb	r3, [r7, #15]
 8005372:	e03f      	b.n	80053f4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2b03      	cmp	r3, #3
 800537a:	d018      	beq.n	80053ae <RCCEx_PLLSAI1_Config+0x72>
 800537c:	2b03      	cmp	r3, #3
 800537e:	d825      	bhi.n	80053cc <RCCEx_PLLSAI1_Config+0x90>
 8005380:	2b01      	cmp	r3, #1
 8005382:	d002      	beq.n	800538a <RCCEx_PLLSAI1_Config+0x4e>
 8005384:	2b02      	cmp	r3, #2
 8005386:	d009      	beq.n	800539c <RCCEx_PLLSAI1_Config+0x60>
 8005388:	e020      	b.n	80053cc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800538a:	4b62      	ldr	r3, [pc, #392]	; (8005514 <RCCEx_PLLSAI1_Config+0x1d8>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d11d      	bne.n	80053d2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800539a:	e01a      	b.n	80053d2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800539c:	4b5d      	ldr	r3, [pc, #372]	; (8005514 <RCCEx_PLLSAI1_Config+0x1d8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d116      	bne.n	80053d6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053ac:	e013      	b.n	80053d6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80053ae:	4b59      	ldr	r3, [pc, #356]	; (8005514 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10f      	bne.n	80053da <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80053ba:	4b56      	ldr	r3, [pc, #344]	; (8005514 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d109      	bne.n	80053da <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80053ca:	e006      	b.n	80053da <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	73fb      	strb	r3, [r7, #15]
      break;
 80053d0:	e004      	b.n	80053dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80053d2:	bf00      	nop
 80053d4:	e002      	b.n	80053dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80053d6:	bf00      	nop
 80053d8:	e000      	b.n	80053dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80053da:	bf00      	nop
    }

    if(status == HAL_OK)
 80053dc:	7bfb      	ldrb	r3, [r7, #15]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d108      	bne.n	80053f4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80053e2:	4b4c      	ldr	r3, [pc, #304]	; (8005514 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	f023 0203 	bic.w	r2, r3, #3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4949      	ldr	r1, [pc, #292]	; (8005514 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80053f4:	7bfb      	ldrb	r3, [r7, #15]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f040 8086 	bne.w	8005508 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80053fc:	4b45      	ldr	r3, [pc, #276]	; (8005514 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a44      	ldr	r2, [pc, #272]	; (8005514 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005402:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005406:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005408:	f7fd fb3e 	bl	8002a88 <HAL_GetTick>
 800540c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800540e:	e009      	b.n	8005424 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005410:	f7fd fb3a 	bl	8002a88 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b02      	cmp	r3, #2
 800541c:	d902      	bls.n	8005424 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	73fb      	strb	r3, [r7, #15]
        break;
 8005422:	e005      	b.n	8005430 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005424:	4b3b      	ldr	r3, [pc, #236]	; (8005514 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1ef      	bne.n	8005410 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005430:	7bfb      	ldrb	r3, [r7, #15]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d168      	bne.n	8005508 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d113      	bne.n	8005464 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800543c:	4b35      	ldr	r3, [pc, #212]	; (8005514 <RCCEx_PLLSAI1_Config+0x1d8>)
 800543e:	691a      	ldr	r2, [r3, #16]
 8005440:	4b35      	ldr	r3, [pc, #212]	; (8005518 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005442:	4013      	ands	r3, r2
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	6892      	ldr	r2, [r2, #8]
 8005448:	0211      	lsls	r1, r2, #8
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	68d2      	ldr	r2, [r2, #12]
 800544e:	06d2      	lsls	r2, r2, #27
 8005450:	4311      	orrs	r1, r2
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	6852      	ldr	r2, [r2, #4]
 8005456:	3a01      	subs	r2, #1
 8005458:	0112      	lsls	r2, r2, #4
 800545a:	430a      	orrs	r2, r1
 800545c:	492d      	ldr	r1, [pc, #180]	; (8005514 <RCCEx_PLLSAI1_Config+0x1d8>)
 800545e:	4313      	orrs	r3, r2
 8005460:	610b      	str	r3, [r1, #16]
 8005462:	e02d      	b.n	80054c0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d115      	bne.n	8005496 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800546a:	4b2a      	ldr	r3, [pc, #168]	; (8005514 <RCCEx_PLLSAI1_Config+0x1d8>)
 800546c:	691a      	ldr	r2, [r3, #16]
 800546e:	4b2b      	ldr	r3, [pc, #172]	; (800551c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005470:	4013      	ands	r3, r2
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	6892      	ldr	r2, [r2, #8]
 8005476:	0211      	lsls	r1, r2, #8
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	6912      	ldr	r2, [r2, #16]
 800547c:	0852      	lsrs	r2, r2, #1
 800547e:	3a01      	subs	r2, #1
 8005480:	0552      	lsls	r2, r2, #21
 8005482:	4311      	orrs	r1, r2
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	6852      	ldr	r2, [r2, #4]
 8005488:	3a01      	subs	r2, #1
 800548a:	0112      	lsls	r2, r2, #4
 800548c:	430a      	orrs	r2, r1
 800548e:	4921      	ldr	r1, [pc, #132]	; (8005514 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005490:	4313      	orrs	r3, r2
 8005492:	610b      	str	r3, [r1, #16]
 8005494:	e014      	b.n	80054c0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005496:	4b1f      	ldr	r3, [pc, #124]	; (8005514 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005498:	691a      	ldr	r2, [r3, #16]
 800549a:	4b21      	ldr	r3, [pc, #132]	; (8005520 <RCCEx_PLLSAI1_Config+0x1e4>)
 800549c:	4013      	ands	r3, r2
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	6892      	ldr	r2, [r2, #8]
 80054a2:	0211      	lsls	r1, r2, #8
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	6952      	ldr	r2, [r2, #20]
 80054a8:	0852      	lsrs	r2, r2, #1
 80054aa:	3a01      	subs	r2, #1
 80054ac:	0652      	lsls	r2, r2, #25
 80054ae:	4311      	orrs	r1, r2
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	6852      	ldr	r2, [r2, #4]
 80054b4:	3a01      	subs	r2, #1
 80054b6:	0112      	lsls	r2, r2, #4
 80054b8:	430a      	orrs	r2, r1
 80054ba:	4916      	ldr	r1, [pc, #88]	; (8005514 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80054c0:	4b14      	ldr	r3, [pc, #80]	; (8005514 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a13      	ldr	r2, [pc, #76]	; (8005514 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054cc:	f7fd fadc 	bl	8002a88 <HAL_GetTick>
 80054d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054d2:	e009      	b.n	80054e8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054d4:	f7fd fad8 	bl	8002a88 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d902      	bls.n	80054e8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	73fb      	strb	r3, [r7, #15]
          break;
 80054e6:	e005      	b.n	80054f4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054e8:	4b0a      	ldr	r3, [pc, #40]	; (8005514 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d0ef      	beq.n	80054d4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d106      	bne.n	8005508 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80054fa:	4b06      	ldr	r3, [pc, #24]	; (8005514 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054fc:	691a      	ldr	r2, [r3, #16]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	4904      	ldr	r1, [pc, #16]	; (8005514 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005504:	4313      	orrs	r3, r2
 8005506:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005508:	7bfb      	ldrb	r3, [r7, #15]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	40021000 	.word	0x40021000
 8005518:	07ff800f 	.word	0x07ff800f
 800551c:	ff9f800f 	.word	0xff9f800f
 8005520:	f9ff800f 	.word	0xf9ff800f

08005524 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800552e:	2300      	movs	r3, #0
 8005530:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005532:	4b72      	ldr	r3, [pc, #456]	; (80056fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f003 0303 	and.w	r3, r3, #3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00e      	beq.n	800555c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800553e:	4b6f      	ldr	r3, [pc, #444]	; (80056fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	f003 0203 	and.w	r2, r3, #3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	429a      	cmp	r2, r3
 800554c:	d103      	bne.n	8005556 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
       ||
 8005552:	2b00      	cmp	r3, #0
 8005554:	d142      	bne.n	80055dc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	73fb      	strb	r3, [r7, #15]
 800555a:	e03f      	b.n	80055dc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b03      	cmp	r3, #3
 8005562:	d018      	beq.n	8005596 <RCCEx_PLLSAI2_Config+0x72>
 8005564:	2b03      	cmp	r3, #3
 8005566:	d825      	bhi.n	80055b4 <RCCEx_PLLSAI2_Config+0x90>
 8005568:	2b01      	cmp	r3, #1
 800556a:	d002      	beq.n	8005572 <RCCEx_PLLSAI2_Config+0x4e>
 800556c:	2b02      	cmp	r3, #2
 800556e:	d009      	beq.n	8005584 <RCCEx_PLLSAI2_Config+0x60>
 8005570:	e020      	b.n	80055b4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005572:	4b62      	ldr	r3, [pc, #392]	; (80056fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d11d      	bne.n	80055ba <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005582:	e01a      	b.n	80055ba <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005584:	4b5d      	ldr	r3, [pc, #372]	; (80056fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800558c:	2b00      	cmp	r3, #0
 800558e:	d116      	bne.n	80055be <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005594:	e013      	b.n	80055be <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005596:	4b59      	ldr	r3, [pc, #356]	; (80056fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10f      	bne.n	80055c2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80055a2:	4b56      	ldr	r3, [pc, #344]	; (80056fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d109      	bne.n	80055c2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80055b2:	e006      	b.n	80055c2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	73fb      	strb	r3, [r7, #15]
      break;
 80055b8:	e004      	b.n	80055c4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80055ba:	bf00      	nop
 80055bc:	e002      	b.n	80055c4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80055be:	bf00      	nop
 80055c0:	e000      	b.n	80055c4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80055c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80055c4:	7bfb      	ldrb	r3, [r7, #15]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d108      	bne.n	80055dc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80055ca:	4b4c      	ldr	r3, [pc, #304]	; (80056fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f023 0203 	bic.w	r2, r3, #3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4949      	ldr	r1, [pc, #292]	; (80056fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80055dc:	7bfb      	ldrb	r3, [r7, #15]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f040 8086 	bne.w	80056f0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80055e4:	4b45      	ldr	r3, [pc, #276]	; (80056fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a44      	ldr	r2, [pc, #272]	; (80056fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80055ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055f0:	f7fd fa4a 	bl	8002a88 <HAL_GetTick>
 80055f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055f6:	e009      	b.n	800560c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055f8:	f7fd fa46 	bl	8002a88 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d902      	bls.n	800560c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	73fb      	strb	r3, [r7, #15]
        break;
 800560a:	e005      	b.n	8005618 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800560c:	4b3b      	ldr	r3, [pc, #236]	; (80056fc <RCCEx_PLLSAI2_Config+0x1d8>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1ef      	bne.n	80055f8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005618:	7bfb      	ldrb	r3, [r7, #15]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d168      	bne.n	80056f0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d113      	bne.n	800564c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005624:	4b35      	ldr	r3, [pc, #212]	; (80056fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005626:	695a      	ldr	r2, [r3, #20]
 8005628:	4b35      	ldr	r3, [pc, #212]	; (8005700 <RCCEx_PLLSAI2_Config+0x1dc>)
 800562a:	4013      	ands	r3, r2
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	6892      	ldr	r2, [r2, #8]
 8005630:	0211      	lsls	r1, r2, #8
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	68d2      	ldr	r2, [r2, #12]
 8005636:	06d2      	lsls	r2, r2, #27
 8005638:	4311      	orrs	r1, r2
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	6852      	ldr	r2, [r2, #4]
 800563e:	3a01      	subs	r2, #1
 8005640:	0112      	lsls	r2, r2, #4
 8005642:	430a      	orrs	r2, r1
 8005644:	492d      	ldr	r1, [pc, #180]	; (80056fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005646:	4313      	orrs	r3, r2
 8005648:	614b      	str	r3, [r1, #20]
 800564a:	e02d      	b.n	80056a8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d115      	bne.n	800567e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005652:	4b2a      	ldr	r3, [pc, #168]	; (80056fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005654:	695a      	ldr	r2, [r3, #20]
 8005656:	4b2b      	ldr	r3, [pc, #172]	; (8005704 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005658:	4013      	ands	r3, r2
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	6892      	ldr	r2, [r2, #8]
 800565e:	0211      	lsls	r1, r2, #8
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	6912      	ldr	r2, [r2, #16]
 8005664:	0852      	lsrs	r2, r2, #1
 8005666:	3a01      	subs	r2, #1
 8005668:	0552      	lsls	r2, r2, #21
 800566a:	4311      	orrs	r1, r2
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	6852      	ldr	r2, [r2, #4]
 8005670:	3a01      	subs	r2, #1
 8005672:	0112      	lsls	r2, r2, #4
 8005674:	430a      	orrs	r2, r1
 8005676:	4921      	ldr	r1, [pc, #132]	; (80056fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005678:	4313      	orrs	r3, r2
 800567a:	614b      	str	r3, [r1, #20]
 800567c:	e014      	b.n	80056a8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800567e:	4b1f      	ldr	r3, [pc, #124]	; (80056fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005680:	695a      	ldr	r2, [r3, #20]
 8005682:	4b21      	ldr	r3, [pc, #132]	; (8005708 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005684:	4013      	ands	r3, r2
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	6892      	ldr	r2, [r2, #8]
 800568a:	0211      	lsls	r1, r2, #8
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	6952      	ldr	r2, [r2, #20]
 8005690:	0852      	lsrs	r2, r2, #1
 8005692:	3a01      	subs	r2, #1
 8005694:	0652      	lsls	r2, r2, #25
 8005696:	4311      	orrs	r1, r2
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	6852      	ldr	r2, [r2, #4]
 800569c:	3a01      	subs	r2, #1
 800569e:	0112      	lsls	r2, r2, #4
 80056a0:	430a      	orrs	r2, r1
 80056a2:	4916      	ldr	r1, [pc, #88]	; (80056fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80056a8:	4b14      	ldr	r3, [pc, #80]	; (80056fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a13      	ldr	r2, [pc, #76]	; (80056fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80056ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b4:	f7fd f9e8 	bl	8002a88 <HAL_GetTick>
 80056b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80056ba:	e009      	b.n	80056d0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80056bc:	f7fd f9e4 	bl	8002a88 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d902      	bls.n	80056d0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	73fb      	strb	r3, [r7, #15]
          break;
 80056ce:	e005      	b.n	80056dc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80056d0:	4b0a      	ldr	r3, [pc, #40]	; (80056fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d0ef      	beq.n	80056bc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80056dc:	7bfb      	ldrb	r3, [r7, #15]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d106      	bne.n	80056f0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80056e2:	4b06      	ldr	r3, [pc, #24]	; (80056fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80056e4:	695a      	ldr	r2, [r3, #20]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	4904      	ldr	r1, [pc, #16]	; (80056fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	40021000 	.word	0x40021000
 8005700:	07ff800f 	.word	0x07ff800f
 8005704:	ff9f800f 	.word	0xff9f800f
 8005708:	f9ff800f 	.word	0xf9ff800f

0800570c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e049      	b.n	80057b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d106      	bne.n	8005738 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f841 	bl	80057ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2202      	movs	r2, #2
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	3304      	adds	r3, #4
 8005748:	4619      	mov	r1, r3
 800574a:	4610      	mov	r0, r2
 800574c:	f000 f9f8 	bl	8005b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b083      	sub	sp, #12
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80057c2:	bf00      	nop
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
	...

080057d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d001      	beq.n	80057e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e04f      	b.n	8005888 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2202      	movs	r2, #2
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68da      	ldr	r2, [r3, #12]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f042 0201 	orr.w	r2, r2, #1
 80057fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a23      	ldr	r2, [pc, #140]	; (8005894 <HAL_TIM_Base_Start_IT+0xc4>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d01d      	beq.n	8005846 <HAL_TIM_Base_Start_IT+0x76>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005812:	d018      	beq.n	8005846 <HAL_TIM_Base_Start_IT+0x76>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a1f      	ldr	r2, [pc, #124]	; (8005898 <HAL_TIM_Base_Start_IT+0xc8>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d013      	beq.n	8005846 <HAL_TIM_Base_Start_IT+0x76>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a1e      	ldr	r2, [pc, #120]	; (800589c <HAL_TIM_Base_Start_IT+0xcc>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d00e      	beq.n	8005846 <HAL_TIM_Base_Start_IT+0x76>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a1c      	ldr	r2, [pc, #112]	; (80058a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d009      	beq.n	8005846 <HAL_TIM_Base_Start_IT+0x76>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a1b      	ldr	r2, [pc, #108]	; (80058a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d004      	beq.n	8005846 <HAL_TIM_Base_Start_IT+0x76>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a19      	ldr	r2, [pc, #100]	; (80058a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d115      	bne.n	8005872 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	689a      	ldr	r2, [r3, #8]
 800584c:	4b17      	ldr	r3, [pc, #92]	; (80058ac <HAL_TIM_Base_Start_IT+0xdc>)
 800584e:	4013      	ands	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2b06      	cmp	r3, #6
 8005856:	d015      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0xb4>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800585e:	d011      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f042 0201 	orr.w	r2, r2, #1
 800586e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005870:	e008      	b.n	8005884 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f042 0201 	orr.w	r2, r2, #1
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	e000      	b.n	8005886 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005884:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr
 8005894:	40012c00 	.word	0x40012c00
 8005898:	40000400 	.word	0x40000400
 800589c:	40000800 	.word	0x40000800
 80058a0:	40000c00 	.word	0x40000c00
 80058a4:	40013400 	.word	0x40013400
 80058a8:	40014000 	.word	0x40014000
 80058ac:	00010007 	.word	0x00010007

080058b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d122      	bne.n	800590c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	f003 0302 	and.w	r3, r3, #2
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d11b      	bne.n	800590c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f06f 0202 	mvn.w	r2, #2
 80058dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2201      	movs	r2, #1
 80058e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	f003 0303 	and.w	r3, r3, #3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f905 	bl	8005b02 <HAL_TIM_IC_CaptureCallback>
 80058f8:	e005      	b.n	8005906 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f8f7 	bl	8005aee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f908 	bl	8005b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	f003 0304 	and.w	r3, r3, #4
 8005916:	2b04      	cmp	r3, #4
 8005918:	d122      	bne.n	8005960 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f003 0304 	and.w	r3, r3, #4
 8005924:	2b04      	cmp	r3, #4
 8005926:	d11b      	bne.n	8005960 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f06f 0204 	mvn.w	r2, #4
 8005930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2202      	movs	r2, #2
 8005936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005942:	2b00      	cmp	r3, #0
 8005944:	d003      	beq.n	800594e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f8db 	bl	8005b02 <HAL_TIM_IC_CaptureCallback>
 800594c:	e005      	b.n	800595a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f8cd 	bl	8005aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f8de 	bl	8005b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	f003 0308 	and.w	r3, r3, #8
 800596a:	2b08      	cmp	r3, #8
 800596c:	d122      	bne.n	80059b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	f003 0308 	and.w	r3, r3, #8
 8005978:	2b08      	cmp	r3, #8
 800597a:	d11b      	bne.n	80059b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f06f 0208 	mvn.w	r2, #8
 8005984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2204      	movs	r2, #4
 800598a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	f003 0303 	and.w	r3, r3, #3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f8b1 	bl	8005b02 <HAL_TIM_IC_CaptureCallback>
 80059a0:	e005      	b.n	80059ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 f8a3 	bl	8005aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f8b4 	bl	8005b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	f003 0310 	and.w	r3, r3, #16
 80059be:	2b10      	cmp	r3, #16
 80059c0:	d122      	bne.n	8005a08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f003 0310 	and.w	r3, r3, #16
 80059cc:	2b10      	cmp	r3, #16
 80059ce:	d11b      	bne.n	8005a08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f06f 0210 	mvn.w	r2, #16
 80059d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2208      	movs	r2, #8
 80059de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	69db      	ldr	r3, [r3, #28]
 80059e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d003      	beq.n	80059f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f887 	bl	8005b02 <HAL_TIM_IC_CaptureCallback>
 80059f4:	e005      	b.n	8005a02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f879 	bl	8005aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f88a 	bl	8005b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d10e      	bne.n	8005a34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d107      	bne.n	8005a34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f06f 0201 	mvn.w	r2, #1
 8005a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f7fc fab0 	bl	8001f94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a3e:	2b80      	cmp	r3, #128	; 0x80
 8005a40:	d10e      	bne.n	8005a60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a4c:	2b80      	cmp	r3, #128	; 0x80
 8005a4e:	d107      	bne.n	8005a60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f914 	bl	8005c88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a6e:	d10e      	bne.n	8005a8e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a7a:	2b80      	cmp	r3, #128	; 0x80
 8005a7c:	d107      	bne.n	8005a8e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 f907 	bl	8005c9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a98:	2b40      	cmp	r3, #64	; 0x40
 8005a9a:	d10e      	bne.n	8005aba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa6:	2b40      	cmp	r3, #64	; 0x40
 8005aa8:	d107      	bne.n	8005aba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 f838 	bl	8005b2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	f003 0320 	and.w	r3, r3, #32
 8005ac4:	2b20      	cmp	r3, #32
 8005ac6:	d10e      	bne.n	8005ae6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	f003 0320 	and.w	r3, r3, #32
 8005ad2:	2b20      	cmp	r3, #32
 8005ad4:	d107      	bne.n	8005ae6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f06f 0220 	mvn.w	r2, #32
 8005ade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 f8c7 	bl	8005c74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ae6:	bf00      	nop
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b083      	sub	sp, #12
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005af6:	bf00      	nop
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b083      	sub	sp, #12
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b0a:	bf00      	nop
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b083      	sub	sp, #12
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b1e:	bf00      	nop
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b083      	sub	sp, #12
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b32:	bf00      	nop
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
	...

08005b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a40      	ldr	r2, [pc, #256]	; (8005c54 <TIM_Base_SetConfig+0x114>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d013      	beq.n	8005b80 <TIM_Base_SetConfig+0x40>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b5e:	d00f      	beq.n	8005b80 <TIM_Base_SetConfig+0x40>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a3d      	ldr	r2, [pc, #244]	; (8005c58 <TIM_Base_SetConfig+0x118>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d00b      	beq.n	8005b80 <TIM_Base_SetConfig+0x40>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a3c      	ldr	r2, [pc, #240]	; (8005c5c <TIM_Base_SetConfig+0x11c>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d007      	beq.n	8005b80 <TIM_Base_SetConfig+0x40>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a3b      	ldr	r2, [pc, #236]	; (8005c60 <TIM_Base_SetConfig+0x120>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d003      	beq.n	8005b80 <TIM_Base_SetConfig+0x40>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a3a      	ldr	r2, [pc, #232]	; (8005c64 <TIM_Base_SetConfig+0x124>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d108      	bne.n	8005b92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a2f      	ldr	r2, [pc, #188]	; (8005c54 <TIM_Base_SetConfig+0x114>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d01f      	beq.n	8005bda <TIM_Base_SetConfig+0x9a>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba0:	d01b      	beq.n	8005bda <TIM_Base_SetConfig+0x9a>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a2c      	ldr	r2, [pc, #176]	; (8005c58 <TIM_Base_SetConfig+0x118>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d017      	beq.n	8005bda <TIM_Base_SetConfig+0x9a>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a2b      	ldr	r2, [pc, #172]	; (8005c5c <TIM_Base_SetConfig+0x11c>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d013      	beq.n	8005bda <TIM_Base_SetConfig+0x9a>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a2a      	ldr	r2, [pc, #168]	; (8005c60 <TIM_Base_SetConfig+0x120>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d00f      	beq.n	8005bda <TIM_Base_SetConfig+0x9a>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a29      	ldr	r2, [pc, #164]	; (8005c64 <TIM_Base_SetConfig+0x124>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d00b      	beq.n	8005bda <TIM_Base_SetConfig+0x9a>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a28      	ldr	r2, [pc, #160]	; (8005c68 <TIM_Base_SetConfig+0x128>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d007      	beq.n	8005bda <TIM_Base_SetConfig+0x9a>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a27      	ldr	r2, [pc, #156]	; (8005c6c <TIM_Base_SetConfig+0x12c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d003      	beq.n	8005bda <TIM_Base_SetConfig+0x9a>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a26      	ldr	r2, [pc, #152]	; (8005c70 <TIM_Base_SetConfig+0x130>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d108      	bne.n	8005bec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	689a      	ldr	r2, [r3, #8]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a10      	ldr	r2, [pc, #64]	; (8005c54 <TIM_Base_SetConfig+0x114>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d00f      	beq.n	8005c38 <TIM_Base_SetConfig+0xf8>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a12      	ldr	r2, [pc, #72]	; (8005c64 <TIM_Base_SetConfig+0x124>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d00b      	beq.n	8005c38 <TIM_Base_SetConfig+0xf8>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a11      	ldr	r2, [pc, #68]	; (8005c68 <TIM_Base_SetConfig+0x128>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d007      	beq.n	8005c38 <TIM_Base_SetConfig+0xf8>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a10      	ldr	r2, [pc, #64]	; (8005c6c <TIM_Base_SetConfig+0x12c>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d003      	beq.n	8005c38 <TIM_Base_SetConfig+0xf8>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a0f      	ldr	r2, [pc, #60]	; (8005c70 <TIM_Base_SetConfig+0x130>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d103      	bne.n	8005c40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	691a      	ldr	r2, [r3, #16]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	615a      	str	r2, [r3, #20]
}
 8005c46:	bf00      	nop
 8005c48:	3714      	adds	r7, #20
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	40012c00 	.word	0x40012c00
 8005c58:	40000400 	.word	0x40000400
 8005c5c:	40000800 	.word	0x40000800
 8005c60:	40000c00 	.word	0x40000c00
 8005c64:	40013400 	.word	0x40013400
 8005c68:	40014000 	.word	0x40014000
 8005c6c:	40014400 	.word	0x40014400
 8005c70:	40014800 	.word	0x40014800

08005c74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e042      	b.n	8005d48 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d106      	bne.n	8005cda <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f7fc fccf 	bl	8002678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2224      	movs	r2, #36	; 0x24
 8005cde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f022 0201 	bic.w	r2, r2, #1
 8005cf0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f8c4 	bl	8005e80 <UART_SetConfig>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d101      	bne.n	8005d02 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e022      	b.n	8005d48 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d002      	beq.n	8005d10 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 fb82 	bl	8006414 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	689a      	ldr	r2, [r3, #8]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f042 0201 	orr.w	r2, r2, #1
 8005d3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 fc09 	bl	8006558 <UART_CheckIdleState>
 8005d46:	4603      	mov	r3, r0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3708      	adds	r7, #8
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b08a      	sub	sp, #40	; 0x28
 8005d54:	af02      	add	r7, sp, #8
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	603b      	str	r3, [r7, #0]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d66:	2b20      	cmp	r3, #32
 8005d68:	f040 8084 	bne.w	8005e74 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d002      	beq.n	8005d78 <HAL_UART_Transmit+0x28>
 8005d72:	88fb      	ldrh	r3, [r7, #6]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d101      	bne.n	8005d7c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e07c      	b.n	8005e76 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d101      	bne.n	8005d8a <HAL_UART_Transmit+0x3a>
 8005d86:	2302      	movs	r3, #2
 8005d88:	e075      	b.n	8005e76 <HAL_UART_Transmit+0x126>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2221      	movs	r2, #33	; 0x21
 8005d9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005da2:	f7fc fe71 	bl	8002a88 <HAL_GetTick>
 8005da6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	88fa      	ldrh	r2, [r7, #6]
 8005dac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	88fa      	ldrh	r2, [r7, #6]
 8005db4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dc0:	d108      	bne.n	8005dd4 <HAL_UART_Transmit+0x84>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d104      	bne.n	8005dd4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	61bb      	str	r3, [r7, #24]
 8005dd2:	e003      	b.n	8005ddc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005de4:	e02d      	b.n	8005e42 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	2200      	movs	r2, #0
 8005dee:	2180      	movs	r1, #128	; 0x80
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 fbfc 	bl	80065ee <UART_WaitOnFlagUntilTimeout>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e03a      	b.n	8005e76 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10b      	bne.n	8005e1e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	881a      	ldrh	r2, [r3, #0]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e12:	b292      	uxth	r2, r2
 8005e14:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	3302      	adds	r3, #2
 8005e1a:	61bb      	str	r3, [r7, #24]
 8005e1c:	e008      	b.n	8005e30 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	781a      	ldrb	r2, [r3, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	b292      	uxth	r2, r2
 8005e28:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1cb      	bne.n	8005de6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2200      	movs	r2, #0
 8005e56:	2140      	movs	r1, #64	; 0x40
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 fbc8 	bl	80065ee <UART_WaitOnFlagUntilTimeout>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e006      	b.n	8005e76 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005e70:	2300      	movs	r3, #0
 8005e72:	e000      	b.n	8005e76 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005e74:	2302      	movs	r3, #2
  }
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3720      	adds	r7, #32
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
	...

08005e80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e80:	b5b0      	push	{r4, r5, r7, lr}
 8005e82:	b088      	sub	sp, #32
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689a      	ldr	r2, [r3, #8]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	431a      	orrs	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	4bb1      	ldr	r3, [pc, #708]	; (8006170 <UART_SetConfig+0x2f0>)
 8005eac:	4013      	ands	r3, r2
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	6812      	ldr	r2, [r2, #0]
 8005eb2:	69f9      	ldr	r1, [r7, #28]
 8005eb4:	430b      	orrs	r3, r1
 8005eb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68da      	ldr	r2, [r3, #12]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4aa6      	ldr	r2, [pc, #664]	; (8006174 <UART_SetConfig+0x2f4>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d004      	beq.n	8005ee8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	69fa      	ldr	r2, [r7, #28]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005ef2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	6812      	ldr	r2, [r2, #0]
 8005efa:	69f9      	ldr	r1, [r7, #28]
 8005efc:	430b      	orrs	r3, r1
 8005efe:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f06:	f023 010f 	bic.w	r1, r3, #15
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a97      	ldr	r2, [pc, #604]	; (8006178 <UART_SetConfig+0x2f8>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d120      	bne.n	8005f62 <UART_SetConfig+0xe2>
 8005f20:	4b96      	ldr	r3, [pc, #600]	; (800617c <UART_SetConfig+0x2fc>)
 8005f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f26:	f003 0303 	and.w	r3, r3, #3
 8005f2a:	2b03      	cmp	r3, #3
 8005f2c:	d816      	bhi.n	8005f5c <UART_SetConfig+0xdc>
 8005f2e:	a201      	add	r2, pc, #4	; (adr r2, 8005f34 <UART_SetConfig+0xb4>)
 8005f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f34:	08005f45 	.word	0x08005f45
 8005f38:	08005f51 	.word	0x08005f51
 8005f3c:	08005f4b 	.word	0x08005f4b
 8005f40:	08005f57 	.word	0x08005f57
 8005f44:	2301      	movs	r3, #1
 8005f46:	76fb      	strb	r3, [r7, #27]
 8005f48:	e0e7      	b.n	800611a <UART_SetConfig+0x29a>
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	76fb      	strb	r3, [r7, #27]
 8005f4e:	e0e4      	b.n	800611a <UART_SetConfig+0x29a>
 8005f50:	2304      	movs	r3, #4
 8005f52:	76fb      	strb	r3, [r7, #27]
 8005f54:	e0e1      	b.n	800611a <UART_SetConfig+0x29a>
 8005f56:	2308      	movs	r3, #8
 8005f58:	76fb      	strb	r3, [r7, #27]
 8005f5a:	e0de      	b.n	800611a <UART_SetConfig+0x29a>
 8005f5c:	2310      	movs	r3, #16
 8005f5e:	76fb      	strb	r3, [r7, #27]
 8005f60:	e0db      	b.n	800611a <UART_SetConfig+0x29a>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a86      	ldr	r2, [pc, #536]	; (8006180 <UART_SetConfig+0x300>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d132      	bne.n	8005fd2 <UART_SetConfig+0x152>
 8005f6c:	4b83      	ldr	r3, [pc, #524]	; (800617c <UART_SetConfig+0x2fc>)
 8005f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f72:	f003 030c 	and.w	r3, r3, #12
 8005f76:	2b0c      	cmp	r3, #12
 8005f78:	d828      	bhi.n	8005fcc <UART_SetConfig+0x14c>
 8005f7a:	a201      	add	r2, pc, #4	; (adr r2, 8005f80 <UART_SetConfig+0x100>)
 8005f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f80:	08005fb5 	.word	0x08005fb5
 8005f84:	08005fcd 	.word	0x08005fcd
 8005f88:	08005fcd 	.word	0x08005fcd
 8005f8c:	08005fcd 	.word	0x08005fcd
 8005f90:	08005fc1 	.word	0x08005fc1
 8005f94:	08005fcd 	.word	0x08005fcd
 8005f98:	08005fcd 	.word	0x08005fcd
 8005f9c:	08005fcd 	.word	0x08005fcd
 8005fa0:	08005fbb 	.word	0x08005fbb
 8005fa4:	08005fcd 	.word	0x08005fcd
 8005fa8:	08005fcd 	.word	0x08005fcd
 8005fac:	08005fcd 	.word	0x08005fcd
 8005fb0:	08005fc7 	.word	0x08005fc7
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	76fb      	strb	r3, [r7, #27]
 8005fb8:	e0af      	b.n	800611a <UART_SetConfig+0x29a>
 8005fba:	2302      	movs	r3, #2
 8005fbc:	76fb      	strb	r3, [r7, #27]
 8005fbe:	e0ac      	b.n	800611a <UART_SetConfig+0x29a>
 8005fc0:	2304      	movs	r3, #4
 8005fc2:	76fb      	strb	r3, [r7, #27]
 8005fc4:	e0a9      	b.n	800611a <UART_SetConfig+0x29a>
 8005fc6:	2308      	movs	r3, #8
 8005fc8:	76fb      	strb	r3, [r7, #27]
 8005fca:	e0a6      	b.n	800611a <UART_SetConfig+0x29a>
 8005fcc:	2310      	movs	r3, #16
 8005fce:	76fb      	strb	r3, [r7, #27]
 8005fd0:	e0a3      	b.n	800611a <UART_SetConfig+0x29a>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a6b      	ldr	r2, [pc, #428]	; (8006184 <UART_SetConfig+0x304>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d120      	bne.n	800601e <UART_SetConfig+0x19e>
 8005fdc:	4b67      	ldr	r3, [pc, #412]	; (800617c <UART_SetConfig+0x2fc>)
 8005fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fe2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005fe6:	2b30      	cmp	r3, #48	; 0x30
 8005fe8:	d013      	beq.n	8006012 <UART_SetConfig+0x192>
 8005fea:	2b30      	cmp	r3, #48	; 0x30
 8005fec:	d814      	bhi.n	8006018 <UART_SetConfig+0x198>
 8005fee:	2b20      	cmp	r3, #32
 8005ff0:	d009      	beq.n	8006006 <UART_SetConfig+0x186>
 8005ff2:	2b20      	cmp	r3, #32
 8005ff4:	d810      	bhi.n	8006018 <UART_SetConfig+0x198>
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d002      	beq.n	8006000 <UART_SetConfig+0x180>
 8005ffa:	2b10      	cmp	r3, #16
 8005ffc:	d006      	beq.n	800600c <UART_SetConfig+0x18c>
 8005ffe:	e00b      	b.n	8006018 <UART_SetConfig+0x198>
 8006000:	2300      	movs	r3, #0
 8006002:	76fb      	strb	r3, [r7, #27]
 8006004:	e089      	b.n	800611a <UART_SetConfig+0x29a>
 8006006:	2302      	movs	r3, #2
 8006008:	76fb      	strb	r3, [r7, #27]
 800600a:	e086      	b.n	800611a <UART_SetConfig+0x29a>
 800600c:	2304      	movs	r3, #4
 800600e:	76fb      	strb	r3, [r7, #27]
 8006010:	e083      	b.n	800611a <UART_SetConfig+0x29a>
 8006012:	2308      	movs	r3, #8
 8006014:	76fb      	strb	r3, [r7, #27]
 8006016:	e080      	b.n	800611a <UART_SetConfig+0x29a>
 8006018:	2310      	movs	r3, #16
 800601a:	76fb      	strb	r3, [r7, #27]
 800601c:	e07d      	b.n	800611a <UART_SetConfig+0x29a>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a59      	ldr	r2, [pc, #356]	; (8006188 <UART_SetConfig+0x308>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d120      	bne.n	800606a <UART_SetConfig+0x1ea>
 8006028:	4b54      	ldr	r3, [pc, #336]	; (800617c <UART_SetConfig+0x2fc>)
 800602a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800602e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006032:	2bc0      	cmp	r3, #192	; 0xc0
 8006034:	d013      	beq.n	800605e <UART_SetConfig+0x1de>
 8006036:	2bc0      	cmp	r3, #192	; 0xc0
 8006038:	d814      	bhi.n	8006064 <UART_SetConfig+0x1e4>
 800603a:	2b80      	cmp	r3, #128	; 0x80
 800603c:	d009      	beq.n	8006052 <UART_SetConfig+0x1d2>
 800603e:	2b80      	cmp	r3, #128	; 0x80
 8006040:	d810      	bhi.n	8006064 <UART_SetConfig+0x1e4>
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <UART_SetConfig+0x1cc>
 8006046:	2b40      	cmp	r3, #64	; 0x40
 8006048:	d006      	beq.n	8006058 <UART_SetConfig+0x1d8>
 800604a:	e00b      	b.n	8006064 <UART_SetConfig+0x1e4>
 800604c:	2300      	movs	r3, #0
 800604e:	76fb      	strb	r3, [r7, #27]
 8006050:	e063      	b.n	800611a <UART_SetConfig+0x29a>
 8006052:	2302      	movs	r3, #2
 8006054:	76fb      	strb	r3, [r7, #27]
 8006056:	e060      	b.n	800611a <UART_SetConfig+0x29a>
 8006058:	2304      	movs	r3, #4
 800605a:	76fb      	strb	r3, [r7, #27]
 800605c:	e05d      	b.n	800611a <UART_SetConfig+0x29a>
 800605e:	2308      	movs	r3, #8
 8006060:	76fb      	strb	r3, [r7, #27]
 8006062:	e05a      	b.n	800611a <UART_SetConfig+0x29a>
 8006064:	2310      	movs	r3, #16
 8006066:	76fb      	strb	r3, [r7, #27]
 8006068:	e057      	b.n	800611a <UART_SetConfig+0x29a>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a47      	ldr	r2, [pc, #284]	; (800618c <UART_SetConfig+0x30c>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d125      	bne.n	80060c0 <UART_SetConfig+0x240>
 8006074:	4b41      	ldr	r3, [pc, #260]	; (800617c <UART_SetConfig+0x2fc>)
 8006076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800607a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800607e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006082:	d017      	beq.n	80060b4 <UART_SetConfig+0x234>
 8006084:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006088:	d817      	bhi.n	80060ba <UART_SetConfig+0x23a>
 800608a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800608e:	d00b      	beq.n	80060a8 <UART_SetConfig+0x228>
 8006090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006094:	d811      	bhi.n	80060ba <UART_SetConfig+0x23a>
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <UART_SetConfig+0x222>
 800609a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800609e:	d006      	beq.n	80060ae <UART_SetConfig+0x22e>
 80060a0:	e00b      	b.n	80060ba <UART_SetConfig+0x23a>
 80060a2:	2300      	movs	r3, #0
 80060a4:	76fb      	strb	r3, [r7, #27]
 80060a6:	e038      	b.n	800611a <UART_SetConfig+0x29a>
 80060a8:	2302      	movs	r3, #2
 80060aa:	76fb      	strb	r3, [r7, #27]
 80060ac:	e035      	b.n	800611a <UART_SetConfig+0x29a>
 80060ae:	2304      	movs	r3, #4
 80060b0:	76fb      	strb	r3, [r7, #27]
 80060b2:	e032      	b.n	800611a <UART_SetConfig+0x29a>
 80060b4:	2308      	movs	r3, #8
 80060b6:	76fb      	strb	r3, [r7, #27]
 80060b8:	e02f      	b.n	800611a <UART_SetConfig+0x29a>
 80060ba:	2310      	movs	r3, #16
 80060bc:	76fb      	strb	r3, [r7, #27]
 80060be:	e02c      	b.n	800611a <UART_SetConfig+0x29a>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a2b      	ldr	r2, [pc, #172]	; (8006174 <UART_SetConfig+0x2f4>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d125      	bne.n	8006116 <UART_SetConfig+0x296>
 80060ca:	4b2c      	ldr	r3, [pc, #176]	; (800617c <UART_SetConfig+0x2fc>)
 80060cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80060d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060d8:	d017      	beq.n	800610a <UART_SetConfig+0x28a>
 80060da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060de:	d817      	bhi.n	8006110 <UART_SetConfig+0x290>
 80060e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060e4:	d00b      	beq.n	80060fe <UART_SetConfig+0x27e>
 80060e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ea:	d811      	bhi.n	8006110 <UART_SetConfig+0x290>
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d003      	beq.n	80060f8 <UART_SetConfig+0x278>
 80060f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060f4:	d006      	beq.n	8006104 <UART_SetConfig+0x284>
 80060f6:	e00b      	b.n	8006110 <UART_SetConfig+0x290>
 80060f8:	2300      	movs	r3, #0
 80060fa:	76fb      	strb	r3, [r7, #27]
 80060fc:	e00d      	b.n	800611a <UART_SetConfig+0x29a>
 80060fe:	2302      	movs	r3, #2
 8006100:	76fb      	strb	r3, [r7, #27]
 8006102:	e00a      	b.n	800611a <UART_SetConfig+0x29a>
 8006104:	2304      	movs	r3, #4
 8006106:	76fb      	strb	r3, [r7, #27]
 8006108:	e007      	b.n	800611a <UART_SetConfig+0x29a>
 800610a:	2308      	movs	r3, #8
 800610c:	76fb      	strb	r3, [r7, #27]
 800610e:	e004      	b.n	800611a <UART_SetConfig+0x29a>
 8006110:	2310      	movs	r3, #16
 8006112:	76fb      	strb	r3, [r7, #27]
 8006114:	e001      	b.n	800611a <UART_SetConfig+0x29a>
 8006116:	2310      	movs	r3, #16
 8006118:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a15      	ldr	r2, [pc, #84]	; (8006174 <UART_SetConfig+0x2f4>)
 8006120:	4293      	cmp	r3, r2
 8006122:	f040 809f 	bne.w	8006264 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006126:	7efb      	ldrb	r3, [r7, #27]
 8006128:	2b08      	cmp	r3, #8
 800612a:	d837      	bhi.n	800619c <UART_SetConfig+0x31c>
 800612c:	a201      	add	r2, pc, #4	; (adr r2, 8006134 <UART_SetConfig+0x2b4>)
 800612e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006132:	bf00      	nop
 8006134:	08006159 	.word	0x08006159
 8006138:	0800619d 	.word	0x0800619d
 800613c:	08006161 	.word	0x08006161
 8006140:	0800619d 	.word	0x0800619d
 8006144:	08006167 	.word	0x08006167
 8006148:	0800619d 	.word	0x0800619d
 800614c:	0800619d 	.word	0x0800619d
 8006150:	0800619d 	.word	0x0800619d
 8006154:	08006195 	.word	0x08006195
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006158:	f7fe fca0 	bl	8004a9c <HAL_RCC_GetPCLK1Freq>
 800615c:	6178      	str	r0, [r7, #20]
        break;
 800615e:	e022      	b.n	80061a6 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006160:	4b0b      	ldr	r3, [pc, #44]	; (8006190 <UART_SetConfig+0x310>)
 8006162:	617b      	str	r3, [r7, #20]
        break;
 8006164:	e01f      	b.n	80061a6 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006166:	f7fe fc01 	bl	800496c <HAL_RCC_GetSysClockFreq>
 800616a:	6178      	str	r0, [r7, #20]
        break;
 800616c:	e01b      	b.n	80061a6 <UART_SetConfig+0x326>
 800616e:	bf00      	nop
 8006170:	cfff69f3 	.word	0xcfff69f3
 8006174:	40008000 	.word	0x40008000
 8006178:	40013800 	.word	0x40013800
 800617c:	40021000 	.word	0x40021000
 8006180:	40004400 	.word	0x40004400
 8006184:	40004800 	.word	0x40004800
 8006188:	40004c00 	.word	0x40004c00
 800618c:	40005000 	.word	0x40005000
 8006190:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006194:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006198:	617b      	str	r3, [r7, #20]
        break;
 800619a:	e004      	b.n	80061a6 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 800619c:	2300      	movs	r3, #0
 800619e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	76bb      	strb	r3, [r7, #26]
        break;
 80061a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f000 811b 	beq.w	80063e4 <UART_SetConfig+0x564>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	4a96      	ldr	r2, [pc, #600]	; (800640c <UART_SetConfig+0x58c>)
 80061b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061b8:	461a      	mov	r2, r3
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80061c0:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	4613      	mov	r3, r2
 80061c8:	005b      	lsls	r3, r3, #1
 80061ca:	4413      	add	r3, r2
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d305      	bcc.n	80061de <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d902      	bls.n	80061e4 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	76bb      	strb	r3, [r7, #26]
 80061e2:	e0ff      	b.n	80063e4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f04f 0100 	mov.w	r1, #0
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	4a86      	ldr	r2, [pc, #536]	; (800640c <UART_SetConfig+0x58c>)
 80061f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	f04f 0300 	mov.w	r3, #0
 80061fc:	f7fa fcec 	bl	8000bd8 <__aeabi_uldivmod>
 8006200:	4602      	mov	r2, r0
 8006202:	460b      	mov	r3, r1
 8006204:	4610      	mov	r0, r2
 8006206:	4619      	mov	r1, r3
 8006208:	f04f 0200 	mov.w	r2, #0
 800620c:	f04f 0300 	mov.w	r3, #0
 8006210:	020b      	lsls	r3, r1, #8
 8006212:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006216:	0202      	lsls	r2, r0, #8
 8006218:	6879      	ldr	r1, [r7, #4]
 800621a:	6849      	ldr	r1, [r1, #4]
 800621c:	0849      	lsrs	r1, r1, #1
 800621e:	4608      	mov	r0, r1
 8006220:	f04f 0100 	mov.w	r1, #0
 8006224:	1814      	adds	r4, r2, r0
 8006226:	eb43 0501 	adc.w	r5, r3, r1
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	461a      	mov	r2, r3
 8006230:	f04f 0300 	mov.w	r3, #0
 8006234:	4620      	mov	r0, r4
 8006236:	4629      	mov	r1, r5
 8006238:	f7fa fcce 	bl	8000bd8 <__aeabi_uldivmod>
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	4613      	mov	r3, r2
 8006242:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800624a:	d308      	bcc.n	800625e <UART_SetConfig+0x3de>
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006252:	d204      	bcs.n	800625e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	60da      	str	r2, [r3, #12]
 800625c:	e0c2      	b.n	80063e4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	76bb      	strb	r3, [r7, #26]
 8006262:	e0bf      	b.n	80063e4 <UART_SetConfig+0x564>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	69db      	ldr	r3, [r3, #28]
 8006268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800626c:	d165      	bne.n	800633a <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 800626e:	7efb      	ldrb	r3, [r7, #27]
 8006270:	2b08      	cmp	r3, #8
 8006272:	d828      	bhi.n	80062c6 <UART_SetConfig+0x446>
 8006274:	a201      	add	r2, pc, #4	; (adr r2, 800627c <UART_SetConfig+0x3fc>)
 8006276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627a:	bf00      	nop
 800627c:	080062a1 	.word	0x080062a1
 8006280:	080062a9 	.word	0x080062a9
 8006284:	080062b1 	.word	0x080062b1
 8006288:	080062c7 	.word	0x080062c7
 800628c:	080062b7 	.word	0x080062b7
 8006290:	080062c7 	.word	0x080062c7
 8006294:	080062c7 	.word	0x080062c7
 8006298:	080062c7 	.word	0x080062c7
 800629c:	080062bf 	.word	0x080062bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062a0:	f7fe fbfc 	bl	8004a9c <HAL_RCC_GetPCLK1Freq>
 80062a4:	6178      	str	r0, [r7, #20]
        break;
 80062a6:	e013      	b.n	80062d0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062a8:	f7fe fc0e 	bl	8004ac8 <HAL_RCC_GetPCLK2Freq>
 80062ac:	6178      	str	r0, [r7, #20]
        break;
 80062ae:	e00f      	b.n	80062d0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062b0:	4b57      	ldr	r3, [pc, #348]	; (8006410 <UART_SetConfig+0x590>)
 80062b2:	617b      	str	r3, [r7, #20]
        break;
 80062b4:	e00c      	b.n	80062d0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062b6:	f7fe fb59 	bl	800496c <HAL_RCC_GetSysClockFreq>
 80062ba:	6178      	str	r0, [r7, #20]
        break;
 80062bc:	e008      	b.n	80062d0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062c2:	617b      	str	r3, [r7, #20]
        break;
 80062c4:	e004      	b.n	80062d0 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	76bb      	strb	r3, [r7, #26]
        break;
 80062ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f000 8086 	beq.w	80063e4 <UART_SetConfig+0x564>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062dc:	4a4b      	ldr	r2, [pc, #300]	; (800640c <UART_SetConfig+0x58c>)
 80062de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062e2:	461a      	mov	r2, r3
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80062ea:	005a      	lsls	r2, r3, #1
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	085b      	lsrs	r3, r3, #1
 80062f2:	441a      	add	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	2b0f      	cmp	r3, #15
 8006304:	d916      	bls.n	8006334 <UART_SetConfig+0x4b4>
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800630c:	d212      	bcs.n	8006334 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	b29b      	uxth	r3, r3
 8006312:	f023 030f 	bic.w	r3, r3, #15
 8006316:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	085b      	lsrs	r3, r3, #1
 800631c:	b29b      	uxth	r3, r3
 800631e:	f003 0307 	and.w	r3, r3, #7
 8006322:	b29a      	uxth	r2, r3
 8006324:	89fb      	ldrh	r3, [r7, #14]
 8006326:	4313      	orrs	r3, r2
 8006328:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	89fa      	ldrh	r2, [r7, #14]
 8006330:	60da      	str	r2, [r3, #12]
 8006332:	e057      	b.n	80063e4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	76bb      	strb	r3, [r7, #26]
 8006338:	e054      	b.n	80063e4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800633a:	7efb      	ldrb	r3, [r7, #27]
 800633c:	2b08      	cmp	r3, #8
 800633e:	d828      	bhi.n	8006392 <UART_SetConfig+0x512>
 8006340:	a201      	add	r2, pc, #4	; (adr r2, 8006348 <UART_SetConfig+0x4c8>)
 8006342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006346:	bf00      	nop
 8006348:	0800636d 	.word	0x0800636d
 800634c:	08006375 	.word	0x08006375
 8006350:	0800637d 	.word	0x0800637d
 8006354:	08006393 	.word	0x08006393
 8006358:	08006383 	.word	0x08006383
 800635c:	08006393 	.word	0x08006393
 8006360:	08006393 	.word	0x08006393
 8006364:	08006393 	.word	0x08006393
 8006368:	0800638b 	.word	0x0800638b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800636c:	f7fe fb96 	bl	8004a9c <HAL_RCC_GetPCLK1Freq>
 8006370:	6178      	str	r0, [r7, #20]
        break;
 8006372:	e013      	b.n	800639c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006374:	f7fe fba8 	bl	8004ac8 <HAL_RCC_GetPCLK2Freq>
 8006378:	6178      	str	r0, [r7, #20]
        break;
 800637a:	e00f      	b.n	800639c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800637c:	4b24      	ldr	r3, [pc, #144]	; (8006410 <UART_SetConfig+0x590>)
 800637e:	617b      	str	r3, [r7, #20]
        break;
 8006380:	e00c      	b.n	800639c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006382:	f7fe faf3 	bl	800496c <HAL_RCC_GetSysClockFreq>
 8006386:	6178      	str	r0, [r7, #20]
        break;
 8006388:	e008      	b.n	800639c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800638a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800638e:	617b      	str	r3, [r7, #20]
        break;
 8006390:	e004      	b.n	800639c <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8006392:	2300      	movs	r3, #0
 8006394:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	76bb      	strb	r3, [r7, #26]
        break;
 800639a:	bf00      	nop
    }

    if (pclk != 0U)
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d020      	beq.n	80063e4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a6:	4a19      	ldr	r2, [pc, #100]	; (800640c <UART_SetConfig+0x58c>)
 80063a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063ac:	461a      	mov	r2, r3
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	fbb3 f2f2 	udiv	r2, r3, r2
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	085b      	lsrs	r3, r3, #1
 80063ba:	441a      	add	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	2b0f      	cmp	r3, #15
 80063cc:	d908      	bls.n	80063e0 <UART_SetConfig+0x560>
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063d4:	d204      	bcs.n	80063e0 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	60da      	str	r2, [r3, #12]
 80063de:	e001      	b.n	80063e4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006400:	7ebb      	ldrb	r3, [r7, #26]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3720      	adds	r7, #32
 8006406:	46bd      	mov	sp, r7
 8006408:	bdb0      	pop	{r4, r5, r7, pc}
 800640a:	bf00      	nop
 800640c:	0800ac90 	.word	0x0800ac90
 8006410:	00f42400 	.word	0x00f42400

08006414 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006420:	f003 0301 	and.w	r3, r3, #1
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00a      	beq.n	800643e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	430a      	orrs	r2, r1
 800643c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00a      	beq.n	8006460 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	430a      	orrs	r2, r1
 800645e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006464:	f003 0304 	and.w	r3, r3, #4
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00a      	beq.n	8006482 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	430a      	orrs	r2, r1
 8006480:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006486:	f003 0308 	and.w	r3, r3, #8
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00a      	beq.n	80064a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	430a      	orrs	r2, r1
 80064a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a8:	f003 0310 	and.w	r3, r3, #16
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00a      	beq.n	80064c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	430a      	orrs	r2, r1
 80064c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ca:	f003 0320 	and.w	r3, r3, #32
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00a      	beq.n	80064e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	430a      	orrs	r2, r1
 80064e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d01a      	beq.n	800652a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	430a      	orrs	r2, r1
 8006508:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800650e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006512:	d10a      	bne.n	800652a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	430a      	orrs	r2, r1
 8006528:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00a      	beq.n	800654c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	430a      	orrs	r2, r1
 800654a:	605a      	str	r2, [r3, #4]
  }
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af02      	add	r7, sp, #8
 800655e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006568:	f7fc fa8e 	bl	8002a88 <HAL_GetTick>
 800656c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0308 	and.w	r3, r3, #8
 8006578:	2b08      	cmp	r3, #8
 800657a:	d10e      	bne.n	800659a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800657c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006580:	9300      	str	r3, [sp, #0]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 f82f 	bl	80065ee <UART_WaitOnFlagUntilTimeout>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e025      	b.n	80065e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0304 	and.w	r3, r3, #4
 80065a4:	2b04      	cmp	r3, #4
 80065a6:	d10e      	bne.n	80065c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f819 	bl	80065ee <UART_WaitOnFlagUntilTimeout>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d001      	beq.n	80065c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e00f      	b.n	80065e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2220      	movs	r2, #32
 80065ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2220      	movs	r2, #32
 80065d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b084      	sub	sp, #16
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	60f8      	str	r0, [r7, #12]
 80065f6:	60b9      	str	r1, [r7, #8]
 80065f8:	603b      	str	r3, [r7, #0]
 80065fa:	4613      	mov	r3, r2
 80065fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065fe:	e062      	b.n	80066c6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006606:	d05e      	beq.n	80066c6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006608:	f7fc fa3e 	bl	8002a88 <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	69ba      	ldr	r2, [r7, #24]
 8006614:	429a      	cmp	r2, r3
 8006616:	d302      	bcc.n	800661e <UART_WaitOnFlagUntilTimeout+0x30>
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d11d      	bne.n	800665a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800662c:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689a      	ldr	r2, [r3, #8]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 0201 	bic.w	r2, r2, #1
 800663c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2220      	movs	r2, #32
 8006642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2220      	movs	r2, #32
 800664a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e045      	b.n	80066e6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0304 	and.w	r3, r3, #4
 8006664:	2b00      	cmp	r3, #0
 8006666:	d02e      	beq.n	80066c6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	69db      	ldr	r3, [r3, #28]
 800666e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006676:	d126      	bne.n	80066c6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006680:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006690:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	689a      	ldr	r2, [r3, #8]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f022 0201 	bic.w	r2, r2, #1
 80066a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2220      	movs	r2, #32
 80066a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2220      	movs	r2, #32
 80066ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2220      	movs	r2, #32
 80066b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e00f      	b.n	80066e6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	69da      	ldr	r2, [r3, #28]
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	4013      	ands	r3, r2
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	bf0c      	ite	eq
 80066d6:	2301      	moveq	r3, #1
 80066d8:	2300      	movne	r3, #0
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	461a      	mov	r2, r3
 80066de:	79fb      	ldrb	r3, [r7, #7]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d08d      	beq.n	8006600 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80066ee:	b480      	push	{r7}
 80066f0:	b085      	sub	sp, #20
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d101      	bne.n	8006704 <HAL_UARTEx_DisableFifoMode+0x16>
 8006700:	2302      	movs	r3, #2
 8006702:	e027      	b.n	8006754 <HAL_UARTEx_DisableFifoMode+0x66>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2224      	movs	r2, #36	; 0x24
 8006710:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 0201 	bic.w	r2, r2, #1
 800672a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006732:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2220      	movs	r2, #32
 8006746:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3714      	adds	r7, #20
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006770:	2b01      	cmp	r3, #1
 8006772:	d101      	bne.n	8006778 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006774:	2302      	movs	r3, #2
 8006776:	e02d      	b.n	80067d4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2224      	movs	r2, #36	; 0x24
 8006784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f022 0201 	bic.w	r2, r2, #1
 800679e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f84f 	bl	8006858 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2220      	movs	r2, #32
 80067c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d101      	bne.n	80067f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80067f0:	2302      	movs	r3, #2
 80067f2:	e02d      	b.n	8006850 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2224      	movs	r2, #36	; 0x24
 8006800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f022 0201 	bic.w	r2, r2, #1
 800681a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	683a      	ldr	r2, [r7, #0]
 800682c:	430a      	orrs	r2, r1
 800682e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 f811 	bl	8006858 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2220      	movs	r2, #32
 8006842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006864:	2b00      	cmp	r3, #0
 8006866:	d108      	bne.n	800687a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006878:	e031      	b.n	80068de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800687a:	2308      	movs	r3, #8
 800687c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800687e:	2308      	movs	r3, #8
 8006880:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	0e5b      	lsrs	r3, r3, #25
 800688a:	b2db      	uxtb	r3, r3
 800688c:	f003 0307 	and.w	r3, r3, #7
 8006890:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	0f5b      	lsrs	r3, r3, #29
 800689a:	b2db      	uxtb	r3, r3
 800689c:	f003 0307 	and.w	r3, r3, #7
 80068a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068a2:	7bbb      	ldrb	r3, [r7, #14]
 80068a4:	7b3a      	ldrb	r2, [r7, #12]
 80068a6:	4911      	ldr	r1, [pc, #68]	; (80068ec <UARTEx_SetNbDataToProcess+0x94>)
 80068a8:	5c8a      	ldrb	r2, [r1, r2]
 80068aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80068ae:	7b3a      	ldrb	r2, [r7, #12]
 80068b0:	490f      	ldr	r1, [pc, #60]	; (80068f0 <UARTEx_SetNbDataToProcess+0x98>)
 80068b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068c0:	7bfb      	ldrb	r3, [r7, #15]
 80068c2:	7b7a      	ldrb	r2, [r7, #13]
 80068c4:	4909      	ldr	r1, [pc, #36]	; (80068ec <UARTEx_SetNbDataToProcess+0x94>)
 80068c6:	5c8a      	ldrb	r2, [r1, r2]
 80068c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80068cc:	7b7a      	ldrb	r2, [r7, #13]
 80068ce:	4908      	ldr	r1, [pc, #32]	; (80068f0 <UARTEx_SetNbDataToProcess+0x98>)
 80068d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80068de:	bf00      	nop
 80068e0:	3714      	adds	r7, #20
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	0800aca8 	.word	0x0800aca8
 80068f0:	0800acb0 	.word	0x0800acb0

080068f4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	4603      	mov	r3, r0
 80068fc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80068fe:	2300      	movs	r3, #0
 8006900:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006902:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006906:	2b84      	cmp	r3, #132	; 0x84
 8006908:	d005      	beq.n	8006916 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800690a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	4413      	add	r3, r2
 8006912:	3303      	adds	r3, #3
 8006914:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006916:	68fb      	ldr	r3, [r7, #12]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3714      	adds	r7, #20
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006928:	f000 fade 	bl	8006ee8 <vTaskStartScheduler>
  
  return osOK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	bd80      	pop	{r7, pc}

08006932 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006932:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006934:	b089      	sub	sp, #36	; 0x24
 8006936:	af04      	add	r7, sp, #16
 8006938:	6078      	str	r0, [r7, #4]
 800693a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d020      	beq.n	8006986 <osThreadCreate+0x54>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d01c      	beq.n	8006986 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685c      	ldr	r4, [r3, #4]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681d      	ldr	r5, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	691e      	ldr	r6, [r3, #16]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800695e:	4618      	mov	r0, r3
 8006960:	f7ff ffc8 	bl	80068f4 <makeFreeRtosPriority>
 8006964:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800696e:	9202      	str	r2, [sp, #8]
 8006970:	9301      	str	r3, [sp, #4]
 8006972:	9100      	str	r1, [sp, #0]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	4632      	mov	r2, r6
 8006978:	4629      	mov	r1, r5
 800697a:	4620      	mov	r0, r4
 800697c:	f000 f8ed 	bl	8006b5a <xTaskCreateStatic>
 8006980:	4603      	mov	r3, r0
 8006982:	60fb      	str	r3, [r7, #12]
 8006984:	e01c      	b.n	80069c0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	685c      	ldr	r4, [r3, #4]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006992:	b29e      	uxth	r6, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800699a:	4618      	mov	r0, r3
 800699c:	f7ff ffaa 	bl	80068f4 <makeFreeRtosPriority>
 80069a0:	4602      	mov	r2, r0
 80069a2:	f107 030c 	add.w	r3, r7, #12
 80069a6:	9301      	str	r3, [sp, #4]
 80069a8:	9200      	str	r2, [sp, #0]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	4632      	mov	r2, r6
 80069ae:	4629      	mov	r1, r5
 80069b0:	4620      	mov	r0, r4
 80069b2:	f000 f92f 	bl	8006c14 <xTaskCreate>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d001      	beq.n	80069c0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80069bc:	2300      	movs	r3, #0
 80069be:	e000      	b.n	80069c2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80069c0:	68fb      	ldr	r3, [r7, #12]
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3714      	adds	r7, #20
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080069ca <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b084      	sub	sp, #16
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d001      	beq.n	80069e0 <osDelay+0x16>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	e000      	b.n	80069e2 <osDelay+0x18>
 80069e0:	2301      	movs	r3, #1
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 fa4c 	bl	8006e80 <vTaskDelay>
  
  return osOK;
 80069e8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80069f2:	b480      	push	{r7}
 80069f4:	b083      	sub	sp, #12
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f103 0208 	add.w	r2, r3, #8
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a0a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f103 0208 	add.w	r2, r3, #8
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f103 0208 	add.w	r2, r3, #8
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a26:	bf00      	nop
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006a32:	b480      	push	{r7}
 8006a34:	b083      	sub	sp, #12
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	689a      	ldr	r2, [r3, #8]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	683a      	ldr	r2, [r7, #0]
 8006a70:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	683a      	ldr	r2, [r7, #0]
 8006a76:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	1c5a      	adds	r2, r3, #1
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	601a      	str	r2, [r3, #0]
}
 8006a88:	bf00      	nop
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006aaa:	d103      	bne.n	8006ab4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	60fb      	str	r3, [r7, #12]
 8006ab2:	e00c      	b.n	8006ace <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	3308      	adds	r3, #8
 8006ab8:	60fb      	str	r3, [r7, #12]
 8006aba:	e002      	b.n	8006ac2 <vListInsert+0x2e>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	60fb      	str	r3, [r7, #12]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d2f6      	bcs.n	8006abc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	685a      	ldr	r2, [r3, #4]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	683a      	ldr	r2, [r7, #0]
 8006adc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	1c5a      	adds	r2, r3, #1
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	601a      	str	r2, [r3, #0]
}
 8006afa:	bf00      	nop
 8006afc:	3714      	adds	r7, #20
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b06:	b480      	push	{r7}
 8006b08:	b085      	sub	sp, #20
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	6892      	ldr	r2, [r2, #8]
 8006b1c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	6852      	ldr	r2, [r2, #4]
 8006b26:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d103      	bne.n	8006b3a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	689a      	ldr	r2, [r3, #8]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	1e5a      	subs	r2, r3, #1
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b08e      	sub	sp, #56	; 0x38
 8006b5e:	af04      	add	r7, sp, #16
 8006b60:	60f8      	str	r0, [r7, #12]
 8006b62:	60b9      	str	r1, [r7, #8]
 8006b64:	607a      	str	r2, [r7, #4]
 8006b66:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10a      	bne.n	8006b84 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006b80:	bf00      	nop
 8006b82:	e7fe      	b.n	8006b82 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10a      	bne.n	8006ba0 <xTaskCreateStatic+0x46>
	__asm volatile
 8006b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	61fb      	str	r3, [r7, #28]
}
 8006b9c:	bf00      	nop
 8006b9e:	e7fe      	b.n	8006b9e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006ba0:	2354      	movs	r3, #84	; 0x54
 8006ba2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	2b54      	cmp	r3, #84	; 0x54
 8006ba8:	d00a      	beq.n	8006bc0 <xTaskCreateStatic+0x66>
	__asm volatile
 8006baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bae:	f383 8811 	msr	BASEPRI, r3
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	61bb      	str	r3, [r7, #24]
}
 8006bbc:	bf00      	nop
 8006bbe:	e7fe      	b.n	8006bbe <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006bc0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d01e      	beq.n	8006c06 <xTaskCreateStatic+0xac>
 8006bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d01b      	beq.n	8006c06 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bd6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bda:	2202      	movs	r2, #2
 8006bdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006be0:	2300      	movs	r3, #0
 8006be2:	9303      	str	r3, [sp, #12]
 8006be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be6:	9302      	str	r3, [sp, #8]
 8006be8:	f107 0314 	add.w	r3, r7, #20
 8006bec:	9301      	str	r3, [sp, #4]
 8006bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf0:	9300      	str	r3, [sp, #0]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	68b9      	ldr	r1, [r7, #8]
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f000 f850 	bl	8006c9e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c00:	f000 f8d4 	bl	8006dac <prvAddNewTaskToReadyList>
 8006c04:	e001      	b.n	8006c0a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006c06:	2300      	movs	r3, #0
 8006c08:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c0a:	697b      	ldr	r3, [r7, #20]
	}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3728      	adds	r7, #40	; 0x28
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b08c      	sub	sp, #48	; 0x30
 8006c18:	af04      	add	r7, sp, #16
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	603b      	str	r3, [r7, #0]
 8006c20:	4613      	mov	r3, r2
 8006c22:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006c24:	88fb      	ldrh	r3, [r7, #6]
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f000 fec5 	bl	80079b8 <pvPortMalloc>
 8006c2e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00e      	beq.n	8006c54 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006c36:	2054      	movs	r0, #84	; 0x54
 8006c38:	f000 febe 	bl	80079b8 <pvPortMalloc>
 8006c3c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d003      	beq.n	8006c4c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	631a      	str	r2, [r3, #48]	; 0x30
 8006c4a:	e005      	b.n	8006c58 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c4c:	6978      	ldr	r0, [r7, #20]
 8006c4e:	f000 ff7f 	bl	8007b50 <vPortFree>
 8006c52:	e001      	b.n	8006c58 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c54:	2300      	movs	r3, #0
 8006c56:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d017      	beq.n	8006c8e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c66:	88fa      	ldrh	r2, [r7, #6]
 8006c68:	2300      	movs	r3, #0
 8006c6a:	9303      	str	r3, [sp, #12]
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	9302      	str	r3, [sp, #8]
 8006c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c72:	9301      	str	r3, [sp, #4]
 8006c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c76:	9300      	str	r3, [sp, #0]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	68b9      	ldr	r1, [r7, #8]
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f000 f80e 	bl	8006c9e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c82:	69f8      	ldr	r0, [r7, #28]
 8006c84:	f000 f892 	bl	8006dac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	61bb      	str	r3, [r7, #24]
 8006c8c:	e002      	b.n	8006c94 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c92:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c94:	69bb      	ldr	r3, [r7, #24]
	}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3720      	adds	r7, #32
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b088      	sub	sp, #32
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	60f8      	str	r0, [r7, #12]
 8006ca6:	60b9      	str	r1, [r7, #8]
 8006ca8:	607a      	str	r2, [r7, #4]
 8006caa:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4413      	add	r3, r2
 8006cbc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	f023 0307 	bic.w	r3, r3, #7
 8006cc4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	f003 0307 	and.w	r3, r3, #7
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00a      	beq.n	8006ce6 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd4:	f383 8811 	msr	BASEPRI, r3
 8006cd8:	f3bf 8f6f 	isb	sy
 8006cdc:	f3bf 8f4f 	dsb	sy
 8006ce0:	617b      	str	r3, [r7, #20]
}
 8006ce2:	bf00      	nop
 8006ce4:	e7fe      	b.n	8006ce4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d01f      	beq.n	8006d2c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cec:	2300      	movs	r3, #0
 8006cee:	61fb      	str	r3, [r7, #28]
 8006cf0:	e012      	b.n	8006d18 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006cf2:	68ba      	ldr	r2, [r7, #8]
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	7819      	ldrb	r1, [r3, #0]
 8006cfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	4413      	add	r3, r2
 8006d00:	3334      	adds	r3, #52	; 0x34
 8006d02:	460a      	mov	r2, r1
 8006d04:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d006      	beq.n	8006d20 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	3301      	adds	r3, #1
 8006d16:	61fb      	str	r3, [r7, #28]
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	2b0f      	cmp	r3, #15
 8006d1c:	d9e9      	bls.n	8006cf2 <prvInitialiseNewTask+0x54>
 8006d1e:	e000      	b.n	8006d22 <prvInitialiseNewTask+0x84>
			{
				break;
 8006d20:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d2a:	e003      	b.n	8006d34 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d36:	2b06      	cmp	r3, #6
 8006d38:	d901      	bls.n	8006d3e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d3a:	2306      	movs	r3, #6
 8006d3c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d42:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d48:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d52:	3304      	adds	r3, #4
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7ff fe6c 	bl	8006a32 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5c:	3318      	adds	r3, #24
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7ff fe67 	bl	8006a32 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d68:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6c:	f1c3 0207 	rsb	r2, r3, #7
 8006d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d72:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d78:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d88:	683a      	ldr	r2, [r7, #0]
 8006d8a:	68f9      	ldr	r1, [r7, #12]
 8006d8c:	69b8      	ldr	r0, [r7, #24]
 8006d8e:	f000 fc05 	bl	800759c <pxPortInitialiseStack>
 8006d92:	4602      	mov	r2, r0
 8006d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d96:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d002      	beq.n	8006da4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006da2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006da4:	bf00      	nop
 8006da6:	3720      	adds	r7, #32
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006db4:	f000 fd1e 	bl	80077f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006db8:	4b2a      	ldr	r3, [pc, #168]	; (8006e64 <prvAddNewTaskToReadyList+0xb8>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	4a29      	ldr	r2, [pc, #164]	; (8006e64 <prvAddNewTaskToReadyList+0xb8>)
 8006dc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006dc2:	4b29      	ldr	r3, [pc, #164]	; (8006e68 <prvAddNewTaskToReadyList+0xbc>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d109      	bne.n	8006dde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006dca:	4a27      	ldr	r2, [pc, #156]	; (8006e68 <prvAddNewTaskToReadyList+0xbc>)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006dd0:	4b24      	ldr	r3, [pc, #144]	; (8006e64 <prvAddNewTaskToReadyList+0xb8>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d110      	bne.n	8006dfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006dd8:	f000 fabc 	bl	8007354 <prvInitialiseTaskLists>
 8006ddc:	e00d      	b.n	8006dfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006dde:	4b23      	ldr	r3, [pc, #140]	; (8006e6c <prvAddNewTaskToReadyList+0xc0>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d109      	bne.n	8006dfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006de6:	4b20      	ldr	r3, [pc, #128]	; (8006e68 <prvAddNewTaskToReadyList+0xbc>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d802      	bhi.n	8006dfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006df4:	4a1c      	ldr	r2, [pc, #112]	; (8006e68 <prvAddNewTaskToReadyList+0xbc>)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006dfa:	4b1d      	ldr	r3, [pc, #116]	; (8006e70 <prvAddNewTaskToReadyList+0xc4>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	4a1b      	ldr	r2, [pc, #108]	; (8006e70 <prvAddNewTaskToReadyList+0xc4>)
 8006e02:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e08:	2201      	movs	r2, #1
 8006e0a:	409a      	lsls	r2, r3
 8006e0c:	4b19      	ldr	r3, [pc, #100]	; (8006e74 <prvAddNewTaskToReadyList+0xc8>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	4a18      	ldr	r2, [pc, #96]	; (8006e74 <prvAddNewTaskToReadyList+0xc8>)
 8006e14:	6013      	str	r3, [r2, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	4413      	add	r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4a15      	ldr	r2, [pc, #84]	; (8006e78 <prvAddNewTaskToReadyList+0xcc>)
 8006e24:	441a      	add	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	3304      	adds	r3, #4
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	4610      	mov	r0, r2
 8006e2e:	f7ff fe0d 	bl	8006a4c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e32:	f000 fd0f 	bl	8007854 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e36:	4b0d      	ldr	r3, [pc, #52]	; (8006e6c <prvAddNewTaskToReadyList+0xc0>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00e      	beq.n	8006e5c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e3e:	4b0a      	ldr	r3, [pc, #40]	; (8006e68 <prvAddNewTaskToReadyList+0xbc>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d207      	bcs.n	8006e5c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e4c:	4b0b      	ldr	r3, [pc, #44]	; (8006e7c <prvAddNewTaskToReadyList+0xd0>)
 8006e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e52:	601a      	str	r2, [r3, #0]
 8006e54:	f3bf 8f4f 	dsb	sy
 8006e58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e5c:	bf00      	nop
 8006e5e:	3708      	adds	r7, #8
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	2000063c 	.word	0x2000063c
 8006e68:	2000053c 	.word	0x2000053c
 8006e6c:	20000648 	.word	0x20000648
 8006e70:	20000658 	.word	0x20000658
 8006e74:	20000644 	.word	0x20000644
 8006e78:	20000540 	.word	0x20000540
 8006e7c:	e000ed04 	.word	0xe000ed04

08006e80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d017      	beq.n	8006ec2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e92:	4b13      	ldr	r3, [pc, #76]	; (8006ee0 <vTaskDelay+0x60>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00a      	beq.n	8006eb0 <vTaskDelay+0x30>
	__asm volatile
 8006e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9e:	f383 8811 	msr	BASEPRI, r3
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	60bb      	str	r3, [r7, #8]
}
 8006eac:	bf00      	nop
 8006eae:	e7fe      	b.n	8006eae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006eb0:	f000 f87a 	bl	8006fa8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 fb0a 	bl	80074d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006ebc:	f000 f882 	bl	8006fc4 <xTaskResumeAll>
 8006ec0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d107      	bne.n	8006ed8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006ec8:	4b06      	ldr	r3, [pc, #24]	; (8006ee4 <vTaskDelay+0x64>)
 8006eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ece:	601a      	str	r2, [r3, #0]
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ed8:	bf00      	nop
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	20000664 	.word	0x20000664
 8006ee4:	e000ed04 	.word	0xe000ed04

08006ee8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b08a      	sub	sp, #40	; 0x28
 8006eec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ef6:	463a      	mov	r2, r7
 8006ef8:	1d39      	adds	r1, r7, #4
 8006efa:	f107 0308 	add.w	r3, r7, #8
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7fa fd6a 	bl	80019d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f04:	6839      	ldr	r1, [r7, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	68ba      	ldr	r2, [r7, #8]
 8006f0a:	9202      	str	r2, [sp, #8]
 8006f0c:	9301      	str	r3, [sp, #4]
 8006f0e:	2300      	movs	r3, #0
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	2300      	movs	r3, #0
 8006f14:	460a      	mov	r2, r1
 8006f16:	491e      	ldr	r1, [pc, #120]	; (8006f90 <vTaskStartScheduler+0xa8>)
 8006f18:	481e      	ldr	r0, [pc, #120]	; (8006f94 <vTaskStartScheduler+0xac>)
 8006f1a:	f7ff fe1e 	bl	8006b5a <xTaskCreateStatic>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	4a1d      	ldr	r2, [pc, #116]	; (8006f98 <vTaskStartScheduler+0xb0>)
 8006f22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f24:	4b1c      	ldr	r3, [pc, #112]	; (8006f98 <vTaskStartScheduler+0xb0>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d002      	beq.n	8006f32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	617b      	str	r3, [r7, #20]
 8006f30:	e001      	b.n	8006f36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f32:	2300      	movs	r3, #0
 8006f34:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d116      	bne.n	8006f6a <vTaskStartScheduler+0x82>
	__asm volatile
 8006f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f40:	f383 8811 	msr	BASEPRI, r3
 8006f44:	f3bf 8f6f 	isb	sy
 8006f48:	f3bf 8f4f 	dsb	sy
 8006f4c:	613b      	str	r3, [r7, #16]
}
 8006f4e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f50:	4b12      	ldr	r3, [pc, #72]	; (8006f9c <vTaskStartScheduler+0xb4>)
 8006f52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f56:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f58:	4b11      	ldr	r3, [pc, #68]	; (8006fa0 <vTaskStartScheduler+0xb8>)
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f5e:	4b11      	ldr	r3, [pc, #68]	; (8006fa4 <vTaskStartScheduler+0xbc>)
 8006f60:	2200      	movs	r2, #0
 8006f62:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f64:	f000 fba4 	bl	80076b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f68:	e00e      	b.n	8006f88 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f70:	d10a      	bne.n	8006f88 <vTaskStartScheduler+0xa0>
	__asm volatile
 8006f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f76:	f383 8811 	msr	BASEPRI, r3
 8006f7a:	f3bf 8f6f 	isb	sy
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	60fb      	str	r3, [r7, #12]
}
 8006f84:	bf00      	nop
 8006f86:	e7fe      	b.n	8006f86 <vTaskStartScheduler+0x9e>
}
 8006f88:	bf00      	nop
 8006f8a:	3718      	adds	r7, #24
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	0800ac40 	.word	0x0800ac40
 8006f94:	08007325 	.word	0x08007325
 8006f98:	20000660 	.word	0x20000660
 8006f9c:	2000065c 	.word	0x2000065c
 8006fa0:	20000648 	.word	0x20000648
 8006fa4:	20000640 	.word	0x20000640

08006fa8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006fa8:	b480      	push	{r7}
 8006faa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006fac:	4b04      	ldr	r3, [pc, #16]	; (8006fc0 <vTaskSuspendAll+0x18>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	4a03      	ldr	r2, [pc, #12]	; (8006fc0 <vTaskSuspendAll+0x18>)
 8006fb4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006fb6:	bf00      	nop
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr
 8006fc0:	20000664 	.word	0x20000664

08006fc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006fd2:	4b41      	ldr	r3, [pc, #260]	; (80070d8 <xTaskResumeAll+0x114>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10a      	bne.n	8006ff0 <xTaskResumeAll+0x2c>
	__asm volatile
 8006fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fde:	f383 8811 	msr	BASEPRI, r3
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	603b      	str	r3, [r7, #0]
}
 8006fec:	bf00      	nop
 8006fee:	e7fe      	b.n	8006fee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ff0:	f000 fc00 	bl	80077f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ff4:	4b38      	ldr	r3, [pc, #224]	; (80070d8 <xTaskResumeAll+0x114>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	4a37      	ldr	r2, [pc, #220]	; (80070d8 <xTaskResumeAll+0x114>)
 8006ffc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ffe:	4b36      	ldr	r3, [pc, #216]	; (80070d8 <xTaskResumeAll+0x114>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d161      	bne.n	80070ca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007006:	4b35      	ldr	r3, [pc, #212]	; (80070dc <xTaskResumeAll+0x118>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d05d      	beq.n	80070ca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800700e:	e02e      	b.n	800706e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007010:	4b33      	ldr	r3, [pc, #204]	; (80070e0 <xTaskResumeAll+0x11c>)
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	3318      	adds	r3, #24
 800701c:	4618      	mov	r0, r3
 800701e:	f7ff fd72 	bl	8006b06 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	3304      	adds	r3, #4
 8007026:	4618      	mov	r0, r3
 8007028:	f7ff fd6d 	bl	8006b06 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007030:	2201      	movs	r2, #1
 8007032:	409a      	lsls	r2, r3
 8007034:	4b2b      	ldr	r3, [pc, #172]	; (80070e4 <xTaskResumeAll+0x120>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4313      	orrs	r3, r2
 800703a:	4a2a      	ldr	r2, [pc, #168]	; (80070e4 <xTaskResumeAll+0x120>)
 800703c:	6013      	str	r3, [r2, #0]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007042:	4613      	mov	r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4413      	add	r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4a27      	ldr	r2, [pc, #156]	; (80070e8 <xTaskResumeAll+0x124>)
 800704c:	441a      	add	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	3304      	adds	r3, #4
 8007052:	4619      	mov	r1, r3
 8007054:	4610      	mov	r0, r2
 8007056:	f7ff fcf9 	bl	8006a4c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800705e:	4b23      	ldr	r3, [pc, #140]	; (80070ec <xTaskResumeAll+0x128>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007064:	429a      	cmp	r2, r3
 8007066:	d302      	bcc.n	800706e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007068:	4b21      	ldr	r3, [pc, #132]	; (80070f0 <xTaskResumeAll+0x12c>)
 800706a:	2201      	movs	r2, #1
 800706c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800706e:	4b1c      	ldr	r3, [pc, #112]	; (80070e0 <xTaskResumeAll+0x11c>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1cc      	bne.n	8007010 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d001      	beq.n	8007080 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800707c:	f000 fa08 	bl	8007490 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007080:	4b1c      	ldr	r3, [pc, #112]	; (80070f4 <xTaskResumeAll+0x130>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d010      	beq.n	80070ae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800708c:	f000 f836 	bl	80070fc <xTaskIncrementTick>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d002      	beq.n	800709c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007096:	4b16      	ldr	r3, [pc, #88]	; (80070f0 <xTaskResumeAll+0x12c>)
 8007098:	2201      	movs	r2, #1
 800709a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	3b01      	subs	r3, #1
 80070a0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1f1      	bne.n	800708c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80070a8:	4b12      	ldr	r3, [pc, #72]	; (80070f4 <xTaskResumeAll+0x130>)
 80070aa:	2200      	movs	r2, #0
 80070ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80070ae:	4b10      	ldr	r3, [pc, #64]	; (80070f0 <xTaskResumeAll+0x12c>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d009      	beq.n	80070ca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80070b6:	2301      	movs	r3, #1
 80070b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80070ba:	4b0f      	ldr	r3, [pc, #60]	; (80070f8 <xTaskResumeAll+0x134>)
 80070bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070c0:	601a      	str	r2, [r3, #0]
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070ca:	f000 fbc3 	bl	8007854 <vPortExitCritical>

	return xAlreadyYielded;
 80070ce:	68bb      	ldr	r3, [r7, #8]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	20000664 	.word	0x20000664
 80070dc:	2000063c 	.word	0x2000063c
 80070e0:	200005fc 	.word	0x200005fc
 80070e4:	20000644 	.word	0x20000644
 80070e8:	20000540 	.word	0x20000540
 80070ec:	2000053c 	.word	0x2000053c
 80070f0:	20000650 	.word	0x20000650
 80070f4:	2000064c 	.word	0x2000064c
 80070f8:	e000ed04 	.word	0xe000ed04

080070fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b086      	sub	sp, #24
 8007100:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007102:	2300      	movs	r3, #0
 8007104:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007106:	4b4e      	ldr	r3, [pc, #312]	; (8007240 <xTaskIncrementTick+0x144>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	f040 808e 	bne.w	800722c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007110:	4b4c      	ldr	r3, [pc, #304]	; (8007244 <xTaskIncrementTick+0x148>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	3301      	adds	r3, #1
 8007116:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007118:	4a4a      	ldr	r2, [pc, #296]	; (8007244 <xTaskIncrementTick+0x148>)
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d120      	bne.n	8007166 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007124:	4b48      	ldr	r3, [pc, #288]	; (8007248 <xTaskIncrementTick+0x14c>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00a      	beq.n	8007144 <xTaskIncrementTick+0x48>
	__asm volatile
 800712e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007132:	f383 8811 	msr	BASEPRI, r3
 8007136:	f3bf 8f6f 	isb	sy
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	603b      	str	r3, [r7, #0]
}
 8007140:	bf00      	nop
 8007142:	e7fe      	b.n	8007142 <xTaskIncrementTick+0x46>
 8007144:	4b40      	ldr	r3, [pc, #256]	; (8007248 <xTaskIncrementTick+0x14c>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	60fb      	str	r3, [r7, #12]
 800714a:	4b40      	ldr	r3, [pc, #256]	; (800724c <xTaskIncrementTick+0x150>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a3e      	ldr	r2, [pc, #248]	; (8007248 <xTaskIncrementTick+0x14c>)
 8007150:	6013      	str	r3, [r2, #0]
 8007152:	4a3e      	ldr	r2, [pc, #248]	; (800724c <xTaskIncrementTick+0x150>)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6013      	str	r3, [r2, #0]
 8007158:	4b3d      	ldr	r3, [pc, #244]	; (8007250 <xTaskIncrementTick+0x154>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	3301      	adds	r3, #1
 800715e:	4a3c      	ldr	r2, [pc, #240]	; (8007250 <xTaskIncrementTick+0x154>)
 8007160:	6013      	str	r3, [r2, #0]
 8007162:	f000 f995 	bl	8007490 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007166:	4b3b      	ldr	r3, [pc, #236]	; (8007254 <xTaskIncrementTick+0x158>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	429a      	cmp	r2, r3
 800716e:	d348      	bcc.n	8007202 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007170:	4b35      	ldr	r3, [pc, #212]	; (8007248 <xTaskIncrementTick+0x14c>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d104      	bne.n	8007184 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800717a:	4b36      	ldr	r3, [pc, #216]	; (8007254 <xTaskIncrementTick+0x158>)
 800717c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007180:	601a      	str	r2, [r3, #0]
					break;
 8007182:	e03e      	b.n	8007202 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007184:	4b30      	ldr	r3, [pc, #192]	; (8007248 <xTaskIncrementTick+0x14c>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	429a      	cmp	r2, r3
 800719a:	d203      	bcs.n	80071a4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800719c:	4a2d      	ldr	r2, [pc, #180]	; (8007254 <xTaskIncrementTick+0x158>)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80071a2:	e02e      	b.n	8007202 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	3304      	adds	r3, #4
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7ff fcac 	bl	8006b06 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d004      	beq.n	80071c0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	3318      	adds	r3, #24
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7ff fca3 	bl	8006b06 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c4:	2201      	movs	r2, #1
 80071c6:	409a      	lsls	r2, r3
 80071c8:	4b23      	ldr	r3, [pc, #140]	; (8007258 <xTaskIncrementTick+0x15c>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	4a22      	ldr	r2, [pc, #136]	; (8007258 <xTaskIncrementTick+0x15c>)
 80071d0:	6013      	str	r3, [r2, #0]
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d6:	4613      	mov	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4a1f      	ldr	r2, [pc, #124]	; (800725c <xTaskIncrementTick+0x160>)
 80071e0:	441a      	add	r2, r3
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	3304      	adds	r3, #4
 80071e6:	4619      	mov	r1, r3
 80071e8:	4610      	mov	r0, r2
 80071ea:	f7ff fc2f 	bl	8006a4c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f2:	4b1b      	ldr	r3, [pc, #108]	; (8007260 <xTaskIncrementTick+0x164>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d3b9      	bcc.n	8007170 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80071fc:	2301      	movs	r3, #1
 80071fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007200:	e7b6      	b.n	8007170 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007202:	4b17      	ldr	r3, [pc, #92]	; (8007260 <xTaskIncrementTick+0x164>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007208:	4914      	ldr	r1, [pc, #80]	; (800725c <xTaskIncrementTick+0x160>)
 800720a:	4613      	mov	r3, r2
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	4413      	add	r3, r2
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	440b      	add	r3, r1
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d901      	bls.n	800721e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800721a:	2301      	movs	r3, #1
 800721c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800721e:	4b11      	ldr	r3, [pc, #68]	; (8007264 <xTaskIncrementTick+0x168>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d007      	beq.n	8007236 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007226:	2301      	movs	r3, #1
 8007228:	617b      	str	r3, [r7, #20]
 800722a:	e004      	b.n	8007236 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800722c:	4b0e      	ldr	r3, [pc, #56]	; (8007268 <xTaskIncrementTick+0x16c>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	3301      	adds	r3, #1
 8007232:	4a0d      	ldr	r2, [pc, #52]	; (8007268 <xTaskIncrementTick+0x16c>)
 8007234:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007236:	697b      	ldr	r3, [r7, #20]
}
 8007238:	4618      	mov	r0, r3
 800723a:	3718      	adds	r7, #24
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	20000664 	.word	0x20000664
 8007244:	20000640 	.word	0x20000640
 8007248:	200005f4 	.word	0x200005f4
 800724c:	200005f8 	.word	0x200005f8
 8007250:	20000654 	.word	0x20000654
 8007254:	2000065c 	.word	0x2000065c
 8007258:	20000644 	.word	0x20000644
 800725c:	20000540 	.word	0x20000540
 8007260:	2000053c 	.word	0x2000053c
 8007264:	20000650 	.word	0x20000650
 8007268:	2000064c 	.word	0x2000064c

0800726c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800726c:	b480      	push	{r7}
 800726e:	b087      	sub	sp, #28
 8007270:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007272:	4b27      	ldr	r3, [pc, #156]	; (8007310 <vTaskSwitchContext+0xa4>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d003      	beq.n	8007282 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800727a:	4b26      	ldr	r3, [pc, #152]	; (8007314 <vTaskSwitchContext+0xa8>)
 800727c:	2201      	movs	r2, #1
 800727e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007280:	e03f      	b.n	8007302 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007282:	4b24      	ldr	r3, [pc, #144]	; (8007314 <vTaskSwitchContext+0xa8>)
 8007284:	2200      	movs	r2, #0
 8007286:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007288:	4b23      	ldr	r3, [pc, #140]	; (8007318 <vTaskSwitchContext+0xac>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	fab3 f383 	clz	r3, r3
 8007294:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007296:	7afb      	ldrb	r3, [r7, #11]
 8007298:	f1c3 031f 	rsb	r3, r3, #31
 800729c:	617b      	str	r3, [r7, #20]
 800729e:	491f      	ldr	r1, [pc, #124]	; (800731c <vTaskSwitchContext+0xb0>)
 80072a0:	697a      	ldr	r2, [r7, #20]
 80072a2:	4613      	mov	r3, r2
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	4413      	add	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	440b      	add	r3, r1
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10a      	bne.n	80072c8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80072b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b6:	f383 8811 	msr	BASEPRI, r3
 80072ba:	f3bf 8f6f 	isb	sy
 80072be:	f3bf 8f4f 	dsb	sy
 80072c2:	607b      	str	r3, [r7, #4]
}
 80072c4:	bf00      	nop
 80072c6:	e7fe      	b.n	80072c6 <vTaskSwitchContext+0x5a>
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	4613      	mov	r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	4413      	add	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4a12      	ldr	r2, [pc, #72]	; (800731c <vTaskSwitchContext+0xb0>)
 80072d4:	4413      	add	r3, r2
 80072d6:	613b      	str	r3, [r7, #16]
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	685a      	ldr	r2, [r3, #4]
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	605a      	str	r2, [r3, #4]
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	685a      	ldr	r2, [r3, #4]
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	3308      	adds	r3, #8
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d104      	bne.n	80072f8 <vTaskSwitchContext+0x8c>
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	685a      	ldr	r2, [r3, #4]
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	605a      	str	r2, [r3, #4]
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	4a08      	ldr	r2, [pc, #32]	; (8007320 <vTaskSwitchContext+0xb4>)
 8007300:	6013      	str	r3, [r2, #0]
}
 8007302:	bf00      	nop
 8007304:	371c      	adds	r7, #28
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	20000664 	.word	0x20000664
 8007314:	20000650 	.word	0x20000650
 8007318:	20000644 	.word	0x20000644
 800731c:	20000540 	.word	0x20000540
 8007320:	2000053c 	.word	0x2000053c

08007324 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800732c:	f000 f852 	bl	80073d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007330:	4b06      	ldr	r3, [pc, #24]	; (800734c <prvIdleTask+0x28>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d9f9      	bls.n	800732c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007338:	4b05      	ldr	r3, [pc, #20]	; (8007350 <prvIdleTask+0x2c>)
 800733a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800733e:	601a      	str	r2, [r3, #0]
 8007340:	f3bf 8f4f 	dsb	sy
 8007344:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007348:	e7f0      	b.n	800732c <prvIdleTask+0x8>
 800734a:	bf00      	nop
 800734c:	20000540 	.word	0x20000540
 8007350:	e000ed04 	.word	0xe000ed04

08007354 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800735a:	2300      	movs	r3, #0
 800735c:	607b      	str	r3, [r7, #4]
 800735e:	e00c      	b.n	800737a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	4613      	mov	r3, r2
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4413      	add	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	4a12      	ldr	r2, [pc, #72]	; (80073b4 <prvInitialiseTaskLists+0x60>)
 800736c:	4413      	add	r3, r2
 800736e:	4618      	mov	r0, r3
 8007370:	f7ff fb3f 	bl	80069f2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	3301      	adds	r3, #1
 8007378:	607b      	str	r3, [r7, #4]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2b06      	cmp	r3, #6
 800737e:	d9ef      	bls.n	8007360 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007380:	480d      	ldr	r0, [pc, #52]	; (80073b8 <prvInitialiseTaskLists+0x64>)
 8007382:	f7ff fb36 	bl	80069f2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007386:	480d      	ldr	r0, [pc, #52]	; (80073bc <prvInitialiseTaskLists+0x68>)
 8007388:	f7ff fb33 	bl	80069f2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800738c:	480c      	ldr	r0, [pc, #48]	; (80073c0 <prvInitialiseTaskLists+0x6c>)
 800738e:	f7ff fb30 	bl	80069f2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007392:	480c      	ldr	r0, [pc, #48]	; (80073c4 <prvInitialiseTaskLists+0x70>)
 8007394:	f7ff fb2d 	bl	80069f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007398:	480b      	ldr	r0, [pc, #44]	; (80073c8 <prvInitialiseTaskLists+0x74>)
 800739a:	f7ff fb2a 	bl	80069f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800739e:	4b0b      	ldr	r3, [pc, #44]	; (80073cc <prvInitialiseTaskLists+0x78>)
 80073a0:	4a05      	ldr	r2, [pc, #20]	; (80073b8 <prvInitialiseTaskLists+0x64>)
 80073a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80073a4:	4b0a      	ldr	r3, [pc, #40]	; (80073d0 <prvInitialiseTaskLists+0x7c>)
 80073a6:	4a05      	ldr	r2, [pc, #20]	; (80073bc <prvInitialiseTaskLists+0x68>)
 80073a8:	601a      	str	r2, [r3, #0]
}
 80073aa:	bf00      	nop
 80073ac:	3708      	adds	r7, #8
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	20000540 	.word	0x20000540
 80073b8:	200005cc 	.word	0x200005cc
 80073bc:	200005e0 	.word	0x200005e0
 80073c0:	200005fc 	.word	0x200005fc
 80073c4:	20000610 	.word	0x20000610
 80073c8:	20000628 	.word	0x20000628
 80073cc:	200005f4 	.word	0x200005f4
 80073d0:	200005f8 	.word	0x200005f8

080073d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073da:	e019      	b.n	8007410 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80073dc:	f000 fa0a 	bl	80077f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073e0:	4b10      	ldr	r3, [pc, #64]	; (8007424 <prvCheckTasksWaitingTermination+0x50>)
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	3304      	adds	r3, #4
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7ff fb8a 	bl	8006b06 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80073f2:	4b0d      	ldr	r3, [pc, #52]	; (8007428 <prvCheckTasksWaitingTermination+0x54>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	3b01      	subs	r3, #1
 80073f8:	4a0b      	ldr	r2, [pc, #44]	; (8007428 <prvCheckTasksWaitingTermination+0x54>)
 80073fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80073fc:	4b0b      	ldr	r3, [pc, #44]	; (800742c <prvCheckTasksWaitingTermination+0x58>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	3b01      	subs	r3, #1
 8007402:	4a0a      	ldr	r2, [pc, #40]	; (800742c <prvCheckTasksWaitingTermination+0x58>)
 8007404:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007406:	f000 fa25 	bl	8007854 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f810 	bl	8007430 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007410:	4b06      	ldr	r3, [pc, #24]	; (800742c <prvCheckTasksWaitingTermination+0x58>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1e1      	bne.n	80073dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007418:	bf00      	nop
 800741a:	bf00      	nop
 800741c:	3708      	adds	r7, #8
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	20000610 	.word	0x20000610
 8007428:	2000063c 	.word	0x2000063c
 800742c:	20000624 	.word	0x20000624

08007430 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800743e:	2b00      	cmp	r3, #0
 8007440:	d108      	bne.n	8007454 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007446:	4618      	mov	r0, r3
 8007448:	f000 fb82 	bl	8007b50 <vPortFree>
				vPortFree( pxTCB );
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 fb7f 	bl	8007b50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007452:	e018      	b.n	8007486 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800745a:	2b01      	cmp	r3, #1
 800745c:	d103      	bne.n	8007466 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fb76 	bl	8007b50 <vPortFree>
	}
 8007464:	e00f      	b.n	8007486 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800746c:	2b02      	cmp	r3, #2
 800746e:	d00a      	beq.n	8007486 <prvDeleteTCB+0x56>
	__asm volatile
 8007470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	60fb      	str	r3, [r7, #12]
}
 8007482:	bf00      	nop
 8007484:	e7fe      	b.n	8007484 <prvDeleteTCB+0x54>
	}
 8007486:	bf00      	nop
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
	...

08007490 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007496:	4b0c      	ldr	r3, [pc, #48]	; (80074c8 <prvResetNextTaskUnblockTime+0x38>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d104      	bne.n	80074aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80074a0:	4b0a      	ldr	r3, [pc, #40]	; (80074cc <prvResetNextTaskUnblockTime+0x3c>)
 80074a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80074a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80074a8:	e008      	b.n	80074bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074aa:	4b07      	ldr	r3, [pc, #28]	; (80074c8 <prvResetNextTaskUnblockTime+0x38>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	4a04      	ldr	r2, [pc, #16]	; (80074cc <prvResetNextTaskUnblockTime+0x3c>)
 80074ba:	6013      	str	r3, [r2, #0]
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	200005f4 	.word	0x200005f4
 80074cc:	2000065c 	.word	0x2000065c

080074d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80074da:	4b29      	ldr	r3, [pc, #164]	; (8007580 <prvAddCurrentTaskToDelayedList+0xb0>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074e0:	4b28      	ldr	r3, [pc, #160]	; (8007584 <prvAddCurrentTaskToDelayedList+0xb4>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	3304      	adds	r3, #4
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7ff fb0d 	bl	8006b06 <uxListRemove>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d10b      	bne.n	800750a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80074f2:	4b24      	ldr	r3, [pc, #144]	; (8007584 <prvAddCurrentTaskToDelayedList+0xb4>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f8:	2201      	movs	r2, #1
 80074fa:	fa02 f303 	lsl.w	r3, r2, r3
 80074fe:	43da      	mvns	r2, r3
 8007500:	4b21      	ldr	r3, [pc, #132]	; (8007588 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4013      	ands	r3, r2
 8007506:	4a20      	ldr	r2, [pc, #128]	; (8007588 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007508:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007510:	d10a      	bne.n	8007528 <prvAddCurrentTaskToDelayedList+0x58>
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d007      	beq.n	8007528 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007518:	4b1a      	ldr	r3, [pc, #104]	; (8007584 <prvAddCurrentTaskToDelayedList+0xb4>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	3304      	adds	r3, #4
 800751e:	4619      	mov	r1, r3
 8007520:	481a      	ldr	r0, [pc, #104]	; (800758c <prvAddCurrentTaskToDelayedList+0xbc>)
 8007522:	f7ff fa93 	bl	8006a4c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007526:	e026      	b.n	8007576 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4413      	add	r3, r2
 800752e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007530:	4b14      	ldr	r3, [pc, #80]	; (8007584 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	68ba      	ldr	r2, [r7, #8]
 8007536:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	429a      	cmp	r2, r3
 800753e:	d209      	bcs.n	8007554 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007540:	4b13      	ldr	r3, [pc, #76]	; (8007590 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	4b0f      	ldr	r3, [pc, #60]	; (8007584 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	3304      	adds	r3, #4
 800754a:	4619      	mov	r1, r3
 800754c:	4610      	mov	r0, r2
 800754e:	f7ff faa1 	bl	8006a94 <vListInsert>
}
 8007552:	e010      	b.n	8007576 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007554:	4b0f      	ldr	r3, [pc, #60]	; (8007594 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	4b0a      	ldr	r3, [pc, #40]	; (8007584 <prvAddCurrentTaskToDelayedList+0xb4>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	3304      	adds	r3, #4
 800755e:	4619      	mov	r1, r3
 8007560:	4610      	mov	r0, r2
 8007562:	f7ff fa97 	bl	8006a94 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007566:	4b0c      	ldr	r3, [pc, #48]	; (8007598 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	429a      	cmp	r2, r3
 800756e:	d202      	bcs.n	8007576 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007570:	4a09      	ldr	r2, [pc, #36]	; (8007598 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	6013      	str	r3, [r2, #0]
}
 8007576:	bf00      	nop
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	20000640 	.word	0x20000640
 8007584:	2000053c 	.word	0x2000053c
 8007588:	20000644 	.word	0x20000644
 800758c:	20000628 	.word	0x20000628
 8007590:	200005f8 	.word	0x200005f8
 8007594:	200005f4 	.word	0x200005f4
 8007598:	2000065c 	.word	0x2000065c

0800759c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	3b04      	subs	r3, #4
 80075ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80075b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	3b04      	subs	r3, #4
 80075ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	f023 0201 	bic.w	r2, r3, #1
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	3b04      	subs	r3, #4
 80075ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80075cc:	4a0c      	ldr	r2, [pc, #48]	; (8007600 <pxPortInitialiseStack+0x64>)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	3b14      	subs	r3, #20
 80075d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	3b04      	subs	r3, #4
 80075e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f06f 0202 	mvn.w	r2, #2
 80075ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	3b20      	subs	r3, #32
 80075f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80075f2:	68fb      	ldr	r3, [r7, #12]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3714      	adds	r7, #20
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr
 8007600:	08007605 	.word	0x08007605

08007604 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800760a:	2300      	movs	r3, #0
 800760c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800760e:	4b12      	ldr	r3, [pc, #72]	; (8007658 <prvTaskExitError+0x54>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007616:	d00a      	beq.n	800762e <prvTaskExitError+0x2a>
	__asm volatile
 8007618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761c:	f383 8811 	msr	BASEPRI, r3
 8007620:	f3bf 8f6f 	isb	sy
 8007624:	f3bf 8f4f 	dsb	sy
 8007628:	60fb      	str	r3, [r7, #12]
}
 800762a:	bf00      	nop
 800762c:	e7fe      	b.n	800762c <prvTaskExitError+0x28>
	__asm volatile
 800762e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007632:	f383 8811 	msr	BASEPRI, r3
 8007636:	f3bf 8f6f 	isb	sy
 800763a:	f3bf 8f4f 	dsb	sy
 800763e:	60bb      	str	r3, [r7, #8]
}
 8007640:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007642:	bf00      	nop
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d0fc      	beq.n	8007644 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800764a:	bf00      	nop
 800764c:	bf00      	nop
 800764e:	3714      	adds	r7, #20
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr
 8007658:	200000d0 	.word	0x200000d0
 800765c:	00000000 	.word	0x00000000

08007660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007660:	4b07      	ldr	r3, [pc, #28]	; (8007680 <pxCurrentTCBConst2>)
 8007662:	6819      	ldr	r1, [r3, #0]
 8007664:	6808      	ldr	r0, [r1, #0]
 8007666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800766a:	f380 8809 	msr	PSP, r0
 800766e:	f3bf 8f6f 	isb	sy
 8007672:	f04f 0000 	mov.w	r0, #0
 8007676:	f380 8811 	msr	BASEPRI, r0
 800767a:	4770      	bx	lr
 800767c:	f3af 8000 	nop.w

08007680 <pxCurrentTCBConst2>:
 8007680:	2000053c 	.word	0x2000053c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007684:	bf00      	nop
 8007686:	bf00      	nop

08007688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007688:	4808      	ldr	r0, [pc, #32]	; (80076ac <prvPortStartFirstTask+0x24>)
 800768a:	6800      	ldr	r0, [r0, #0]
 800768c:	6800      	ldr	r0, [r0, #0]
 800768e:	f380 8808 	msr	MSP, r0
 8007692:	f04f 0000 	mov.w	r0, #0
 8007696:	f380 8814 	msr	CONTROL, r0
 800769a:	b662      	cpsie	i
 800769c:	b661      	cpsie	f
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	df00      	svc	0
 80076a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80076aa:	bf00      	nop
 80076ac:	e000ed08 	.word	0xe000ed08

080076b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b086      	sub	sp, #24
 80076b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80076b6:	4b46      	ldr	r3, [pc, #280]	; (80077d0 <xPortStartScheduler+0x120>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a46      	ldr	r2, [pc, #280]	; (80077d4 <xPortStartScheduler+0x124>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d10a      	bne.n	80076d6 <xPortStartScheduler+0x26>
	__asm volatile
 80076c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c4:	f383 8811 	msr	BASEPRI, r3
 80076c8:	f3bf 8f6f 	isb	sy
 80076cc:	f3bf 8f4f 	dsb	sy
 80076d0:	613b      	str	r3, [r7, #16]
}
 80076d2:	bf00      	nop
 80076d4:	e7fe      	b.n	80076d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80076d6:	4b3e      	ldr	r3, [pc, #248]	; (80077d0 <xPortStartScheduler+0x120>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a3f      	ldr	r2, [pc, #252]	; (80077d8 <xPortStartScheduler+0x128>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d10a      	bne.n	80076f6 <xPortStartScheduler+0x46>
	__asm volatile
 80076e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e4:	f383 8811 	msr	BASEPRI, r3
 80076e8:	f3bf 8f6f 	isb	sy
 80076ec:	f3bf 8f4f 	dsb	sy
 80076f0:	60fb      	str	r3, [r7, #12]
}
 80076f2:	bf00      	nop
 80076f4:	e7fe      	b.n	80076f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80076f6:	4b39      	ldr	r3, [pc, #228]	; (80077dc <xPortStartScheduler+0x12c>)
 80076f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	22ff      	movs	r2, #255	; 0xff
 8007706:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	b2db      	uxtb	r3, r3
 800770e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007710:	78fb      	ldrb	r3, [r7, #3]
 8007712:	b2db      	uxtb	r3, r3
 8007714:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007718:	b2da      	uxtb	r2, r3
 800771a:	4b31      	ldr	r3, [pc, #196]	; (80077e0 <xPortStartScheduler+0x130>)
 800771c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800771e:	4b31      	ldr	r3, [pc, #196]	; (80077e4 <xPortStartScheduler+0x134>)
 8007720:	2207      	movs	r2, #7
 8007722:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007724:	e009      	b.n	800773a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007726:	4b2f      	ldr	r3, [pc, #188]	; (80077e4 <xPortStartScheduler+0x134>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	3b01      	subs	r3, #1
 800772c:	4a2d      	ldr	r2, [pc, #180]	; (80077e4 <xPortStartScheduler+0x134>)
 800772e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007730:	78fb      	ldrb	r3, [r7, #3]
 8007732:	b2db      	uxtb	r3, r3
 8007734:	005b      	lsls	r3, r3, #1
 8007736:	b2db      	uxtb	r3, r3
 8007738:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800773a:	78fb      	ldrb	r3, [r7, #3]
 800773c:	b2db      	uxtb	r3, r3
 800773e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007742:	2b80      	cmp	r3, #128	; 0x80
 8007744:	d0ef      	beq.n	8007726 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007746:	4b27      	ldr	r3, [pc, #156]	; (80077e4 <xPortStartScheduler+0x134>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f1c3 0307 	rsb	r3, r3, #7
 800774e:	2b04      	cmp	r3, #4
 8007750:	d00a      	beq.n	8007768 <xPortStartScheduler+0xb8>
	__asm volatile
 8007752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	60bb      	str	r3, [r7, #8]
}
 8007764:	bf00      	nop
 8007766:	e7fe      	b.n	8007766 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007768:	4b1e      	ldr	r3, [pc, #120]	; (80077e4 <xPortStartScheduler+0x134>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	021b      	lsls	r3, r3, #8
 800776e:	4a1d      	ldr	r2, [pc, #116]	; (80077e4 <xPortStartScheduler+0x134>)
 8007770:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007772:	4b1c      	ldr	r3, [pc, #112]	; (80077e4 <xPortStartScheduler+0x134>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800777a:	4a1a      	ldr	r2, [pc, #104]	; (80077e4 <xPortStartScheduler+0x134>)
 800777c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	b2da      	uxtb	r2, r3
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007786:	4b18      	ldr	r3, [pc, #96]	; (80077e8 <xPortStartScheduler+0x138>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a17      	ldr	r2, [pc, #92]	; (80077e8 <xPortStartScheduler+0x138>)
 800778c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007790:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007792:	4b15      	ldr	r3, [pc, #84]	; (80077e8 <xPortStartScheduler+0x138>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a14      	ldr	r2, [pc, #80]	; (80077e8 <xPortStartScheduler+0x138>)
 8007798:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800779c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800779e:	f000 f8dd 	bl	800795c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80077a2:	4b12      	ldr	r3, [pc, #72]	; (80077ec <xPortStartScheduler+0x13c>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80077a8:	f000 f8fc 	bl	80079a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80077ac:	4b10      	ldr	r3, [pc, #64]	; (80077f0 <xPortStartScheduler+0x140>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a0f      	ldr	r2, [pc, #60]	; (80077f0 <xPortStartScheduler+0x140>)
 80077b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80077b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80077b8:	f7ff ff66 	bl	8007688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80077bc:	f7ff fd56 	bl	800726c <vTaskSwitchContext>
	prvTaskExitError();
 80077c0:	f7ff ff20 	bl	8007604 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3718      	adds	r7, #24
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	e000ed00 	.word	0xe000ed00
 80077d4:	410fc271 	.word	0x410fc271
 80077d8:	410fc270 	.word	0x410fc270
 80077dc:	e000e400 	.word	0xe000e400
 80077e0:	20000668 	.word	0x20000668
 80077e4:	2000066c 	.word	0x2000066c
 80077e8:	e000ed20 	.word	0xe000ed20
 80077ec:	200000d0 	.word	0x200000d0
 80077f0:	e000ef34 	.word	0xe000ef34

080077f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
	__asm volatile
 80077fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	607b      	str	r3, [r7, #4]
}
 800780c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800780e:	4b0f      	ldr	r3, [pc, #60]	; (800784c <vPortEnterCritical+0x58>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	3301      	adds	r3, #1
 8007814:	4a0d      	ldr	r2, [pc, #52]	; (800784c <vPortEnterCritical+0x58>)
 8007816:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007818:	4b0c      	ldr	r3, [pc, #48]	; (800784c <vPortEnterCritical+0x58>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d10f      	bne.n	8007840 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007820:	4b0b      	ldr	r3, [pc, #44]	; (8007850 <vPortEnterCritical+0x5c>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	b2db      	uxtb	r3, r3
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00a      	beq.n	8007840 <vPortEnterCritical+0x4c>
	__asm volatile
 800782a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782e:	f383 8811 	msr	BASEPRI, r3
 8007832:	f3bf 8f6f 	isb	sy
 8007836:	f3bf 8f4f 	dsb	sy
 800783a:	603b      	str	r3, [r7, #0]
}
 800783c:	bf00      	nop
 800783e:	e7fe      	b.n	800783e <vPortEnterCritical+0x4a>
	}
}
 8007840:	bf00      	nop
 8007842:	370c      	adds	r7, #12
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	200000d0 	.word	0x200000d0
 8007850:	e000ed04 	.word	0xe000ed04

08007854 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800785a:	4b12      	ldr	r3, [pc, #72]	; (80078a4 <vPortExitCritical+0x50>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10a      	bne.n	8007878 <vPortExitCritical+0x24>
	__asm volatile
 8007862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007866:	f383 8811 	msr	BASEPRI, r3
 800786a:	f3bf 8f6f 	isb	sy
 800786e:	f3bf 8f4f 	dsb	sy
 8007872:	607b      	str	r3, [r7, #4]
}
 8007874:	bf00      	nop
 8007876:	e7fe      	b.n	8007876 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007878:	4b0a      	ldr	r3, [pc, #40]	; (80078a4 <vPortExitCritical+0x50>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	3b01      	subs	r3, #1
 800787e:	4a09      	ldr	r2, [pc, #36]	; (80078a4 <vPortExitCritical+0x50>)
 8007880:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007882:	4b08      	ldr	r3, [pc, #32]	; (80078a4 <vPortExitCritical+0x50>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d105      	bne.n	8007896 <vPortExitCritical+0x42>
 800788a:	2300      	movs	r3, #0
 800788c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007894:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007896:	bf00      	nop
 8007898:	370c      	adds	r7, #12
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	200000d0 	.word	0x200000d0
	...

080078b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80078b0:	f3ef 8009 	mrs	r0, PSP
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	4b15      	ldr	r3, [pc, #84]	; (8007910 <pxCurrentTCBConst>)
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	f01e 0f10 	tst.w	lr, #16
 80078c0:	bf08      	it	eq
 80078c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80078c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ca:	6010      	str	r0, [r2, #0]
 80078cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80078d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80078d4:	f380 8811 	msr	BASEPRI, r0
 80078d8:	f3bf 8f4f 	dsb	sy
 80078dc:	f3bf 8f6f 	isb	sy
 80078e0:	f7ff fcc4 	bl	800726c <vTaskSwitchContext>
 80078e4:	f04f 0000 	mov.w	r0, #0
 80078e8:	f380 8811 	msr	BASEPRI, r0
 80078ec:	bc09      	pop	{r0, r3}
 80078ee:	6819      	ldr	r1, [r3, #0]
 80078f0:	6808      	ldr	r0, [r1, #0]
 80078f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f6:	f01e 0f10 	tst.w	lr, #16
 80078fa:	bf08      	it	eq
 80078fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007900:	f380 8809 	msr	PSP, r0
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	f3af 8000 	nop.w

08007910 <pxCurrentTCBConst>:
 8007910:	2000053c 	.word	0x2000053c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007914:	bf00      	nop
 8007916:	bf00      	nop

08007918 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
	__asm volatile
 800791e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007922:	f383 8811 	msr	BASEPRI, r3
 8007926:	f3bf 8f6f 	isb	sy
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	607b      	str	r3, [r7, #4]
}
 8007930:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007932:	f7ff fbe3 	bl	80070fc <xTaskIncrementTick>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d003      	beq.n	8007944 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800793c:	4b06      	ldr	r3, [pc, #24]	; (8007958 <SysTick_Handler+0x40>)
 800793e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007942:	601a      	str	r2, [r3, #0]
 8007944:	2300      	movs	r3, #0
 8007946:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	f383 8811 	msr	BASEPRI, r3
}
 800794e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007950:	bf00      	nop
 8007952:	3708      	adds	r7, #8
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	e000ed04 	.word	0xe000ed04

0800795c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800795c:	b480      	push	{r7}
 800795e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007960:	4b0b      	ldr	r3, [pc, #44]	; (8007990 <vPortSetupTimerInterrupt+0x34>)
 8007962:	2200      	movs	r2, #0
 8007964:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007966:	4b0b      	ldr	r3, [pc, #44]	; (8007994 <vPortSetupTimerInterrupt+0x38>)
 8007968:	2200      	movs	r2, #0
 800796a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800796c:	4b0a      	ldr	r3, [pc, #40]	; (8007998 <vPortSetupTimerInterrupt+0x3c>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a0a      	ldr	r2, [pc, #40]	; (800799c <vPortSetupTimerInterrupt+0x40>)
 8007972:	fba2 2303 	umull	r2, r3, r2, r3
 8007976:	099b      	lsrs	r3, r3, #6
 8007978:	4a09      	ldr	r2, [pc, #36]	; (80079a0 <vPortSetupTimerInterrupt+0x44>)
 800797a:	3b01      	subs	r3, #1
 800797c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800797e:	4b04      	ldr	r3, [pc, #16]	; (8007990 <vPortSetupTimerInterrupt+0x34>)
 8007980:	2207      	movs	r2, #7
 8007982:	601a      	str	r2, [r3, #0]
}
 8007984:	bf00      	nop
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	e000e010 	.word	0xe000e010
 8007994:	e000e018 	.word	0xe000e018
 8007998:	200000c4 	.word	0x200000c4
 800799c:	10624dd3 	.word	0x10624dd3
 80079a0:	e000e014 	.word	0xe000e014

080079a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80079a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80079b4 <vPortEnableVFP+0x10>
 80079a8:	6801      	ldr	r1, [r0, #0]
 80079aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80079ae:	6001      	str	r1, [r0, #0]
 80079b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80079b2:	bf00      	nop
 80079b4:	e000ed88 	.word	0xe000ed88

080079b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b08a      	sub	sp, #40	; 0x28
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80079c0:	2300      	movs	r3, #0
 80079c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80079c4:	f7ff faf0 	bl	8006fa8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80079c8:	4b5b      	ldr	r3, [pc, #364]	; (8007b38 <pvPortMalloc+0x180>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80079d0:	f000 f920 	bl	8007c14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80079d4:	4b59      	ldr	r3, [pc, #356]	; (8007b3c <pvPortMalloc+0x184>)
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4013      	ands	r3, r2
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f040 8093 	bne.w	8007b08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d01d      	beq.n	8007a24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80079e8:	2208      	movs	r2, #8
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4413      	add	r3, r2
 80079ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f003 0307 	and.w	r3, r3, #7
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d014      	beq.n	8007a24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f023 0307 	bic.w	r3, r3, #7
 8007a00:	3308      	adds	r3, #8
 8007a02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f003 0307 	and.w	r3, r3, #7
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00a      	beq.n	8007a24 <pvPortMalloc+0x6c>
	__asm volatile
 8007a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a12:	f383 8811 	msr	BASEPRI, r3
 8007a16:	f3bf 8f6f 	isb	sy
 8007a1a:	f3bf 8f4f 	dsb	sy
 8007a1e:	617b      	str	r3, [r7, #20]
}
 8007a20:	bf00      	nop
 8007a22:	e7fe      	b.n	8007a22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d06e      	beq.n	8007b08 <pvPortMalloc+0x150>
 8007a2a:	4b45      	ldr	r3, [pc, #276]	; (8007b40 <pvPortMalloc+0x188>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d869      	bhi.n	8007b08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007a34:	4b43      	ldr	r3, [pc, #268]	; (8007b44 <pvPortMalloc+0x18c>)
 8007a36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007a38:	4b42      	ldr	r3, [pc, #264]	; (8007b44 <pvPortMalloc+0x18c>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a3e:	e004      	b.n	8007a4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d903      	bls.n	8007a5c <pvPortMalloc+0xa4>
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1f1      	bne.n	8007a40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007a5c:	4b36      	ldr	r3, [pc, #216]	; (8007b38 <pvPortMalloc+0x180>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d050      	beq.n	8007b08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007a66:	6a3b      	ldr	r3, [r7, #32]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2208      	movs	r2, #8
 8007a6c:	4413      	add	r3, r2
 8007a6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	6a3b      	ldr	r3, [r7, #32]
 8007a76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7a:	685a      	ldr	r2, [r3, #4]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	1ad2      	subs	r2, r2, r3
 8007a80:	2308      	movs	r3, #8
 8007a82:	005b      	lsls	r3, r3, #1
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d91f      	bls.n	8007ac8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	f003 0307 	and.w	r3, r3, #7
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00a      	beq.n	8007ab0 <pvPortMalloc+0xf8>
	__asm volatile
 8007a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9e:	f383 8811 	msr	BASEPRI, r3
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	f3bf 8f4f 	dsb	sy
 8007aaa:	613b      	str	r3, [r7, #16]
}
 8007aac:	bf00      	nop
 8007aae:	e7fe      	b.n	8007aae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab2:	685a      	ldr	r2, [r3, #4]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	1ad2      	subs	r2, r2, r3
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007ac2:	69b8      	ldr	r0, [r7, #24]
 8007ac4:	f000 f908 	bl	8007cd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ac8:	4b1d      	ldr	r3, [pc, #116]	; (8007b40 <pvPortMalloc+0x188>)
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	1ad3      	subs	r3, r2, r3
 8007ad2:	4a1b      	ldr	r2, [pc, #108]	; (8007b40 <pvPortMalloc+0x188>)
 8007ad4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ad6:	4b1a      	ldr	r3, [pc, #104]	; (8007b40 <pvPortMalloc+0x188>)
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	4b1b      	ldr	r3, [pc, #108]	; (8007b48 <pvPortMalloc+0x190>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d203      	bcs.n	8007aea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ae2:	4b17      	ldr	r3, [pc, #92]	; (8007b40 <pvPortMalloc+0x188>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a18      	ldr	r2, [pc, #96]	; (8007b48 <pvPortMalloc+0x190>)
 8007ae8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aec:	685a      	ldr	r2, [r3, #4]
 8007aee:	4b13      	ldr	r3, [pc, #76]	; (8007b3c <pvPortMalloc+0x184>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	431a      	orrs	r2, r3
 8007af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afa:	2200      	movs	r2, #0
 8007afc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007afe:	4b13      	ldr	r3, [pc, #76]	; (8007b4c <pvPortMalloc+0x194>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	3301      	adds	r3, #1
 8007b04:	4a11      	ldr	r2, [pc, #68]	; (8007b4c <pvPortMalloc+0x194>)
 8007b06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b08:	f7ff fa5c 	bl	8006fc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	f003 0307 	and.w	r3, r3, #7
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00a      	beq.n	8007b2c <pvPortMalloc+0x174>
	__asm volatile
 8007b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1a:	f383 8811 	msr	BASEPRI, r3
 8007b1e:	f3bf 8f6f 	isb	sy
 8007b22:	f3bf 8f4f 	dsb	sy
 8007b26:	60fb      	str	r3, [r7, #12]
}
 8007b28:	bf00      	nop
 8007b2a:	e7fe      	b.n	8007b2a <pvPortMalloc+0x172>
	return pvReturn;
 8007b2c:	69fb      	ldr	r3, [r7, #28]
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3728      	adds	r7, #40	; 0x28
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	20001230 	.word	0x20001230
 8007b3c:	20001244 	.word	0x20001244
 8007b40:	20001234 	.word	0x20001234
 8007b44:	20001228 	.word	0x20001228
 8007b48:	20001238 	.word	0x20001238
 8007b4c:	2000123c 	.word	0x2000123c

08007b50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b086      	sub	sp, #24
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d04d      	beq.n	8007bfe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007b62:	2308      	movs	r3, #8
 8007b64:	425b      	negs	r3, r3
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	4413      	add	r3, r2
 8007b6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	685a      	ldr	r2, [r3, #4]
 8007b74:	4b24      	ldr	r3, [pc, #144]	; (8007c08 <vPortFree+0xb8>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4013      	ands	r3, r2
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d10a      	bne.n	8007b94 <vPortFree+0x44>
	__asm volatile
 8007b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b82:	f383 8811 	msr	BASEPRI, r3
 8007b86:	f3bf 8f6f 	isb	sy
 8007b8a:	f3bf 8f4f 	dsb	sy
 8007b8e:	60fb      	str	r3, [r7, #12]
}
 8007b90:	bf00      	nop
 8007b92:	e7fe      	b.n	8007b92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00a      	beq.n	8007bb2 <vPortFree+0x62>
	__asm volatile
 8007b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba0:	f383 8811 	msr	BASEPRI, r3
 8007ba4:	f3bf 8f6f 	isb	sy
 8007ba8:	f3bf 8f4f 	dsb	sy
 8007bac:	60bb      	str	r3, [r7, #8]
}
 8007bae:	bf00      	nop
 8007bb0:	e7fe      	b.n	8007bb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	685a      	ldr	r2, [r3, #4]
 8007bb6:	4b14      	ldr	r3, [pc, #80]	; (8007c08 <vPortFree+0xb8>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4013      	ands	r3, r2
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d01e      	beq.n	8007bfe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d11a      	bne.n	8007bfe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	4b0e      	ldr	r3, [pc, #56]	; (8007c08 <vPortFree+0xb8>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	43db      	mvns	r3, r3
 8007bd2:	401a      	ands	r2, r3
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007bd8:	f7ff f9e6 	bl	8006fa8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	685a      	ldr	r2, [r3, #4]
 8007be0:	4b0a      	ldr	r3, [pc, #40]	; (8007c0c <vPortFree+0xbc>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4413      	add	r3, r2
 8007be6:	4a09      	ldr	r2, [pc, #36]	; (8007c0c <vPortFree+0xbc>)
 8007be8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007bea:	6938      	ldr	r0, [r7, #16]
 8007bec:	f000 f874 	bl	8007cd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007bf0:	4b07      	ldr	r3, [pc, #28]	; (8007c10 <vPortFree+0xc0>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	4a06      	ldr	r2, [pc, #24]	; (8007c10 <vPortFree+0xc0>)
 8007bf8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007bfa:	f7ff f9e3 	bl	8006fc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007bfe:	bf00      	nop
 8007c00:	3718      	adds	r7, #24
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	20001244 	.word	0x20001244
 8007c0c:	20001234 	.word	0x20001234
 8007c10:	20001240 	.word	0x20001240

08007c14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c1a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007c1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c20:	4b27      	ldr	r3, [pc, #156]	; (8007cc0 <prvHeapInit+0xac>)
 8007c22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f003 0307 	and.w	r3, r3, #7
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00c      	beq.n	8007c48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	3307      	adds	r3, #7
 8007c32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f023 0307 	bic.w	r3, r3, #7
 8007c3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	4a1f      	ldr	r2, [pc, #124]	; (8007cc0 <prvHeapInit+0xac>)
 8007c44:	4413      	add	r3, r2
 8007c46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007c4c:	4a1d      	ldr	r2, [pc, #116]	; (8007cc4 <prvHeapInit+0xb0>)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007c52:	4b1c      	ldr	r3, [pc, #112]	; (8007cc4 <prvHeapInit+0xb0>)
 8007c54:	2200      	movs	r2, #0
 8007c56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	68ba      	ldr	r2, [r7, #8]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007c60:	2208      	movs	r2, #8
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	1a9b      	subs	r3, r3, r2
 8007c66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f023 0307 	bic.w	r3, r3, #7
 8007c6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	4a15      	ldr	r2, [pc, #84]	; (8007cc8 <prvHeapInit+0xb4>)
 8007c74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007c76:	4b14      	ldr	r3, [pc, #80]	; (8007cc8 <prvHeapInit+0xb4>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007c7e:	4b12      	ldr	r3, [pc, #72]	; (8007cc8 <prvHeapInit+0xb4>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2200      	movs	r2, #0
 8007c84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	1ad2      	subs	r2, r2, r3
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007c94:	4b0c      	ldr	r3, [pc, #48]	; (8007cc8 <prvHeapInit+0xb4>)
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	4a0a      	ldr	r2, [pc, #40]	; (8007ccc <prvHeapInit+0xb8>)
 8007ca2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	4a09      	ldr	r2, [pc, #36]	; (8007cd0 <prvHeapInit+0xbc>)
 8007caa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007cac:	4b09      	ldr	r3, [pc, #36]	; (8007cd4 <prvHeapInit+0xc0>)
 8007cae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007cb2:	601a      	str	r2, [r3, #0]
}
 8007cb4:	bf00      	nop
 8007cb6:	3714      	adds	r7, #20
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr
 8007cc0:	20000670 	.word	0x20000670
 8007cc4:	20001228 	.word	0x20001228
 8007cc8:	20001230 	.word	0x20001230
 8007ccc:	20001238 	.word	0x20001238
 8007cd0:	20001234 	.word	0x20001234
 8007cd4:	20001244 	.word	0x20001244

08007cd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ce0:	4b28      	ldr	r3, [pc, #160]	; (8007d84 <prvInsertBlockIntoFreeList+0xac>)
 8007ce2:	60fb      	str	r3, [r7, #12]
 8007ce4:	e002      	b.n	8007cec <prvInsertBlockIntoFreeList+0x14>
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	60fb      	str	r3, [r7, #12]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d8f7      	bhi.n	8007ce6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	68ba      	ldr	r2, [r7, #8]
 8007d00:	4413      	add	r3, r2
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d108      	bne.n	8007d1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	685a      	ldr	r2, [r3, #4]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	441a      	add	r2, r3
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	68ba      	ldr	r2, [r7, #8]
 8007d24:	441a      	add	r2, r3
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d118      	bne.n	8007d60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	4b15      	ldr	r3, [pc, #84]	; (8007d88 <prvInsertBlockIntoFreeList+0xb0>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d00d      	beq.n	8007d56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685a      	ldr	r2, [r3, #4]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	441a      	add	r2, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	601a      	str	r2, [r3, #0]
 8007d54:	e008      	b.n	8007d68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007d56:	4b0c      	ldr	r3, [pc, #48]	; (8007d88 <prvInsertBlockIntoFreeList+0xb0>)
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	e003      	b.n	8007d68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d002      	beq.n	8007d76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d76:	bf00      	nop
 8007d78:	3714      	adds	r7, #20
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
 8007d82:	bf00      	nop
 8007d84:	20001228 	.word	0x20001228
 8007d88:	20001230 	.word	0x20001230

08007d8c <__errno>:
 8007d8c:	4b01      	ldr	r3, [pc, #4]	; (8007d94 <__errno+0x8>)
 8007d8e:	6818      	ldr	r0, [r3, #0]
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	200000d4 	.word	0x200000d4

08007d98 <__libc_init_array>:
 8007d98:	b570      	push	{r4, r5, r6, lr}
 8007d9a:	4d0d      	ldr	r5, [pc, #52]	; (8007dd0 <__libc_init_array+0x38>)
 8007d9c:	4c0d      	ldr	r4, [pc, #52]	; (8007dd4 <__libc_init_array+0x3c>)
 8007d9e:	1b64      	subs	r4, r4, r5
 8007da0:	10a4      	asrs	r4, r4, #2
 8007da2:	2600      	movs	r6, #0
 8007da4:	42a6      	cmp	r6, r4
 8007da6:	d109      	bne.n	8007dbc <__libc_init_array+0x24>
 8007da8:	4d0b      	ldr	r5, [pc, #44]	; (8007dd8 <__libc_init_array+0x40>)
 8007daa:	4c0c      	ldr	r4, [pc, #48]	; (8007ddc <__libc_init_array+0x44>)
 8007dac:	f002 feb4 	bl	800ab18 <_init>
 8007db0:	1b64      	subs	r4, r4, r5
 8007db2:	10a4      	asrs	r4, r4, #2
 8007db4:	2600      	movs	r6, #0
 8007db6:	42a6      	cmp	r6, r4
 8007db8:	d105      	bne.n	8007dc6 <__libc_init_array+0x2e>
 8007dba:	bd70      	pop	{r4, r5, r6, pc}
 8007dbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dc0:	4798      	blx	r3
 8007dc2:	3601      	adds	r6, #1
 8007dc4:	e7ee      	b.n	8007da4 <__libc_init_array+0xc>
 8007dc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dca:	4798      	blx	r3
 8007dcc:	3601      	adds	r6, #1
 8007dce:	e7f2      	b.n	8007db6 <__libc_init_array+0x1e>
 8007dd0:	0800b0a4 	.word	0x0800b0a4
 8007dd4:	0800b0a4 	.word	0x0800b0a4
 8007dd8:	0800b0a4 	.word	0x0800b0a4
 8007ddc:	0800b0a8 	.word	0x0800b0a8

08007de0 <memcpy>:
 8007de0:	440a      	add	r2, r1
 8007de2:	4291      	cmp	r1, r2
 8007de4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007de8:	d100      	bne.n	8007dec <memcpy+0xc>
 8007dea:	4770      	bx	lr
 8007dec:	b510      	push	{r4, lr}
 8007dee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007df2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007df6:	4291      	cmp	r1, r2
 8007df8:	d1f9      	bne.n	8007dee <memcpy+0xe>
 8007dfa:	bd10      	pop	{r4, pc}

08007dfc <memset>:
 8007dfc:	4402      	add	r2, r0
 8007dfe:	4603      	mov	r3, r0
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d100      	bne.n	8007e06 <memset+0xa>
 8007e04:	4770      	bx	lr
 8007e06:	f803 1b01 	strb.w	r1, [r3], #1
 8007e0a:	e7f9      	b.n	8007e00 <memset+0x4>

08007e0c <__cvt>:
 8007e0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e10:	ec55 4b10 	vmov	r4, r5, d0
 8007e14:	2d00      	cmp	r5, #0
 8007e16:	460e      	mov	r6, r1
 8007e18:	4619      	mov	r1, r3
 8007e1a:	462b      	mov	r3, r5
 8007e1c:	bfbb      	ittet	lt
 8007e1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007e22:	461d      	movlt	r5, r3
 8007e24:	2300      	movge	r3, #0
 8007e26:	232d      	movlt	r3, #45	; 0x2d
 8007e28:	700b      	strb	r3, [r1, #0]
 8007e2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e2c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007e30:	4691      	mov	r9, r2
 8007e32:	f023 0820 	bic.w	r8, r3, #32
 8007e36:	bfbc      	itt	lt
 8007e38:	4622      	movlt	r2, r4
 8007e3a:	4614      	movlt	r4, r2
 8007e3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e40:	d005      	beq.n	8007e4e <__cvt+0x42>
 8007e42:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007e46:	d100      	bne.n	8007e4a <__cvt+0x3e>
 8007e48:	3601      	adds	r6, #1
 8007e4a:	2102      	movs	r1, #2
 8007e4c:	e000      	b.n	8007e50 <__cvt+0x44>
 8007e4e:	2103      	movs	r1, #3
 8007e50:	ab03      	add	r3, sp, #12
 8007e52:	9301      	str	r3, [sp, #4]
 8007e54:	ab02      	add	r3, sp, #8
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	ec45 4b10 	vmov	d0, r4, r5
 8007e5c:	4653      	mov	r3, sl
 8007e5e:	4632      	mov	r2, r6
 8007e60:	f000 fcea 	bl	8008838 <_dtoa_r>
 8007e64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007e68:	4607      	mov	r7, r0
 8007e6a:	d102      	bne.n	8007e72 <__cvt+0x66>
 8007e6c:	f019 0f01 	tst.w	r9, #1
 8007e70:	d022      	beq.n	8007eb8 <__cvt+0xac>
 8007e72:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e76:	eb07 0906 	add.w	r9, r7, r6
 8007e7a:	d110      	bne.n	8007e9e <__cvt+0x92>
 8007e7c:	783b      	ldrb	r3, [r7, #0]
 8007e7e:	2b30      	cmp	r3, #48	; 0x30
 8007e80:	d10a      	bne.n	8007e98 <__cvt+0x8c>
 8007e82:	2200      	movs	r2, #0
 8007e84:	2300      	movs	r3, #0
 8007e86:	4620      	mov	r0, r4
 8007e88:	4629      	mov	r1, r5
 8007e8a:	f7f8 fe35 	bl	8000af8 <__aeabi_dcmpeq>
 8007e8e:	b918      	cbnz	r0, 8007e98 <__cvt+0x8c>
 8007e90:	f1c6 0601 	rsb	r6, r6, #1
 8007e94:	f8ca 6000 	str.w	r6, [sl]
 8007e98:	f8da 3000 	ldr.w	r3, [sl]
 8007e9c:	4499      	add	r9, r3
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	4629      	mov	r1, r5
 8007ea6:	f7f8 fe27 	bl	8000af8 <__aeabi_dcmpeq>
 8007eaa:	b108      	cbz	r0, 8007eb0 <__cvt+0xa4>
 8007eac:	f8cd 900c 	str.w	r9, [sp, #12]
 8007eb0:	2230      	movs	r2, #48	; 0x30
 8007eb2:	9b03      	ldr	r3, [sp, #12]
 8007eb4:	454b      	cmp	r3, r9
 8007eb6:	d307      	bcc.n	8007ec8 <__cvt+0xbc>
 8007eb8:	9b03      	ldr	r3, [sp, #12]
 8007eba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ebc:	1bdb      	subs	r3, r3, r7
 8007ebe:	4638      	mov	r0, r7
 8007ec0:	6013      	str	r3, [r2, #0]
 8007ec2:	b004      	add	sp, #16
 8007ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ec8:	1c59      	adds	r1, r3, #1
 8007eca:	9103      	str	r1, [sp, #12]
 8007ecc:	701a      	strb	r2, [r3, #0]
 8007ece:	e7f0      	b.n	8007eb2 <__cvt+0xa6>

08007ed0 <__exponent>:
 8007ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2900      	cmp	r1, #0
 8007ed6:	bfb8      	it	lt
 8007ed8:	4249      	neglt	r1, r1
 8007eda:	f803 2b02 	strb.w	r2, [r3], #2
 8007ede:	bfb4      	ite	lt
 8007ee0:	222d      	movlt	r2, #45	; 0x2d
 8007ee2:	222b      	movge	r2, #43	; 0x2b
 8007ee4:	2909      	cmp	r1, #9
 8007ee6:	7042      	strb	r2, [r0, #1]
 8007ee8:	dd2a      	ble.n	8007f40 <__exponent+0x70>
 8007eea:	f10d 0407 	add.w	r4, sp, #7
 8007eee:	46a4      	mov	ip, r4
 8007ef0:	270a      	movs	r7, #10
 8007ef2:	46a6      	mov	lr, r4
 8007ef4:	460a      	mov	r2, r1
 8007ef6:	fb91 f6f7 	sdiv	r6, r1, r7
 8007efa:	fb07 1516 	mls	r5, r7, r6, r1
 8007efe:	3530      	adds	r5, #48	; 0x30
 8007f00:	2a63      	cmp	r2, #99	; 0x63
 8007f02:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007f06:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007f0a:	4631      	mov	r1, r6
 8007f0c:	dcf1      	bgt.n	8007ef2 <__exponent+0x22>
 8007f0e:	3130      	adds	r1, #48	; 0x30
 8007f10:	f1ae 0502 	sub.w	r5, lr, #2
 8007f14:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007f18:	1c44      	adds	r4, r0, #1
 8007f1a:	4629      	mov	r1, r5
 8007f1c:	4561      	cmp	r1, ip
 8007f1e:	d30a      	bcc.n	8007f36 <__exponent+0x66>
 8007f20:	f10d 0209 	add.w	r2, sp, #9
 8007f24:	eba2 020e 	sub.w	r2, r2, lr
 8007f28:	4565      	cmp	r5, ip
 8007f2a:	bf88      	it	hi
 8007f2c:	2200      	movhi	r2, #0
 8007f2e:	4413      	add	r3, r2
 8007f30:	1a18      	subs	r0, r3, r0
 8007f32:	b003      	add	sp, #12
 8007f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f3a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007f3e:	e7ed      	b.n	8007f1c <__exponent+0x4c>
 8007f40:	2330      	movs	r3, #48	; 0x30
 8007f42:	3130      	adds	r1, #48	; 0x30
 8007f44:	7083      	strb	r3, [r0, #2]
 8007f46:	70c1      	strb	r1, [r0, #3]
 8007f48:	1d03      	adds	r3, r0, #4
 8007f4a:	e7f1      	b.n	8007f30 <__exponent+0x60>

08007f4c <_printf_float>:
 8007f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f50:	ed2d 8b02 	vpush	{d8}
 8007f54:	b08d      	sub	sp, #52	; 0x34
 8007f56:	460c      	mov	r4, r1
 8007f58:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007f5c:	4616      	mov	r6, r2
 8007f5e:	461f      	mov	r7, r3
 8007f60:	4605      	mov	r5, r0
 8007f62:	f001 fa55 	bl	8009410 <_localeconv_r>
 8007f66:	f8d0 a000 	ldr.w	sl, [r0]
 8007f6a:	4650      	mov	r0, sl
 8007f6c:	f7f8 f948 	bl	8000200 <strlen>
 8007f70:	2300      	movs	r3, #0
 8007f72:	930a      	str	r3, [sp, #40]	; 0x28
 8007f74:	6823      	ldr	r3, [r4, #0]
 8007f76:	9305      	str	r3, [sp, #20]
 8007f78:	f8d8 3000 	ldr.w	r3, [r8]
 8007f7c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007f80:	3307      	adds	r3, #7
 8007f82:	f023 0307 	bic.w	r3, r3, #7
 8007f86:	f103 0208 	add.w	r2, r3, #8
 8007f8a:	f8c8 2000 	str.w	r2, [r8]
 8007f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f92:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007f96:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007f9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f9e:	9307      	str	r3, [sp, #28]
 8007fa0:	f8cd 8018 	str.w	r8, [sp, #24]
 8007fa4:	ee08 0a10 	vmov	s16, r0
 8007fa8:	4b9f      	ldr	r3, [pc, #636]	; (8008228 <_printf_float+0x2dc>)
 8007faa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fb2:	f7f8 fdd3 	bl	8000b5c <__aeabi_dcmpun>
 8007fb6:	bb88      	cbnz	r0, 800801c <_printf_float+0xd0>
 8007fb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fbc:	4b9a      	ldr	r3, [pc, #616]	; (8008228 <_printf_float+0x2dc>)
 8007fbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fc2:	f7f8 fdad 	bl	8000b20 <__aeabi_dcmple>
 8007fc6:	bb48      	cbnz	r0, 800801c <_printf_float+0xd0>
 8007fc8:	2200      	movs	r2, #0
 8007fca:	2300      	movs	r3, #0
 8007fcc:	4640      	mov	r0, r8
 8007fce:	4649      	mov	r1, r9
 8007fd0:	f7f8 fd9c 	bl	8000b0c <__aeabi_dcmplt>
 8007fd4:	b110      	cbz	r0, 8007fdc <_printf_float+0x90>
 8007fd6:	232d      	movs	r3, #45	; 0x2d
 8007fd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fdc:	4b93      	ldr	r3, [pc, #588]	; (800822c <_printf_float+0x2e0>)
 8007fde:	4894      	ldr	r0, [pc, #592]	; (8008230 <_printf_float+0x2e4>)
 8007fe0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007fe4:	bf94      	ite	ls
 8007fe6:	4698      	movls	r8, r3
 8007fe8:	4680      	movhi	r8, r0
 8007fea:	2303      	movs	r3, #3
 8007fec:	6123      	str	r3, [r4, #16]
 8007fee:	9b05      	ldr	r3, [sp, #20]
 8007ff0:	f023 0204 	bic.w	r2, r3, #4
 8007ff4:	6022      	str	r2, [r4, #0]
 8007ff6:	f04f 0900 	mov.w	r9, #0
 8007ffa:	9700      	str	r7, [sp, #0]
 8007ffc:	4633      	mov	r3, r6
 8007ffe:	aa0b      	add	r2, sp, #44	; 0x2c
 8008000:	4621      	mov	r1, r4
 8008002:	4628      	mov	r0, r5
 8008004:	f000 f9d8 	bl	80083b8 <_printf_common>
 8008008:	3001      	adds	r0, #1
 800800a:	f040 8090 	bne.w	800812e <_printf_float+0x1e2>
 800800e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008012:	b00d      	add	sp, #52	; 0x34
 8008014:	ecbd 8b02 	vpop	{d8}
 8008018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800801c:	4642      	mov	r2, r8
 800801e:	464b      	mov	r3, r9
 8008020:	4640      	mov	r0, r8
 8008022:	4649      	mov	r1, r9
 8008024:	f7f8 fd9a 	bl	8000b5c <__aeabi_dcmpun>
 8008028:	b140      	cbz	r0, 800803c <_printf_float+0xf0>
 800802a:	464b      	mov	r3, r9
 800802c:	2b00      	cmp	r3, #0
 800802e:	bfbc      	itt	lt
 8008030:	232d      	movlt	r3, #45	; 0x2d
 8008032:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008036:	487f      	ldr	r0, [pc, #508]	; (8008234 <_printf_float+0x2e8>)
 8008038:	4b7f      	ldr	r3, [pc, #508]	; (8008238 <_printf_float+0x2ec>)
 800803a:	e7d1      	b.n	8007fe0 <_printf_float+0x94>
 800803c:	6863      	ldr	r3, [r4, #4]
 800803e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008042:	9206      	str	r2, [sp, #24]
 8008044:	1c5a      	adds	r2, r3, #1
 8008046:	d13f      	bne.n	80080c8 <_printf_float+0x17c>
 8008048:	2306      	movs	r3, #6
 800804a:	6063      	str	r3, [r4, #4]
 800804c:	9b05      	ldr	r3, [sp, #20]
 800804e:	6861      	ldr	r1, [r4, #4]
 8008050:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008054:	2300      	movs	r3, #0
 8008056:	9303      	str	r3, [sp, #12]
 8008058:	ab0a      	add	r3, sp, #40	; 0x28
 800805a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800805e:	ab09      	add	r3, sp, #36	; 0x24
 8008060:	ec49 8b10 	vmov	d0, r8, r9
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	6022      	str	r2, [r4, #0]
 8008068:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800806c:	4628      	mov	r0, r5
 800806e:	f7ff fecd 	bl	8007e0c <__cvt>
 8008072:	9b06      	ldr	r3, [sp, #24]
 8008074:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008076:	2b47      	cmp	r3, #71	; 0x47
 8008078:	4680      	mov	r8, r0
 800807a:	d108      	bne.n	800808e <_printf_float+0x142>
 800807c:	1cc8      	adds	r0, r1, #3
 800807e:	db02      	blt.n	8008086 <_printf_float+0x13a>
 8008080:	6863      	ldr	r3, [r4, #4]
 8008082:	4299      	cmp	r1, r3
 8008084:	dd41      	ble.n	800810a <_printf_float+0x1be>
 8008086:	f1ab 0b02 	sub.w	fp, fp, #2
 800808a:	fa5f fb8b 	uxtb.w	fp, fp
 800808e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008092:	d820      	bhi.n	80080d6 <_printf_float+0x18a>
 8008094:	3901      	subs	r1, #1
 8008096:	465a      	mov	r2, fp
 8008098:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800809c:	9109      	str	r1, [sp, #36]	; 0x24
 800809e:	f7ff ff17 	bl	8007ed0 <__exponent>
 80080a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080a4:	1813      	adds	r3, r2, r0
 80080a6:	2a01      	cmp	r2, #1
 80080a8:	4681      	mov	r9, r0
 80080aa:	6123      	str	r3, [r4, #16]
 80080ac:	dc02      	bgt.n	80080b4 <_printf_float+0x168>
 80080ae:	6822      	ldr	r2, [r4, #0]
 80080b0:	07d2      	lsls	r2, r2, #31
 80080b2:	d501      	bpl.n	80080b8 <_printf_float+0x16c>
 80080b4:	3301      	adds	r3, #1
 80080b6:	6123      	str	r3, [r4, #16]
 80080b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d09c      	beq.n	8007ffa <_printf_float+0xae>
 80080c0:	232d      	movs	r3, #45	; 0x2d
 80080c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080c6:	e798      	b.n	8007ffa <_printf_float+0xae>
 80080c8:	9a06      	ldr	r2, [sp, #24]
 80080ca:	2a47      	cmp	r2, #71	; 0x47
 80080cc:	d1be      	bne.n	800804c <_printf_float+0x100>
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d1bc      	bne.n	800804c <_printf_float+0x100>
 80080d2:	2301      	movs	r3, #1
 80080d4:	e7b9      	b.n	800804a <_printf_float+0xfe>
 80080d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80080da:	d118      	bne.n	800810e <_printf_float+0x1c2>
 80080dc:	2900      	cmp	r1, #0
 80080de:	6863      	ldr	r3, [r4, #4]
 80080e0:	dd0b      	ble.n	80080fa <_printf_float+0x1ae>
 80080e2:	6121      	str	r1, [r4, #16]
 80080e4:	b913      	cbnz	r3, 80080ec <_printf_float+0x1a0>
 80080e6:	6822      	ldr	r2, [r4, #0]
 80080e8:	07d0      	lsls	r0, r2, #31
 80080ea:	d502      	bpl.n	80080f2 <_printf_float+0x1a6>
 80080ec:	3301      	adds	r3, #1
 80080ee:	440b      	add	r3, r1
 80080f0:	6123      	str	r3, [r4, #16]
 80080f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80080f4:	f04f 0900 	mov.w	r9, #0
 80080f8:	e7de      	b.n	80080b8 <_printf_float+0x16c>
 80080fa:	b913      	cbnz	r3, 8008102 <_printf_float+0x1b6>
 80080fc:	6822      	ldr	r2, [r4, #0]
 80080fe:	07d2      	lsls	r2, r2, #31
 8008100:	d501      	bpl.n	8008106 <_printf_float+0x1ba>
 8008102:	3302      	adds	r3, #2
 8008104:	e7f4      	b.n	80080f0 <_printf_float+0x1a4>
 8008106:	2301      	movs	r3, #1
 8008108:	e7f2      	b.n	80080f0 <_printf_float+0x1a4>
 800810a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800810e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008110:	4299      	cmp	r1, r3
 8008112:	db05      	blt.n	8008120 <_printf_float+0x1d4>
 8008114:	6823      	ldr	r3, [r4, #0]
 8008116:	6121      	str	r1, [r4, #16]
 8008118:	07d8      	lsls	r0, r3, #31
 800811a:	d5ea      	bpl.n	80080f2 <_printf_float+0x1a6>
 800811c:	1c4b      	adds	r3, r1, #1
 800811e:	e7e7      	b.n	80080f0 <_printf_float+0x1a4>
 8008120:	2900      	cmp	r1, #0
 8008122:	bfd4      	ite	le
 8008124:	f1c1 0202 	rsble	r2, r1, #2
 8008128:	2201      	movgt	r2, #1
 800812a:	4413      	add	r3, r2
 800812c:	e7e0      	b.n	80080f0 <_printf_float+0x1a4>
 800812e:	6823      	ldr	r3, [r4, #0]
 8008130:	055a      	lsls	r2, r3, #21
 8008132:	d407      	bmi.n	8008144 <_printf_float+0x1f8>
 8008134:	6923      	ldr	r3, [r4, #16]
 8008136:	4642      	mov	r2, r8
 8008138:	4631      	mov	r1, r6
 800813a:	4628      	mov	r0, r5
 800813c:	47b8      	blx	r7
 800813e:	3001      	adds	r0, #1
 8008140:	d12c      	bne.n	800819c <_printf_float+0x250>
 8008142:	e764      	b.n	800800e <_printf_float+0xc2>
 8008144:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008148:	f240 80e0 	bls.w	800830c <_printf_float+0x3c0>
 800814c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008150:	2200      	movs	r2, #0
 8008152:	2300      	movs	r3, #0
 8008154:	f7f8 fcd0 	bl	8000af8 <__aeabi_dcmpeq>
 8008158:	2800      	cmp	r0, #0
 800815a:	d034      	beq.n	80081c6 <_printf_float+0x27a>
 800815c:	4a37      	ldr	r2, [pc, #220]	; (800823c <_printf_float+0x2f0>)
 800815e:	2301      	movs	r3, #1
 8008160:	4631      	mov	r1, r6
 8008162:	4628      	mov	r0, r5
 8008164:	47b8      	blx	r7
 8008166:	3001      	adds	r0, #1
 8008168:	f43f af51 	beq.w	800800e <_printf_float+0xc2>
 800816c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008170:	429a      	cmp	r2, r3
 8008172:	db02      	blt.n	800817a <_printf_float+0x22e>
 8008174:	6823      	ldr	r3, [r4, #0]
 8008176:	07d8      	lsls	r0, r3, #31
 8008178:	d510      	bpl.n	800819c <_printf_float+0x250>
 800817a:	ee18 3a10 	vmov	r3, s16
 800817e:	4652      	mov	r2, sl
 8008180:	4631      	mov	r1, r6
 8008182:	4628      	mov	r0, r5
 8008184:	47b8      	blx	r7
 8008186:	3001      	adds	r0, #1
 8008188:	f43f af41 	beq.w	800800e <_printf_float+0xc2>
 800818c:	f04f 0800 	mov.w	r8, #0
 8008190:	f104 091a 	add.w	r9, r4, #26
 8008194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008196:	3b01      	subs	r3, #1
 8008198:	4543      	cmp	r3, r8
 800819a:	dc09      	bgt.n	80081b0 <_printf_float+0x264>
 800819c:	6823      	ldr	r3, [r4, #0]
 800819e:	079b      	lsls	r3, r3, #30
 80081a0:	f100 8105 	bmi.w	80083ae <_printf_float+0x462>
 80081a4:	68e0      	ldr	r0, [r4, #12]
 80081a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081a8:	4298      	cmp	r0, r3
 80081aa:	bfb8      	it	lt
 80081ac:	4618      	movlt	r0, r3
 80081ae:	e730      	b.n	8008012 <_printf_float+0xc6>
 80081b0:	2301      	movs	r3, #1
 80081b2:	464a      	mov	r2, r9
 80081b4:	4631      	mov	r1, r6
 80081b6:	4628      	mov	r0, r5
 80081b8:	47b8      	blx	r7
 80081ba:	3001      	adds	r0, #1
 80081bc:	f43f af27 	beq.w	800800e <_printf_float+0xc2>
 80081c0:	f108 0801 	add.w	r8, r8, #1
 80081c4:	e7e6      	b.n	8008194 <_printf_float+0x248>
 80081c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	dc39      	bgt.n	8008240 <_printf_float+0x2f4>
 80081cc:	4a1b      	ldr	r2, [pc, #108]	; (800823c <_printf_float+0x2f0>)
 80081ce:	2301      	movs	r3, #1
 80081d0:	4631      	mov	r1, r6
 80081d2:	4628      	mov	r0, r5
 80081d4:	47b8      	blx	r7
 80081d6:	3001      	adds	r0, #1
 80081d8:	f43f af19 	beq.w	800800e <_printf_float+0xc2>
 80081dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081e0:	4313      	orrs	r3, r2
 80081e2:	d102      	bne.n	80081ea <_printf_float+0x29e>
 80081e4:	6823      	ldr	r3, [r4, #0]
 80081e6:	07d9      	lsls	r1, r3, #31
 80081e8:	d5d8      	bpl.n	800819c <_printf_float+0x250>
 80081ea:	ee18 3a10 	vmov	r3, s16
 80081ee:	4652      	mov	r2, sl
 80081f0:	4631      	mov	r1, r6
 80081f2:	4628      	mov	r0, r5
 80081f4:	47b8      	blx	r7
 80081f6:	3001      	adds	r0, #1
 80081f8:	f43f af09 	beq.w	800800e <_printf_float+0xc2>
 80081fc:	f04f 0900 	mov.w	r9, #0
 8008200:	f104 0a1a 	add.w	sl, r4, #26
 8008204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008206:	425b      	negs	r3, r3
 8008208:	454b      	cmp	r3, r9
 800820a:	dc01      	bgt.n	8008210 <_printf_float+0x2c4>
 800820c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800820e:	e792      	b.n	8008136 <_printf_float+0x1ea>
 8008210:	2301      	movs	r3, #1
 8008212:	4652      	mov	r2, sl
 8008214:	4631      	mov	r1, r6
 8008216:	4628      	mov	r0, r5
 8008218:	47b8      	blx	r7
 800821a:	3001      	adds	r0, #1
 800821c:	f43f aef7 	beq.w	800800e <_printf_float+0xc2>
 8008220:	f109 0901 	add.w	r9, r9, #1
 8008224:	e7ee      	b.n	8008204 <_printf_float+0x2b8>
 8008226:	bf00      	nop
 8008228:	7fefffff 	.word	0x7fefffff
 800822c:	0800acbc 	.word	0x0800acbc
 8008230:	0800acc0 	.word	0x0800acc0
 8008234:	0800acc8 	.word	0x0800acc8
 8008238:	0800acc4 	.word	0x0800acc4
 800823c:	0800accc 	.word	0x0800accc
 8008240:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008242:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008244:	429a      	cmp	r2, r3
 8008246:	bfa8      	it	ge
 8008248:	461a      	movge	r2, r3
 800824a:	2a00      	cmp	r2, #0
 800824c:	4691      	mov	r9, r2
 800824e:	dc37      	bgt.n	80082c0 <_printf_float+0x374>
 8008250:	f04f 0b00 	mov.w	fp, #0
 8008254:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008258:	f104 021a 	add.w	r2, r4, #26
 800825c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800825e:	9305      	str	r3, [sp, #20]
 8008260:	eba3 0309 	sub.w	r3, r3, r9
 8008264:	455b      	cmp	r3, fp
 8008266:	dc33      	bgt.n	80082d0 <_printf_float+0x384>
 8008268:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800826c:	429a      	cmp	r2, r3
 800826e:	db3b      	blt.n	80082e8 <_printf_float+0x39c>
 8008270:	6823      	ldr	r3, [r4, #0]
 8008272:	07da      	lsls	r2, r3, #31
 8008274:	d438      	bmi.n	80082e8 <_printf_float+0x39c>
 8008276:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008278:	9b05      	ldr	r3, [sp, #20]
 800827a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800827c:	1ad3      	subs	r3, r2, r3
 800827e:	eba2 0901 	sub.w	r9, r2, r1
 8008282:	4599      	cmp	r9, r3
 8008284:	bfa8      	it	ge
 8008286:	4699      	movge	r9, r3
 8008288:	f1b9 0f00 	cmp.w	r9, #0
 800828c:	dc35      	bgt.n	80082fa <_printf_float+0x3ae>
 800828e:	f04f 0800 	mov.w	r8, #0
 8008292:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008296:	f104 0a1a 	add.w	sl, r4, #26
 800829a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800829e:	1a9b      	subs	r3, r3, r2
 80082a0:	eba3 0309 	sub.w	r3, r3, r9
 80082a4:	4543      	cmp	r3, r8
 80082a6:	f77f af79 	ble.w	800819c <_printf_float+0x250>
 80082aa:	2301      	movs	r3, #1
 80082ac:	4652      	mov	r2, sl
 80082ae:	4631      	mov	r1, r6
 80082b0:	4628      	mov	r0, r5
 80082b2:	47b8      	blx	r7
 80082b4:	3001      	adds	r0, #1
 80082b6:	f43f aeaa 	beq.w	800800e <_printf_float+0xc2>
 80082ba:	f108 0801 	add.w	r8, r8, #1
 80082be:	e7ec      	b.n	800829a <_printf_float+0x34e>
 80082c0:	4613      	mov	r3, r2
 80082c2:	4631      	mov	r1, r6
 80082c4:	4642      	mov	r2, r8
 80082c6:	4628      	mov	r0, r5
 80082c8:	47b8      	blx	r7
 80082ca:	3001      	adds	r0, #1
 80082cc:	d1c0      	bne.n	8008250 <_printf_float+0x304>
 80082ce:	e69e      	b.n	800800e <_printf_float+0xc2>
 80082d0:	2301      	movs	r3, #1
 80082d2:	4631      	mov	r1, r6
 80082d4:	4628      	mov	r0, r5
 80082d6:	9205      	str	r2, [sp, #20]
 80082d8:	47b8      	blx	r7
 80082da:	3001      	adds	r0, #1
 80082dc:	f43f ae97 	beq.w	800800e <_printf_float+0xc2>
 80082e0:	9a05      	ldr	r2, [sp, #20]
 80082e2:	f10b 0b01 	add.w	fp, fp, #1
 80082e6:	e7b9      	b.n	800825c <_printf_float+0x310>
 80082e8:	ee18 3a10 	vmov	r3, s16
 80082ec:	4652      	mov	r2, sl
 80082ee:	4631      	mov	r1, r6
 80082f0:	4628      	mov	r0, r5
 80082f2:	47b8      	blx	r7
 80082f4:	3001      	adds	r0, #1
 80082f6:	d1be      	bne.n	8008276 <_printf_float+0x32a>
 80082f8:	e689      	b.n	800800e <_printf_float+0xc2>
 80082fa:	9a05      	ldr	r2, [sp, #20]
 80082fc:	464b      	mov	r3, r9
 80082fe:	4442      	add	r2, r8
 8008300:	4631      	mov	r1, r6
 8008302:	4628      	mov	r0, r5
 8008304:	47b8      	blx	r7
 8008306:	3001      	adds	r0, #1
 8008308:	d1c1      	bne.n	800828e <_printf_float+0x342>
 800830a:	e680      	b.n	800800e <_printf_float+0xc2>
 800830c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800830e:	2a01      	cmp	r2, #1
 8008310:	dc01      	bgt.n	8008316 <_printf_float+0x3ca>
 8008312:	07db      	lsls	r3, r3, #31
 8008314:	d538      	bpl.n	8008388 <_printf_float+0x43c>
 8008316:	2301      	movs	r3, #1
 8008318:	4642      	mov	r2, r8
 800831a:	4631      	mov	r1, r6
 800831c:	4628      	mov	r0, r5
 800831e:	47b8      	blx	r7
 8008320:	3001      	adds	r0, #1
 8008322:	f43f ae74 	beq.w	800800e <_printf_float+0xc2>
 8008326:	ee18 3a10 	vmov	r3, s16
 800832a:	4652      	mov	r2, sl
 800832c:	4631      	mov	r1, r6
 800832e:	4628      	mov	r0, r5
 8008330:	47b8      	blx	r7
 8008332:	3001      	adds	r0, #1
 8008334:	f43f ae6b 	beq.w	800800e <_printf_float+0xc2>
 8008338:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800833c:	2200      	movs	r2, #0
 800833e:	2300      	movs	r3, #0
 8008340:	f7f8 fbda 	bl	8000af8 <__aeabi_dcmpeq>
 8008344:	b9d8      	cbnz	r0, 800837e <_printf_float+0x432>
 8008346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008348:	f108 0201 	add.w	r2, r8, #1
 800834c:	3b01      	subs	r3, #1
 800834e:	4631      	mov	r1, r6
 8008350:	4628      	mov	r0, r5
 8008352:	47b8      	blx	r7
 8008354:	3001      	adds	r0, #1
 8008356:	d10e      	bne.n	8008376 <_printf_float+0x42a>
 8008358:	e659      	b.n	800800e <_printf_float+0xc2>
 800835a:	2301      	movs	r3, #1
 800835c:	4652      	mov	r2, sl
 800835e:	4631      	mov	r1, r6
 8008360:	4628      	mov	r0, r5
 8008362:	47b8      	blx	r7
 8008364:	3001      	adds	r0, #1
 8008366:	f43f ae52 	beq.w	800800e <_printf_float+0xc2>
 800836a:	f108 0801 	add.w	r8, r8, #1
 800836e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008370:	3b01      	subs	r3, #1
 8008372:	4543      	cmp	r3, r8
 8008374:	dcf1      	bgt.n	800835a <_printf_float+0x40e>
 8008376:	464b      	mov	r3, r9
 8008378:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800837c:	e6dc      	b.n	8008138 <_printf_float+0x1ec>
 800837e:	f04f 0800 	mov.w	r8, #0
 8008382:	f104 0a1a 	add.w	sl, r4, #26
 8008386:	e7f2      	b.n	800836e <_printf_float+0x422>
 8008388:	2301      	movs	r3, #1
 800838a:	4642      	mov	r2, r8
 800838c:	e7df      	b.n	800834e <_printf_float+0x402>
 800838e:	2301      	movs	r3, #1
 8008390:	464a      	mov	r2, r9
 8008392:	4631      	mov	r1, r6
 8008394:	4628      	mov	r0, r5
 8008396:	47b8      	blx	r7
 8008398:	3001      	adds	r0, #1
 800839a:	f43f ae38 	beq.w	800800e <_printf_float+0xc2>
 800839e:	f108 0801 	add.w	r8, r8, #1
 80083a2:	68e3      	ldr	r3, [r4, #12]
 80083a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80083a6:	1a5b      	subs	r3, r3, r1
 80083a8:	4543      	cmp	r3, r8
 80083aa:	dcf0      	bgt.n	800838e <_printf_float+0x442>
 80083ac:	e6fa      	b.n	80081a4 <_printf_float+0x258>
 80083ae:	f04f 0800 	mov.w	r8, #0
 80083b2:	f104 0919 	add.w	r9, r4, #25
 80083b6:	e7f4      	b.n	80083a2 <_printf_float+0x456>

080083b8 <_printf_common>:
 80083b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083bc:	4616      	mov	r6, r2
 80083be:	4699      	mov	r9, r3
 80083c0:	688a      	ldr	r2, [r1, #8]
 80083c2:	690b      	ldr	r3, [r1, #16]
 80083c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083c8:	4293      	cmp	r3, r2
 80083ca:	bfb8      	it	lt
 80083cc:	4613      	movlt	r3, r2
 80083ce:	6033      	str	r3, [r6, #0]
 80083d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083d4:	4607      	mov	r7, r0
 80083d6:	460c      	mov	r4, r1
 80083d8:	b10a      	cbz	r2, 80083de <_printf_common+0x26>
 80083da:	3301      	adds	r3, #1
 80083dc:	6033      	str	r3, [r6, #0]
 80083de:	6823      	ldr	r3, [r4, #0]
 80083e0:	0699      	lsls	r1, r3, #26
 80083e2:	bf42      	ittt	mi
 80083e4:	6833      	ldrmi	r3, [r6, #0]
 80083e6:	3302      	addmi	r3, #2
 80083e8:	6033      	strmi	r3, [r6, #0]
 80083ea:	6825      	ldr	r5, [r4, #0]
 80083ec:	f015 0506 	ands.w	r5, r5, #6
 80083f0:	d106      	bne.n	8008400 <_printf_common+0x48>
 80083f2:	f104 0a19 	add.w	sl, r4, #25
 80083f6:	68e3      	ldr	r3, [r4, #12]
 80083f8:	6832      	ldr	r2, [r6, #0]
 80083fa:	1a9b      	subs	r3, r3, r2
 80083fc:	42ab      	cmp	r3, r5
 80083fe:	dc26      	bgt.n	800844e <_printf_common+0x96>
 8008400:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008404:	1e13      	subs	r3, r2, #0
 8008406:	6822      	ldr	r2, [r4, #0]
 8008408:	bf18      	it	ne
 800840a:	2301      	movne	r3, #1
 800840c:	0692      	lsls	r2, r2, #26
 800840e:	d42b      	bmi.n	8008468 <_printf_common+0xb0>
 8008410:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008414:	4649      	mov	r1, r9
 8008416:	4638      	mov	r0, r7
 8008418:	47c0      	blx	r8
 800841a:	3001      	adds	r0, #1
 800841c:	d01e      	beq.n	800845c <_printf_common+0xa4>
 800841e:	6823      	ldr	r3, [r4, #0]
 8008420:	68e5      	ldr	r5, [r4, #12]
 8008422:	6832      	ldr	r2, [r6, #0]
 8008424:	f003 0306 	and.w	r3, r3, #6
 8008428:	2b04      	cmp	r3, #4
 800842a:	bf08      	it	eq
 800842c:	1aad      	subeq	r5, r5, r2
 800842e:	68a3      	ldr	r3, [r4, #8]
 8008430:	6922      	ldr	r2, [r4, #16]
 8008432:	bf0c      	ite	eq
 8008434:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008438:	2500      	movne	r5, #0
 800843a:	4293      	cmp	r3, r2
 800843c:	bfc4      	itt	gt
 800843e:	1a9b      	subgt	r3, r3, r2
 8008440:	18ed      	addgt	r5, r5, r3
 8008442:	2600      	movs	r6, #0
 8008444:	341a      	adds	r4, #26
 8008446:	42b5      	cmp	r5, r6
 8008448:	d11a      	bne.n	8008480 <_printf_common+0xc8>
 800844a:	2000      	movs	r0, #0
 800844c:	e008      	b.n	8008460 <_printf_common+0xa8>
 800844e:	2301      	movs	r3, #1
 8008450:	4652      	mov	r2, sl
 8008452:	4649      	mov	r1, r9
 8008454:	4638      	mov	r0, r7
 8008456:	47c0      	blx	r8
 8008458:	3001      	adds	r0, #1
 800845a:	d103      	bne.n	8008464 <_printf_common+0xac>
 800845c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008464:	3501      	adds	r5, #1
 8008466:	e7c6      	b.n	80083f6 <_printf_common+0x3e>
 8008468:	18e1      	adds	r1, r4, r3
 800846a:	1c5a      	adds	r2, r3, #1
 800846c:	2030      	movs	r0, #48	; 0x30
 800846e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008472:	4422      	add	r2, r4
 8008474:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008478:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800847c:	3302      	adds	r3, #2
 800847e:	e7c7      	b.n	8008410 <_printf_common+0x58>
 8008480:	2301      	movs	r3, #1
 8008482:	4622      	mov	r2, r4
 8008484:	4649      	mov	r1, r9
 8008486:	4638      	mov	r0, r7
 8008488:	47c0      	blx	r8
 800848a:	3001      	adds	r0, #1
 800848c:	d0e6      	beq.n	800845c <_printf_common+0xa4>
 800848e:	3601      	adds	r6, #1
 8008490:	e7d9      	b.n	8008446 <_printf_common+0x8e>
	...

08008494 <_printf_i>:
 8008494:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008498:	460c      	mov	r4, r1
 800849a:	4691      	mov	r9, r2
 800849c:	7e27      	ldrb	r7, [r4, #24]
 800849e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80084a0:	2f78      	cmp	r7, #120	; 0x78
 80084a2:	4680      	mov	r8, r0
 80084a4:	469a      	mov	sl, r3
 80084a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084aa:	d807      	bhi.n	80084bc <_printf_i+0x28>
 80084ac:	2f62      	cmp	r7, #98	; 0x62
 80084ae:	d80a      	bhi.n	80084c6 <_printf_i+0x32>
 80084b0:	2f00      	cmp	r7, #0
 80084b2:	f000 80d8 	beq.w	8008666 <_printf_i+0x1d2>
 80084b6:	2f58      	cmp	r7, #88	; 0x58
 80084b8:	f000 80a3 	beq.w	8008602 <_printf_i+0x16e>
 80084bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80084c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80084c4:	e03a      	b.n	800853c <_printf_i+0xa8>
 80084c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80084ca:	2b15      	cmp	r3, #21
 80084cc:	d8f6      	bhi.n	80084bc <_printf_i+0x28>
 80084ce:	a001      	add	r0, pc, #4	; (adr r0, 80084d4 <_printf_i+0x40>)
 80084d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80084d4:	0800852d 	.word	0x0800852d
 80084d8:	08008541 	.word	0x08008541
 80084dc:	080084bd 	.word	0x080084bd
 80084e0:	080084bd 	.word	0x080084bd
 80084e4:	080084bd 	.word	0x080084bd
 80084e8:	080084bd 	.word	0x080084bd
 80084ec:	08008541 	.word	0x08008541
 80084f0:	080084bd 	.word	0x080084bd
 80084f4:	080084bd 	.word	0x080084bd
 80084f8:	080084bd 	.word	0x080084bd
 80084fc:	080084bd 	.word	0x080084bd
 8008500:	0800864d 	.word	0x0800864d
 8008504:	08008571 	.word	0x08008571
 8008508:	0800862f 	.word	0x0800862f
 800850c:	080084bd 	.word	0x080084bd
 8008510:	080084bd 	.word	0x080084bd
 8008514:	0800866f 	.word	0x0800866f
 8008518:	080084bd 	.word	0x080084bd
 800851c:	08008571 	.word	0x08008571
 8008520:	080084bd 	.word	0x080084bd
 8008524:	080084bd 	.word	0x080084bd
 8008528:	08008637 	.word	0x08008637
 800852c:	680b      	ldr	r3, [r1, #0]
 800852e:	1d1a      	adds	r2, r3, #4
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	600a      	str	r2, [r1, #0]
 8008534:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008538:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800853c:	2301      	movs	r3, #1
 800853e:	e0a3      	b.n	8008688 <_printf_i+0x1f4>
 8008540:	6825      	ldr	r5, [r4, #0]
 8008542:	6808      	ldr	r0, [r1, #0]
 8008544:	062e      	lsls	r6, r5, #24
 8008546:	f100 0304 	add.w	r3, r0, #4
 800854a:	d50a      	bpl.n	8008562 <_printf_i+0xce>
 800854c:	6805      	ldr	r5, [r0, #0]
 800854e:	600b      	str	r3, [r1, #0]
 8008550:	2d00      	cmp	r5, #0
 8008552:	da03      	bge.n	800855c <_printf_i+0xc8>
 8008554:	232d      	movs	r3, #45	; 0x2d
 8008556:	426d      	negs	r5, r5
 8008558:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800855c:	485e      	ldr	r0, [pc, #376]	; (80086d8 <_printf_i+0x244>)
 800855e:	230a      	movs	r3, #10
 8008560:	e019      	b.n	8008596 <_printf_i+0x102>
 8008562:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008566:	6805      	ldr	r5, [r0, #0]
 8008568:	600b      	str	r3, [r1, #0]
 800856a:	bf18      	it	ne
 800856c:	b22d      	sxthne	r5, r5
 800856e:	e7ef      	b.n	8008550 <_printf_i+0xbc>
 8008570:	680b      	ldr	r3, [r1, #0]
 8008572:	6825      	ldr	r5, [r4, #0]
 8008574:	1d18      	adds	r0, r3, #4
 8008576:	6008      	str	r0, [r1, #0]
 8008578:	0628      	lsls	r0, r5, #24
 800857a:	d501      	bpl.n	8008580 <_printf_i+0xec>
 800857c:	681d      	ldr	r5, [r3, #0]
 800857e:	e002      	b.n	8008586 <_printf_i+0xf2>
 8008580:	0669      	lsls	r1, r5, #25
 8008582:	d5fb      	bpl.n	800857c <_printf_i+0xe8>
 8008584:	881d      	ldrh	r5, [r3, #0]
 8008586:	4854      	ldr	r0, [pc, #336]	; (80086d8 <_printf_i+0x244>)
 8008588:	2f6f      	cmp	r7, #111	; 0x6f
 800858a:	bf0c      	ite	eq
 800858c:	2308      	moveq	r3, #8
 800858e:	230a      	movne	r3, #10
 8008590:	2100      	movs	r1, #0
 8008592:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008596:	6866      	ldr	r6, [r4, #4]
 8008598:	60a6      	str	r6, [r4, #8]
 800859a:	2e00      	cmp	r6, #0
 800859c:	bfa2      	ittt	ge
 800859e:	6821      	ldrge	r1, [r4, #0]
 80085a0:	f021 0104 	bicge.w	r1, r1, #4
 80085a4:	6021      	strge	r1, [r4, #0]
 80085a6:	b90d      	cbnz	r5, 80085ac <_printf_i+0x118>
 80085a8:	2e00      	cmp	r6, #0
 80085aa:	d04d      	beq.n	8008648 <_printf_i+0x1b4>
 80085ac:	4616      	mov	r6, r2
 80085ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80085b2:	fb03 5711 	mls	r7, r3, r1, r5
 80085b6:	5dc7      	ldrb	r7, [r0, r7]
 80085b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80085bc:	462f      	mov	r7, r5
 80085be:	42bb      	cmp	r3, r7
 80085c0:	460d      	mov	r5, r1
 80085c2:	d9f4      	bls.n	80085ae <_printf_i+0x11a>
 80085c4:	2b08      	cmp	r3, #8
 80085c6:	d10b      	bne.n	80085e0 <_printf_i+0x14c>
 80085c8:	6823      	ldr	r3, [r4, #0]
 80085ca:	07df      	lsls	r7, r3, #31
 80085cc:	d508      	bpl.n	80085e0 <_printf_i+0x14c>
 80085ce:	6923      	ldr	r3, [r4, #16]
 80085d0:	6861      	ldr	r1, [r4, #4]
 80085d2:	4299      	cmp	r1, r3
 80085d4:	bfde      	ittt	le
 80085d6:	2330      	movle	r3, #48	; 0x30
 80085d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80085dc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80085e0:	1b92      	subs	r2, r2, r6
 80085e2:	6122      	str	r2, [r4, #16]
 80085e4:	f8cd a000 	str.w	sl, [sp]
 80085e8:	464b      	mov	r3, r9
 80085ea:	aa03      	add	r2, sp, #12
 80085ec:	4621      	mov	r1, r4
 80085ee:	4640      	mov	r0, r8
 80085f0:	f7ff fee2 	bl	80083b8 <_printf_common>
 80085f4:	3001      	adds	r0, #1
 80085f6:	d14c      	bne.n	8008692 <_printf_i+0x1fe>
 80085f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085fc:	b004      	add	sp, #16
 80085fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008602:	4835      	ldr	r0, [pc, #212]	; (80086d8 <_printf_i+0x244>)
 8008604:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008608:	6823      	ldr	r3, [r4, #0]
 800860a:	680e      	ldr	r6, [r1, #0]
 800860c:	061f      	lsls	r7, r3, #24
 800860e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008612:	600e      	str	r6, [r1, #0]
 8008614:	d514      	bpl.n	8008640 <_printf_i+0x1ac>
 8008616:	07d9      	lsls	r1, r3, #31
 8008618:	bf44      	itt	mi
 800861a:	f043 0320 	orrmi.w	r3, r3, #32
 800861e:	6023      	strmi	r3, [r4, #0]
 8008620:	b91d      	cbnz	r5, 800862a <_printf_i+0x196>
 8008622:	6823      	ldr	r3, [r4, #0]
 8008624:	f023 0320 	bic.w	r3, r3, #32
 8008628:	6023      	str	r3, [r4, #0]
 800862a:	2310      	movs	r3, #16
 800862c:	e7b0      	b.n	8008590 <_printf_i+0xfc>
 800862e:	6823      	ldr	r3, [r4, #0]
 8008630:	f043 0320 	orr.w	r3, r3, #32
 8008634:	6023      	str	r3, [r4, #0]
 8008636:	2378      	movs	r3, #120	; 0x78
 8008638:	4828      	ldr	r0, [pc, #160]	; (80086dc <_printf_i+0x248>)
 800863a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800863e:	e7e3      	b.n	8008608 <_printf_i+0x174>
 8008640:	065e      	lsls	r6, r3, #25
 8008642:	bf48      	it	mi
 8008644:	b2ad      	uxthmi	r5, r5
 8008646:	e7e6      	b.n	8008616 <_printf_i+0x182>
 8008648:	4616      	mov	r6, r2
 800864a:	e7bb      	b.n	80085c4 <_printf_i+0x130>
 800864c:	680b      	ldr	r3, [r1, #0]
 800864e:	6826      	ldr	r6, [r4, #0]
 8008650:	6960      	ldr	r0, [r4, #20]
 8008652:	1d1d      	adds	r5, r3, #4
 8008654:	600d      	str	r5, [r1, #0]
 8008656:	0635      	lsls	r5, r6, #24
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	d501      	bpl.n	8008660 <_printf_i+0x1cc>
 800865c:	6018      	str	r0, [r3, #0]
 800865e:	e002      	b.n	8008666 <_printf_i+0x1d2>
 8008660:	0671      	lsls	r1, r6, #25
 8008662:	d5fb      	bpl.n	800865c <_printf_i+0x1c8>
 8008664:	8018      	strh	r0, [r3, #0]
 8008666:	2300      	movs	r3, #0
 8008668:	6123      	str	r3, [r4, #16]
 800866a:	4616      	mov	r6, r2
 800866c:	e7ba      	b.n	80085e4 <_printf_i+0x150>
 800866e:	680b      	ldr	r3, [r1, #0]
 8008670:	1d1a      	adds	r2, r3, #4
 8008672:	600a      	str	r2, [r1, #0]
 8008674:	681e      	ldr	r6, [r3, #0]
 8008676:	6862      	ldr	r2, [r4, #4]
 8008678:	2100      	movs	r1, #0
 800867a:	4630      	mov	r0, r6
 800867c:	f7f7 fdc8 	bl	8000210 <memchr>
 8008680:	b108      	cbz	r0, 8008686 <_printf_i+0x1f2>
 8008682:	1b80      	subs	r0, r0, r6
 8008684:	6060      	str	r0, [r4, #4]
 8008686:	6863      	ldr	r3, [r4, #4]
 8008688:	6123      	str	r3, [r4, #16]
 800868a:	2300      	movs	r3, #0
 800868c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008690:	e7a8      	b.n	80085e4 <_printf_i+0x150>
 8008692:	6923      	ldr	r3, [r4, #16]
 8008694:	4632      	mov	r2, r6
 8008696:	4649      	mov	r1, r9
 8008698:	4640      	mov	r0, r8
 800869a:	47d0      	blx	sl
 800869c:	3001      	adds	r0, #1
 800869e:	d0ab      	beq.n	80085f8 <_printf_i+0x164>
 80086a0:	6823      	ldr	r3, [r4, #0]
 80086a2:	079b      	lsls	r3, r3, #30
 80086a4:	d413      	bmi.n	80086ce <_printf_i+0x23a>
 80086a6:	68e0      	ldr	r0, [r4, #12]
 80086a8:	9b03      	ldr	r3, [sp, #12]
 80086aa:	4298      	cmp	r0, r3
 80086ac:	bfb8      	it	lt
 80086ae:	4618      	movlt	r0, r3
 80086b0:	e7a4      	b.n	80085fc <_printf_i+0x168>
 80086b2:	2301      	movs	r3, #1
 80086b4:	4632      	mov	r2, r6
 80086b6:	4649      	mov	r1, r9
 80086b8:	4640      	mov	r0, r8
 80086ba:	47d0      	blx	sl
 80086bc:	3001      	adds	r0, #1
 80086be:	d09b      	beq.n	80085f8 <_printf_i+0x164>
 80086c0:	3501      	adds	r5, #1
 80086c2:	68e3      	ldr	r3, [r4, #12]
 80086c4:	9903      	ldr	r1, [sp, #12]
 80086c6:	1a5b      	subs	r3, r3, r1
 80086c8:	42ab      	cmp	r3, r5
 80086ca:	dcf2      	bgt.n	80086b2 <_printf_i+0x21e>
 80086cc:	e7eb      	b.n	80086a6 <_printf_i+0x212>
 80086ce:	2500      	movs	r5, #0
 80086d0:	f104 0619 	add.w	r6, r4, #25
 80086d4:	e7f5      	b.n	80086c2 <_printf_i+0x22e>
 80086d6:	bf00      	nop
 80086d8:	0800acce 	.word	0x0800acce
 80086dc:	0800acdf 	.word	0x0800acdf

080086e0 <siprintf>:
 80086e0:	b40e      	push	{r1, r2, r3}
 80086e2:	b500      	push	{lr}
 80086e4:	b09c      	sub	sp, #112	; 0x70
 80086e6:	ab1d      	add	r3, sp, #116	; 0x74
 80086e8:	9002      	str	r0, [sp, #8]
 80086ea:	9006      	str	r0, [sp, #24]
 80086ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086f0:	4809      	ldr	r0, [pc, #36]	; (8008718 <siprintf+0x38>)
 80086f2:	9107      	str	r1, [sp, #28]
 80086f4:	9104      	str	r1, [sp, #16]
 80086f6:	4909      	ldr	r1, [pc, #36]	; (800871c <siprintf+0x3c>)
 80086f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80086fc:	9105      	str	r1, [sp, #20]
 80086fe:	6800      	ldr	r0, [r0, #0]
 8008700:	9301      	str	r3, [sp, #4]
 8008702:	a902      	add	r1, sp, #8
 8008704:	f001 fb24 	bl	8009d50 <_svfiprintf_r>
 8008708:	9b02      	ldr	r3, [sp, #8]
 800870a:	2200      	movs	r2, #0
 800870c:	701a      	strb	r2, [r3, #0]
 800870e:	b01c      	add	sp, #112	; 0x70
 8008710:	f85d eb04 	ldr.w	lr, [sp], #4
 8008714:	b003      	add	sp, #12
 8008716:	4770      	bx	lr
 8008718:	200000d4 	.word	0x200000d4
 800871c:	ffff0208 	.word	0xffff0208

08008720 <quorem>:
 8008720:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008724:	6903      	ldr	r3, [r0, #16]
 8008726:	690c      	ldr	r4, [r1, #16]
 8008728:	42a3      	cmp	r3, r4
 800872a:	4607      	mov	r7, r0
 800872c:	f2c0 8081 	blt.w	8008832 <quorem+0x112>
 8008730:	3c01      	subs	r4, #1
 8008732:	f101 0814 	add.w	r8, r1, #20
 8008736:	f100 0514 	add.w	r5, r0, #20
 800873a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800873e:	9301      	str	r3, [sp, #4]
 8008740:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008744:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008748:	3301      	adds	r3, #1
 800874a:	429a      	cmp	r2, r3
 800874c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008750:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008754:	fbb2 f6f3 	udiv	r6, r2, r3
 8008758:	d331      	bcc.n	80087be <quorem+0x9e>
 800875a:	f04f 0e00 	mov.w	lr, #0
 800875e:	4640      	mov	r0, r8
 8008760:	46ac      	mov	ip, r5
 8008762:	46f2      	mov	sl, lr
 8008764:	f850 2b04 	ldr.w	r2, [r0], #4
 8008768:	b293      	uxth	r3, r2
 800876a:	fb06 e303 	mla	r3, r6, r3, lr
 800876e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008772:	b29b      	uxth	r3, r3
 8008774:	ebaa 0303 	sub.w	r3, sl, r3
 8008778:	0c12      	lsrs	r2, r2, #16
 800877a:	f8dc a000 	ldr.w	sl, [ip]
 800877e:	fb06 e202 	mla	r2, r6, r2, lr
 8008782:	fa13 f38a 	uxtah	r3, r3, sl
 8008786:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800878a:	fa1f fa82 	uxth.w	sl, r2
 800878e:	f8dc 2000 	ldr.w	r2, [ip]
 8008792:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008796:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800879a:	b29b      	uxth	r3, r3
 800879c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087a0:	4581      	cmp	r9, r0
 80087a2:	f84c 3b04 	str.w	r3, [ip], #4
 80087a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80087aa:	d2db      	bcs.n	8008764 <quorem+0x44>
 80087ac:	f855 300b 	ldr.w	r3, [r5, fp]
 80087b0:	b92b      	cbnz	r3, 80087be <quorem+0x9e>
 80087b2:	9b01      	ldr	r3, [sp, #4]
 80087b4:	3b04      	subs	r3, #4
 80087b6:	429d      	cmp	r5, r3
 80087b8:	461a      	mov	r2, r3
 80087ba:	d32e      	bcc.n	800881a <quorem+0xfa>
 80087bc:	613c      	str	r4, [r7, #16]
 80087be:	4638      	mov	r0, r7
 80087c0:	f001 f8b0 	bl	8009924 <__mcmp>
 80087c4:	2800      	cmp	r0, #0
 80087c6:	db24      	blt.n	8008812 <quorem+0xf2>
 80087c8:	3601      	adds	r6, #1
 80087ca:	4628      	mov	r0, r5
 80087cc:	f04f 0c00 	mov.w	ip, #0
 80087d0:	f858 2b04 	ldr.w	r2, [r8], #4
 80087d4:	f8d0 e000 	ldr.w	lr, [r0]
 80087d8:	b293      	uxth	r3, r2
 80087da:	ebac 0303 	sub.w	r3, ip, r3
 80087de:	0c12      	lsrs	r2, r2, #16
 80087e0:	fa13 f38e 	uxtah	r3, r3, lr
 80087e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80087e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087f2:	45c1      	cmp	r9, r8
 80087f4:	f840 3b04 	str.w	r3, [r0], #4
 80087f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80087fc:	d2e8      	bcs.n	80087d0 <quorem+0xb0>
 80087fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008802:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008806:	b922      	cbnz	r2, 8008812 <quorem+0xf2>
 8008808:	3b04      	subs	r3, #4
 800880a:	429d      	cmp	r5, r3
 800880c:	461a      	mov	r2, r3
 800880e:	d30a      	bcc.n	8008826 <quorem+0x106>
 8008810:	613c      	str	r4, [r7, #16]
 8008812:	4630      	mov	r0, r6
 8008814:	b003      	add	sp, #12
 8008816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800881a:	6812      	ldr	r2, [r2, #0]
 800881c:	3b04      	subs	r3, #4
 800881e:	2a00      	cmp	r2, #0
 8008820:	d1cc      	bne.n	80087bc <quorem+0x9c>
 8008822:	3c01      	subs	r4, #1
 8008824:	e7c7      	b.n	80087b6 <quorem+0x96>
 8008826:	6812      	ldr	r2, [r2, #0]
 8008828:	3b04      	subs	r3, #4
 800882a:	2a00      	cmp	r2, #0
 800882c:	d1f0      	bne.n	8008810 <quorem+0xf0>
 800882e:	3c01      	subs	r4, #1
 8008830:	e7eb      	b.n	800880a <quorem+0xea>
 8008832:	2000      	movs	r0, #0
 8008834:	e7ee      	b.n	8008814 <quorem+0xf4>
	...

08008838 <_dtoa_r>:
 8008838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800883c:	ed2d 8b02 	vpush	{d8}
 8008840:	ec57 6b10 	vmov	r6, r7, d0
 8008844:	b095      	sub	sp, #84	; 0x54
 8008846:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008848:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800884c:	9105      	str	r1, [sp, #20]
 800884e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008852:	4604      	mov	r4, r0
 8008854:	9209      	str	r2, [sp, #36]	; 0x24
 8008856:	930f      	str	r3, [sp, #60]	; 0x3c
 8008858:	b975      	cbnz	r5, 8008878 <_dtoa_r+0x40>
 800885a:	2010      	movs	r0, #16
 800885c:	f000 fddc 	bl	8009418 <malloc>
 8008860:	4602      	mov	r2, r0
 8008862:	6260      	str	r0, [r4, #36]	; 0x24
 8008864:	b920      	cbnz	r0, 8008870 <_dtoa_r+0x38>
 8008866:	4bb2      	ldr	r3, [pc, #712]	; (8008b30 <_dtoa_r+0x2f8>)
 8008868:	21ea      	movs	r1, #234	; 0xea
 800886a:	48b2      	ldr	r0, [pc, #712]	; (8008b34 <_dtoa_r+0x2fc>)
 800886c:	f001 fb80 	bl	8009f70 <__assert_func>
 8008870:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008874:	6005      	str	r5, [r0, #0]
 8008876:	60c5      	str	r5, [r0, #12]
 8008878:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800887a:	6819      	ldr	r1, [r3, #0]
 800887c:	b151      	cbz	r1, 8008894 <_dtoa_r+0x5c>
 800887e:	685a      	ldr	r2, [r3, #4]
 8008880:	604a      	str	r2, [r1, #4]
 8008882:	2301      	movs	r3, #1
 8008884:	4093      	lsls	r3, r2
 8008886:	608b      	str	r3, [r1, #8]
 8008888:	4620      	mov	r0, r4
 800888a:	f000 fe0d 	bl	80094a8 <_Bfree>
 800888e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008890:	2200      	movs	r2, #0
 8008892:	601a      	str	r2, [r3, #0]
 8008894:	1e3b      	subs	r3, r7, #0
 8008896:	bfb9      	ittee	lt
 8008898:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800889c:	9303      	strlt	r3, [sp, #12]
 800889e:	2300      	movge	r3, #0
 80088a0:	f8c8 3000 	strge.w	r3, [r8]
 80088a4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80088a8:	4ba3      	ldr	r3, [pc, #652]	; (8008b38 <_dtoa_r+0x300>)
 80088aa:	bfbc      	itt	lt
 80088ac:	2201      	movlt	r2, #1
 80088ae:	f8c8 2000 	strlt.w	r2, [r8]
 80088b2:	ea33 0309 	bics.w	r3, r3, r9
 80088b6:	d11b      	bne.n	80088f0 <_dtoa_r+0xb8>
 80088b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088ba:	f242 730f 	movw	r3, #9999	; 0x270f
 80088be:	6013      	str	r3, [r2, #0]
 80088c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80088c4:	4333      	orrs	r3, r6
 80088c6:	f000 857a 	beq.w	80093be <_dtoa_r+0xb86>
 80088ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088cc:	b963      	cbnz	r3, 80088e8 <_dtoa_r+0xb0>
 80088ce:	4b9b      	ldr	r3, [pc, #620]	; (8008b3c <_dtoa_r+0x304>)
 80088d0:	e024      	b.n	800891c <_dtoa_r+0xe4>
 80088d2:	4b9b      	ldr	r3, [pc, #620]	; (8008b40 <_dtoa_r+0x308>)
 80088d4:	9300      	str	r3, [sp, #0]
 80088d6:	3308      	adds	r3, #8
 80088d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80088da:	6013      	str	r3, [r2, #0]
 80088dc:	9800      	ldr	r0, [sp, #0]
 80088de:	b015      	add	sp, #84	; 0x54
 80088e0:	ecbd 8b02 	vpop	{d8}
 80088e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088e8:	4b94      	ldr	r3, [pc, #592]	; (8008b3c <_dtoa_r+0x304>)
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	3303      	adds	r3, #3
 80088ee:	e7f3      	b.n	80088d8 <_dtoa_r+0xa0>
 80088f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80088f4:	2200      	movs	r2, #0
 80088f6:	ec51 0b17 	vmov	r0, r1, d7
 80088fa:	2300      	movs	r3, #0
 80088fc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008900:	f7f8 f8fa 	bl	8000af8 <__aeabi_dcmpeq>
 8008904:	4680      	mov	r8, r0
 8008906:	b158      	cbz	r0, 8008920 <_dtoa_r+0xe8>
 8008908:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800890a:	2301      	movs	r3, #1
 800890c:	6013      	str	r3, [r2, #0]
 800890e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008910:	2b00      	cmp	r3, #0
 8008912:	f000 8551 	beq.w	80093b8 <_dtoa_r+0xb80>
 8008916:	488b      	ldr	r0, [pc, #556]	; (8008b44 <_dtoa_r+0x30c>)
 8008918:	6018      	str	r0, [r3, #0]
 800891a:	1e43      	subs	r3, r0, #1
 800891c:	9300      	str	r3, [sp, #0]
 800891e:	e7dd      	b.n	80088dc <_dtoa_r+0xa4>
 8008920:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008924:	aa12      	add	r2, sp, #72	; 0x48
 8008926:	a913      	add	r1, sp, #76	; 0x4c
 8008928:	4620      	mov	r0, r4
 800892a:	f001 f89f 	bl	8009a6c <__d2b>
 800892e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008932:	4683      	mov	fp, r0
 8008934:	2d00      	cmp	r5, #0
 8008936:	d07c      	beq.n	8008a32 <_dtoa_r+0x1fa>
 8008938:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800893a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800893e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008942:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008946:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800894a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800894e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008952:	4b7d      	ldr	r3, [pc, #500]	; (8008b48 <_dtoa_r+0x310>)
 8008954:	2200      	movs	r2, #0
 8008956:	4630      	mov	r0, r6
 8008958:	4639      	mov	r1, r7
 800895a:	f7f7 fcad 	bl	80002b8 <__aeabi_dsub>
 800895e:	a36e      	add	r3, pc, #440	; (adr r3, 8008b18 <_dtoa_r+0x2e0>)
 8008960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008964:	f7f7 fe60 	bl	8000628 <__aeabi_dmul>
 8008968:	a36d      	add	r3, pc, #436	; (adr r3, 8008b20 <_dtoa_r+0x2e8>)
 800896a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896e:	f7f7 fca5 	bl	80002bc <__adddf3>
 8008972:	4606      	mov	r6, r0
 8008974:	4628      	mov	r0, r5
 8008976:	460f      	mov	r7, r1
 8008978:	f7f7 fdec 	bl	8000554 <__aeabi_i2d>
 800897c:	a36a      	add	r3, pc, #424	; (adr r3, 8008b28 <_dtoa_r+0x2f0>)
 800897e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008982:	f7f7 fe51 	bl	8000628 <__aeabi_dmul>
 8008986:	4602      	mov	r2, r0
 8008988:	460b      	mov	r3, r1
 800898a:	4630      	mov	r0, r6
 800898c:	4639      	mov	r1, r7
 800898e:	f7f7 fc95 	bl	80002bc <__adddf3>
 8008992:	4606      	mov	r6, r0
 8008994:	460f      	mov	r7, r1
 8008996:	f7f8 f8f7 	bl	8000b88 <__aeabi_d2iz>
 800899a:	2200      	movs	r2, #0
 800899c:	4682      	mov	sl, r0
 800899e:	2300      	movs	r3, #0
 80089a0:	4630      	mov	r0, r6
 80089a2:	4639      	mov	r1, r7
 80089a4:	f7f8 f8b2 	bl	8000b0c <__aeabi_dcmplt>
 80089a8:	b148      	cbz	r0, 80089be <_dtoa_r+0x186>
 80089aa:	4650      	mov	r0, sl
 80089ac:	f7f7 fdd2 	bl	8000554 <__aeabi_i2d>
 80089b0:	4632      	mov	r2, r6
 80089b2:	463b      	mov	r3, r7
 80089b4:	f7f8 f8a0 	bl	8000af8 <__aeabi_dcmpeq>
 80089b8:	b908      	cbnz	r0, 80089be <_dtoa_r+0x186>
 80089ba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80089be:	f1ba 0f16 	cmp.w	sl, #22
 80089c2:	d854      	bhi.n	8008a6e <_dtoa_r+0x236>
 80089c4:	4b61      	ldr	r3, [pc, #388]	; (8008b4c <_dtoa_r+0x314>)
 80089c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80089ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80089d2:	f7f8 f89b 	bl	8000b0c <__aeabi_dcmplt>
 80089d6:	2800      	cmp	r0, #0
 80089d8:	d04b      	beq.n	8008a72 <_dtoa_r+0x23a>
 80089da:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80089de:	2300      	movs	r3, #0
 80089e0:	930e      	str	r3, [sp, #56]	; 0x38
 80089e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089e4:	1b5d      	subs	r5, r3, r5
 80089e6:	1e6b      	subs	r3, r5, #1
 80089e8:	9304      	str	r3, [sp, #16]
 80089ea:	bf43      	ittte	mi
 80089ec:	2300      	movmi	r3, #0
 80089ee:	f1c5 0801 	rsbmi	r8, r5, #1
 80089f2:	9304      	strmi	r3, [sp, #16]
 80089f4:	f04f 0800 	movpl.w	r8, #0
 80089f8:	f1ba 0f00 	cmp.w	sl, #0
 80089fc:	db3b      	blt.n	8008a76 <_dtoa_r+0x23e>
 80089fe:	9b04      	ldr	r3, [sp, #16]
 8008a00:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008a04:	4453      	add	r3, sl
 8008a06:	9304      	str	r3, [sp, #16]
 8008a08:	2300      	movs	r3, #0
 8008a0a:	9306      	str	r3, [sp, #24]
 8008a0c:	9b05      	ldr	r3, [sp, #20]
 8008a0e:	2b09      	cmp	r3, #9
 8008a10:	d869      	bhi.n	8008ae6 <_dtoa_r+0x2ae>
 8008a12:	2b05      	cmp	r3, #5
 8008a14:	bfc4      	itt	gt
 8008a16:	3b04      	subgt	r3, #4
 8008a18:	9305      	strgt	r3, [sp, #20]
 8008a1a:	9b05      	ldr	r3, [sp, #20]
 8008a1c:	f1a3 0302 	sub.w	r3, r3, #2
 8008a20:	bfcc      	ite	gt
 8008a22:	2500      	movgt	r5, #0
 8008a24:	2501      	movle	r5, #1
 8008a26:	2b03      	cmp	r3, #3
 8008a28:	d869      	bhi.n	8008afe <_dtoa_r+0x2c6>
 8008a2a:	e8df f003 	tbb	[pc, r3]
 8008a2e:	4e2c      	.short	0x4e2c
 8008a30:	5a4c      	.short	0x5a4c
 8008a32:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008a36:	441d      	add	r5, r3
 8008a38:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008a3c:	2b20      	cmp	r3, #32
 8008a3e:	bfc1      	itttt	gt
 8008a40:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008a44:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008a48:	fa09 f303 	lslgt.w	r3, r9, r3
 8008a4c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008a50:	bfda      	itte	le
 8008a52:	f1c3 0320 	rsble	r3, r3, #32
 8008a56:	fa06 f003 	lslle.w	r0, r6, r3
 8008a5a:	4318      	orrgt	r0, r3
 8008a5c:	f7f7 fd6a 	bl	8000534 <__aeabi_ui2d>
 8008a60:	2301      	movs	r3, #1
 8008a62:	4606      	mov	r6, r0
 8008a64:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008a68:	3d01      	subs	r5, #1
 8008a6a:	9310      	str	r3, [sp, #64]	; 0x40
 8008a6c:	e771      	b.n	8008952 <_dtoa_r+0x11a>
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e7b6      	b.n	80089e0 <_dtoa_r+0x1a8>
 8008a72:	900e      	str	r0, [sp, #56]	; 0x38
 8008a74:	e7b5      	b.n	80089e2 <_dtoa_r+0x1aa>
 8008a76:	f1ca 0300 	rsb	r3, sl, #0
 8008a7a:	9306      	str	r3, [sp, #24]
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	eba8 080a 	sub.w	r8, r8, sl
 8008a82:	930d      	str	r3, [sp, #52]	; 0x34
 8008a84:	e7c2      	b.n	8008a0c <_dtoa_r+0x1d4>
 8008a86:	2300      	movs	r3, #0
 8008a88:	9308      	str	r3, [sp, #32]
 8008a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	dc39      	bgt.n	8008b04 <_dtoa_r+0x2cc>
 8008a90:	f04f 0901 	mov.w	r9, #1
 8008a94:	f8cd 9004 	str.w	r9, [sp, #4]
 8008a98:	464b      	mov	r3, r9
 8008a9a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008a9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	6042      	str	r2, [r0, #4]
 8008aa4:	2204      	movs	r2, #4
 8008aa6:	f102 0614 	add.w	r6, r2, #20
 8008aaa:	429e      	cmp	r6, r3
 8008aac:	6841      	ldr	r1, [r0, #4]
 8008aae:	d92f      	bls.n	8008b10 <_dtoa_r+0x2d8>
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f000 fcb9 	bl	8009428 <_Balloc>
 8008ab6:	9000      	str	r0, [sp, #0]
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	d14b      	bne.n	8008b54 <_dtoa_r+0x31c>
 8008abc:	4b24      	ldr	r3, [pc, #144]	; (8008b50 <_dtoa_r+0x318>)
 8008abe:	4602      	mov	r2, r0
 8008ac0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008ac4:	e6d1      	b.n	800886a <_dtoa_r+0x32>
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e7de      	b.n	8008a88 <_dtoa_r+0x250>
 8008aca:	2300      	movs	r3, #0
 8008acc:	9308      	str	r3, [sp, #32]
 8008ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ad0:	eb0a 0903 	add.w	r9, sl, r3
 8008ad4:	f109 0301 	add.w	r3, r9, #1
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	9301      	str	r3, [sp, #4]
 8008adc:	bfb8      	it	lt
 8008ade:	2301      	movlt	r3, #1
 8008ae0:	e7dd      	b.n	8008a9e <_dtoa_r+0x266>
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e7f2      	b.n	8008acc <_dtoa_r+0x294>
 8008ae6:	2501      	movs	r5, #1
 8008ae8:	2300      	movs	r3, #0
 8008aea:	9305      	str	r3, [sp, #20]
 8008aec:	9508      	str	r5, [sp, #32]
 8008aee:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8008af2:	2200      	movs	r2, #0
 8008af4:	f8cd 9004 	str.w	r9, [sp, #4]
 8008af8:	2312      	movs	r3, #18
 8008afa:	9209      	str	r2, [sp, #36]	; 0x24
 8008afc:	e7cf      	b.n	8008a9e <_dtoa_r+0x266>
 8008afe:	2301      	movs	r3, #1
 8008b00:	9308      	str	r3, [sp, #32]
 8008b02:	e7f4      	b.n	8008aee <_dtoa_r+0x2b6>
 8008b04:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008b08:	f8cd 9004 	str.w	r9, [sp, #4]
 8008b0c:	464b      	mov	r3, r9
 8008b0e:	e7c6      	b.n	8008a9e <_dtoa_r+0x266>
 8008b10:	3101      	adds	r1, #1
 8008b12:	6041      	str	r1, [r0, #4]
 8008b14:	0052      	lsls	r2, r2, #1
 8008b16:	e7c6      	b.n	8008aa6 <_dtoa_r+0x26e>
 8008b18:	636f4361 	.word	0x636f4361
 8008b1c:	3fd287a7 	.word	0x3fd287a7
 8008b20:	8b60c8b3 	.word	0x8b60c8b3
 8008b24:	3fc68a28 	.word	0x3fc68a28
 8008b28:	509f79fb 	.word	0x509f79fb
 8008b2c:	3fd34413 	.word	0x3fd34413
 8008b30:	0800acfd 	.word	0x0800acfd
 8008b34:	0800ad14 	.word	0x0800ad14
 8008b38:	7ff00000 	.word	0x7ff00000
 8008b3c:	0800acf9 	.word	0x0800acf9
 8008b40:	0800acf0 	.word	0x0800acf0
 8008b44:	0800accd 	.word	0x0800accd
 8008b48:	3ff80000 	.word	0x3ff80000
 8008b4c:	0800ae10 	.word	0x0800ae10
 8008b50:	0800ad73 	.word	0x0800ad73
 8008b54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b56:	9a00      	ldr	r2, [sp, #0]
 8008b58:	601a      	str	r2, [r3, #0]
 8008b5a:	9b01      	ldr	r3, [sp, #4]
 8008b5c:	2b0e      	cmp	r3, #14
 8008b5e:	f200 80ad 	bhi.w	8008cbc <_dtoa_r+0x484>
 8008b62:	2d00      	cmp	r5, #0
 8008b64:	f000 80aa 	beq.w	8008cbc <_dtoa_r+0x484>
 8008b68:	f1ba 0f00 	cmp.w	sl, #0
 8008b6c:	dd36      	ble.n	8008bdc <_dtoa_r+0x3a4>
 8008b6e:	4ac3      	ldr	r2, [pc, #780]	; (8008e7c <_dtoa_r+0x644>)
 8008b70:	f00a 030f 	and.w	r3, sl, #15
 8008b74:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008b78:	ed93 7b00 	vldr	d7, [r3]
 8008b7c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008b80:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008b84:	eeb0 8a47 	vmov.f32	s16, s14
 8008b88:	eef0 8a67 	vmov.f32	s17, s15
 8008b8c:	d016      	beq.n	8008bbc <_dtoa_r+0x384>
 8008b8e:	4bbc      	ldr	r3, [pc, #752]	; (8008e80 <_dtoa_r+0x648>)
 8008b90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008b94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b98:	f7f7 fe70 	bl	800087c <__aeabi_ddiv>
 8008b9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ba0:	f007 070f 	and.w	r7, r7, #15
 8008ba4:	2503      	movs	r5, #3
 8008ba6:	4eb6      	ldr	r6, [pc, #728]	; (8008e80 <_dtoa_r+0x648>)
 8008ba8:	b957      	cbnz	r7, 8008bc0 <_dtoa_r+0x388>
 8008baa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bae:	ec53 2b18 	vmov	r2, r3, d8
 8008bb2:	f7f7 fe63 	bl	800087c <__aeabi_ddiv>
 8008bb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bba:	e029      	b.n	8008c10 <_dtoa_r+0x3d8>
 8008bbc:	2502      	movs	r5, #2
 8008bbe:	e7f2      	b.n	8008ba6 <_dtoa_r+0x36e>
 8008bc0:	07f9      	lsls	r1, r7, #31
 8008bc2:	d508      	bpl.n	8008bd6 <_dtoa_r+0x39e>
 8008bc4:	ec51 0b18 	vmov	r0, r1, d8
 8008bc8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008bcc:	f7f7 fd2c 	bl	8000628 <__aeabi_dmul>
 8008bd0:	ec41 0b18 	vmov	d8, r0, r1
 8008bd4:	3501      	adds	r5, #1
 8008bd6:	107f      	asrs	r7, r7, #1
 8008bd8:	3608      	adds	r6, #8
 8008bda:	e7e5      	b.n	8008ba8 <_dtoa_r+0x370>
 8008bdc:	f000 80a6 	beq.w	8008d2c <_dtoa_r+0x4f4>
 8008be0:	f1ca 0600 	rsb	r6, sl, #0
 8008be4:	4ba5      	ldr	r3, [pc, #660]	; (8008e7c <_dtoa_r+0x644>)
 8008be6:	4fa6      	ldr	r7, [pc, #664]	; (8008e80 <_dtoa_r+0x648>)
 8008be8:	f006 020f 	and.w	r2, r6, #15
 8008bec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008bf8:	f7f7 fd16 	bl	8000628 <__aeabi_dmul>
 8008bfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c00:	1136      	asrs	r6, r6, #4
 8008c02:	2300      	movs	r3, #0
 8008c04:	2502      	movs	r5, #2
 8008c06:	2e00      	cmp	r6, #0
 8008c08:	f040 8085 	bne.w	8008d16 <_dtoa_r+0x4de>
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d1d2      	bne.n	8008bb6 <_dtoa_r+0x37e>
 8008c10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	f000 808c 	beq.w	8008d30 <_dtoa_r+0x4f8>
 8008c18:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008c1c:	4b99      	ldr	r3, [pc, #612]	; (8008e84 <_dtoa_r+0x64c>)
 8008c1e:	2200      	movs	r2, #0
 8008c20:	4630      	mov	r0, r6
 8008c22:	4639      	mov	r1, r7
 8008c24:	f7f7 ff72 	bl	8000b0c <__aeabi_dcmplt>
 8008c28:	2800      	cmp	r0, #0
 8008c2a:	f000 8081 	beq.w	8008d30 <_dtoa_r+0x4f8>
 8008c2e:	9b01      	ldr	r3, [sp, #4]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d07d      	beq.n	8008d30 <_dtoa_r+0x4f8>
 8008c34:	f1b9 0f00 	cmp.w	r9, #0
 8008c38:	dd3c      	ble.n	8008cb4 <_dtoa_r+0x47c>
 8008c3a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008c3e:	9307      	str	r3, [sp, #28]
 8008c40:	2200      	movs	r2, #0
 8008c42:	4b91      	ldr	r3, [pc, #580]	; (8008e88 <_dtoa_r+0x650>)
 8008c44:	4630      	mov	r0, r6
 8008c46:	4639      	mov	r1, r7
 8008c48:	f7f7 fcee 	bl	8000628 <__aeabi_dmul>
 8008c4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c50:	3501      	adds	r5, #1
 8008c52:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008c56:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008c5a:	4628      	mov	r0, r5
 8008c5c:	f7f7 fc7a 	bl	8000554 <__aeabi_i2d>
 8008c60:	4632      	mov	r2, r6
 8008c62:	463b      	mov	r3, r7
 8008c64:	f7f7 fce0 	bl	8000628 <__aeabi_dmul>
 8008c68:	4b88      	ldr	r3, [pc, #544]	; (8008e8c <_dtoa_r+0x654>)
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f7f7 fb26 	bl	80002bc <__adddf3>
 8008c70:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008c74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c78:	9303      	str	r3, [sp, #12]
 8008c7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d15c      	bne.n	8008d3a <_dtoa_r+0x502>
 8008c80:	4b83      	ldr	r3, [pc, #524]	; (8008e90 <_dtoa_r+0x658>)
 8008c82:	2200      	movs	r2, #0
 8008c84:	4630      	mov	r0, r6
 8008c86:	4639      	mov	r1, r7
 8008c88:	f7f7 fb16 	bl	80002b8 <__aeabi_dsub>
 8008c8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c90:	4606      	mov	r6, r0
 8008c92:	460f      	mov	r7, r1
 8008c94:	f7f7 ff58 	bl	8000b48 <__aeabi_dcmpgt>
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	f040 8296 	bne.w	80091ca <_dtoa_r+0x992>
 8008c9e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008ca2:	4630      	mov	r0, r6
 8008ca4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ca8:	4639      	mov	r1, r7
 8008caa:	f7f7 ff2f 	bl	8000b0c <__aeabi_dcmplt>
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	f040 8288 	bne.w	80091c4 <_dtoa_r+0x98c>
 8008cb4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008cb8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008cbc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	f2c0 8158 	blt.w	8008f74 <_dtoa_r+0x73c>
 8008cc4:	f1ba 0f0e 	cmp.w	sl, #14
 8008cc8:	f300 8154 	bgt.w	8008f74 <_dtoa_r+0x73c>
 8008ccc:	4b6b      	ldr	r3, [pc, #428]	; (8008e7c <_dtoa_r+0x644>)
 8008cce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008cd2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	f280 80e3 	bge.w	8008ea4 <_dtoa_r+0x66c>
 8008cde:	9b01      	ldr	r3, [sp, #4]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	f300 80df 	bgt.w	8008ea4 <_dtoa_r+0x66c>
 8008ce6:	f040 826d 	bne.w	80091c4 <_dtoa_r+0x98c>
 8008cea:	4b69      	ldr	r3, [pc, #420]	; (8008e90 <_dtoa_r+0x658>)
 8008cec:	2200      	movs	r2, #0
 8008cee:	4640      	mov	r0, r8
 8008cf0:	4649      	mov	r1, r9
 8008cf2:	f7f7 fc99 	bl	8000628 <__aeabi_dmul>
 8008cf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cfa:	f7f7 ff1b 	bl	8000b34 <__aeabi_dcmpge>
 8008cfe:	9e01      	ldr	r6, [sp, #4]
 8008d00:	4637      	mov	r7, r6
 8008d02:	2800      	cmp	r0, #0
 8008d04:	f040 8243 	bne.w	800918e <_dtoa_r+0x956>
 8008d08:	9d00      	ldr	r5, [sp, #0]
 8008d0a:	2331      	movs	r3, #49	; 0x31
 8008d0c:	f805 3b01 	strb.w	r3, [r5], #1
 8008d10:	f10a 0a01 	add.w	sl, sl, #1
 8008d14:	e23f      	b.n	8009196 <_dtoa_r+0x95e>
 8008d16:	07f2      	lsls	r2, r6, #31
 8008d18:	d505      	bpl.n	8008d26 <_dtoa_r+0x4ee>
 8008d1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d1e:	f7f7 fc83 	bl	8000628 <__aeabi_dmul>
 8008d22:	3501      	adds	r5, #1
 8008d24:	2301      	movs	r3, #1
 8008d26:	1076      	asrs	r6, r6, #1
 8008d28:	3708      	adds	r7, #8
 8008d2a:	e76c      	b.n	8008c06 <_dtoa_r+0x3ce>
 8008d2c:	2502      	movs	r5, #2
 8008d2e:	e76f      	b.n	8008c10 <_dtoa_r+0x3d8>
 8008d30:	9b01      	ldr	r3, [sp, #4]
 8008d32:	f8cd a01c 	str.w	sl, [sp, #28]
 8008d36:	930c      	str	r3, [sp, #48]	; 0x30
 8008d38:	e78d      	b.n	8008c56 <_dtoa_r+0x41e>
 8008d3a:	9900      	ldr	r1, [sp, #0]
 8008d3c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008d3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d40:	4b4e      	ldr	r3, [pc, #312]	; (8008e7c <_dtoa_r+0x644>)
 8008d42:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d46:	4401      	add	r1, r0
 8008d48:	9102      	str	r1, [sp, #8]
 8008d4a:	9908      	ldr	r1, [sp, #32]
 8008d4c:	eeb0 8a47 	vmov.f32	s16, s14
 8008d50:	eef0 8a67 	vmov.f32	s17, s15
 8008d54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d58:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d5c:	2900      	cmp	r1, #0
 8008d5e:	d045      	beq.n	8008dec <_dtoa_r+0x5b4>
 8008d60:	494c      	ldr	r1, [pc, #304]	; (8008e94 <_dtoa_r+0x65c>)
 8008d62:	2000      	movs	r0, #0
 8008d64:	f7f7 fd8a 	bl	800087c <__aeabi_ddiv>
 8008d68:	ec53 2b18 	vmov	r2, r3, d8
 8008d6c:	f7f7 faa4 	bl	80002b8 <__aeabi_dsub>
 8008d70:	9d00      	ldr	r5, [sp, #0]
 8008d72:	ec41 0b18 	vmov	d8, r0, r1
 8008d76:	4639      	mov	r1, r7
 8008d78:	4630      	mov	r0, r6
 8008d7a:	f7f7 ff05 	bl	8000b88 <__aeabi_d2iz>
 8008d7e:	900c      	str	r0, [sp, #48]	; 0x30
 8008d80:	f7f7 fbe8 	bl	8000554 <__aeabi_i2d>
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	4630      	mov	r0, r6
 8008d8a:	4639      	mov	r1, r7
 8008d8c:	f7f7 fa94 	bl	80002b8 <__aeabi_dsub>
 8008d90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d92:	3330      	adds	r3, #48	; 0x30
 8008d94:	f805 3b01 	strb.w	r3, [r5], #1
 8008d98:	ec53 2b18 	vmov	r2, r3, d8
 8008d9c:	4606      	mov	r6, r0
 8008d9e:	460f      	mov	r7, r1
 8008da0:	f7f7 feb4 	bl	8000b0c <__aeabi_dcmplt>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	d165      	bne.n	8008e74 <_dtoa_r+0x63c>
 8008da8:	4632      	mov	r2, r6
 8008daa:	463b      	mov	r3, r7
 8008dac:	4935      	ldr	r1, [pc, #212]	; (8008e84 <_dtoa_r+0x64c>)
 8008dae:	2000      	movs	r0, #0
 8008db0:	f7f7 fa82 	bl	80002b8 <__aeabi_dsub>
 8008db4:	ec53 2b18 	vmov	r2, r3, d8
 8008db8:	f7f7 fea8 	bl	8000b0c <__aeabi_dcmplt>
 8008dbc:	2800      	cmp	r0, #0
 8008dbe:	f040 80b9 	bne.w	8008f34 <_dtoa_r+0x6fc>
 8008dc2:	9b02      	ldr	r3, [sp, #8]
 8008dc4:	429d      	cmp	r5, r3
 8008dc6:	f43f af75 	beq.w	8008cb4 <_dtoa_r+0x47c>
 8008dca:	4b2f      	ldr	r3, [pc, #188]	; (8008e88 <_dtoa_r+0x650>)
 8008dcc:	ec51 0b18 	vmov	r0, r1, d8
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f7f7 fc29 	bl	8000628 <__aeabi_dmul>
 8008dd6:	4b2c      	ldr	r3, [pc, #176]	; (8008e88 <_dtoa_r+0x650>)
 8008dd8:	ec41 0b18 	vmov	d8, r0, r1
 8008ddc:	2200      	movs	r2, #0
 8008dde:	4630      	mov	r0, r6
 8008de0:	4639      	mov	r1, r7
 8008de2:	f7f7 fc21 	bl	8000628 <__aeabi_dmul>
 8008de6:	4606      	mov	r6, r0
 8008de8:	460f      	mov	r7, r1
 8008dea:	e7c4      	b.n	8008d76 <_dtoa_r+0x53e>
 8008dec:	ec51 0b17 	vmov	r0, r1, d7
 8008df0:	f7f7 fc1a 	bl	8000628 <__aeabi_dmul>
 8008df4:	9b02      	ldr	r3, [sp, #8]
 8008df6:	9d00      	ldr	r5, [sp, #0]
 8008df8:	930c      	str	r3, [sp, #48]	; 0x30
 8008dfa:	ec41 0b18 	vmov	d8, r0, r1
 8008dfe:	4639      	mov	r1, r7
 8008e00:	4630      	mov	r0, r6
 8008e02:	f7f7 fec1 	bl	8000b88 <__aeabi_d2iz>
 8008e06:	9011      	str	r0, [sp, #68]	; 0x44
 8008e08:	f7f7 fba4 	bl	8000554 <__aeabi_i2d>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	460b      	mov	r3, r1
 8008e10:	4630      	mov	r0, r6
 8008e12:	4639      	mov	r1, r7
 8008e14:	f7f7 fa50 	bl	80002b8 <__aeabi_dsub>
 8008e18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e1a:	3330      	adds	r3, #48	; 0x30
 8008e1c:	f805 3b01 	strb.w	r3, [r5], #1
 8008e20:	9b02      	ldr	r3, [sp, #8]
 8008e22:	429d      	cmp	r5, r3
 8008e24:	4606      	mov	r6, r0
 8008e26:	460f      	mov	r7, r1
 8008e28:	f04f 0200 	mov.w	r2, #0
 8008e2c:	d134      	bne.n	8008e98 <_dtoa_r+0x660>
 8008e2e:	4b19      	ldr	r3, [pc, #100]	; (8008e94 <_dtoa_r+0x65c>)
 8008e30:	ec51 0b18 	vmov	r0, r1, d8
 8008e34:	f7f7 fa42 	bl	80002bc <__adddf3>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	4630      	mov	r0, r6
 8008e3e:	4639      	mov	r1, r7
 8008e40:	f7f7 fe82 	bl	8000b48 <__aeabi_dcmpgt>
 8008e44:	2800      	cmp	r0, #0
 8008e46:	d175      	bne.n	8008f34 <_dtoa_r+0x6fc>
 8008e48:	ec53 2b18 	vmov	r2, r3, d8
 8008e4c:	4911      	ldr	r1, [pc, #68]	; (8008e94 <_dtoa_r+0x65c>)
 8008e4e:	2000      	movs	r0, #0
 8008e50:	f7f7 fa32 	bl	80002b8 <__aeabi_dsub>
 8008e54:	4602      	mov	r2, r0
 8008e56:	460b      	mov	r3, r1
 8008e58:	4630      	mov	r0, r6
 8008e5a:	4639      	mov	r1, r7
 8008e5c:	f7f7 fe56 	bl	8000b0c <__aeabi_dcmplt>
 8008e60:	2800      	cmp	r0, #0
 8008e62:	f43f af27 	beq.w	8008cb4 <_dtoa_r+0x47c>
 8008e66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e68:	1e6b      	subs	r3, r5, #1
 8008e6a:	930c      	str	r3, [sp, #48]	; 0x30
 8008e6c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008e70:	2b30      	cmp	r3, #48	; 0x30
 8008e72:	d0f8      	beq.n	8008e66 <_dtoa_r+0x62e>
 8008e74:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008e78:	e04a      	b.n	8008f10 <_dtoa_r+0x6d8>
 8008e7a:	bf00      	nop
 8008e7c:	0800ae10 	.word	0x0800ae10
 8008e80:	0800ade8 	.word	0x0800ade8
 8008e84:	3ff00000 	.word	0x3ff00000
 8008e88:	40240000 	.word	0x40240000
 8008e8c:	401c0000 	.word	0x401c0000
 8008e90:	40140000 	.word	0x40140000
 8008e94:	3fe00000 	.word	0x3fe00000
 8008e98:	4baf      	ldr	r3, [pc, #700]	; (8009158 <_dtoa_r+0x920>)
 8008e9a:	f7f7 fbc5 	bl	8000628 <__aeabi_dmul>
 8008e9e:	4606      	mov	r6, r0
 8008ea0:	460f      	mov	r7, r1
 8008ea2:	e7ac      	b.n	8008dfe <_dtoa_r+0x5c6>
 8008ea4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008ea8:	9d00      	ldr	r5, [sp, #0]
 8008eaa:	4642      	mov	r2, r8
 8008eac:	464b      	mov	r3, r9
 8008eae:	4630      	mov	r0, r6
 8008eb0:	4639      	mov	r1, r7
 8008eb2:	f7f7 fce3 	bl	800087c <__aeabi_ddiv>
 8008eb6:	f7f7 fe67 	bl	8000b88 <__aeabi_d2iz>
 8008eba:	9002      	str	r0, [sp, #8]
 8008ebc:	f7f7 fb4a 	bl	8000554 <__aeabi_i2d>
 8008ec0:	4642      	mov	r2, r8
 8008ec2:	464b      	mov	r3, r9
 8008ec4:	f7f7 fbb0 	bl	8000628 <__aeabi_dmul>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	460b      	mov	r3, r1
 8008ecc:	4630      	mov	r0, r6
 8008ece:	4639      	mov	r1, r7
 8008ed0:	f7f7 f9f2 	bl	80002b8 <__aeabi_dsub>
 8008ed4:	9e02      	ldr	r6, [sp, #8]
 8008ed6:	9f01      	ldr	r7, [sp, #4]
 8008ed8:	3630      	adds	r6, #48	; 0x30
 8008eda:	f805 6b01 	strb.w	r6, [r5], #1
 8008ede:	9e00      	ldr	r6, [sp, #0]
 8008ee0:	1bae      	subs	r6, r5, r6
 8008ee2:	42b7      	cmp	r7, r6
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	d137      	bne.n	8008f5a <_dtoa_r+0x722>
 8008eea:	f7f7 f9e7 	bl	80002bc <__adddf3>
 8008eee:	4642      	mov	r2, r8
 8008ef0:	464b      	mov	r3, r9
 8008ef2:	4606      	mov	r6, r0
 8008ef4:	460f      	mov	r7, r1
 8008ef6:	f7f7 fe27 	bl	8000b48 <__aeabi_dcmpgt>
 8008efa:	b9c8      	cbnz	r0, 8008f30 <_dtoa_r+0x6f8>
 8008efc:	4642      	mov	r2, r8
 8008efe:	464b      	mov	r3, r9
 8008f00:	4630      	mov	r0, r6
 8008f02:	4639      	mov	r1, r7
 8008f04:	f7f7 fdf8 	bl	8000af8 <__aeabi_dcmpeq>
 8008f08:	b110      	cbz	r0, 8008f10 <_dtoa_r+0x6d8>
 8008f0a:	9b02      	ldr	r3, [sp, #8]
 8008f0c:	07d9      	lsls	r1, r3, #31
 8008f0e:	d40f      	bmi.n	8008f30 <_dtoa_r+0x6f8>
 8008f10:	4620      	mov	r0, r4
 8008f12:	4659      	mov	r1, fp
 8008f14:	f000 fac8 	bl	80094a8 <_Bfree>
 8008f18:	2300      	movs	r3, #0
 8008f1a:	702b      	strb	r3, [r5, #0]
 8008f1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f1e:	f10a 0001 	add.w	r0, sl, #1
 8008f22:	6018      	str	r0, [r3, #0]
 8008f24:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	f43f acd8 	beq.w	80088dc <_dtoa_r+0xa4>
 8008f2c:	601d      	str	r5, [r3, #0]
 8008f2e:	e4d5      	b.n	80088dc <_dtoa_r+0xa4>
 8008f30:	f8cd a01c 	str.w	sl, [sp, #28]
 8008f34:	462b      	mov	r3, r5
 8008f36:	461d      	mov	r5, r3
 8008f38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f3c:	2a39      	cmp	r2, #57	; 0x39
 8008f3e:	d108      	bne.n	8008f52 <_dtoa_r+0x71a>
 8008f40:	9a00      	ldr	r2, [sp, #0]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d1f7      	bne.n	8008f36 <_dtoa_r+0x6fe>
 8008f46:	9a07      	ldr	r2, [sp, #28]
 8008f48:	9900      	ldr	r1, [sp, #0]
 8008f4a:	3201      	adds	r2, #1
 8008f4c:	9207      	str	r2, [sp, #28]
 8008f4e:	2230      	movs	r2, #48	; 0x30
 8008f50:	700a      	strb	r2, [r1, #0]
 8008f52:	781a      	ldrb	r2, [r3, #0]
 8008f54:	3201      	adds	r2, #1
 8008f56:	701a      	strb	r2, [r3, #0]
 8008f58:	e78c      	b.n	8008e74 <_dtoa_r+0x63c>
 8008f5a:	4b7f      	ldr	r3, [pc, #508]	; (8009158 <_dtoa_r+0x920>)
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	f7f7 fb63 	bl	8000628 <__aeabi_dmul>
 8008f62:	2200      	movs	r2, #0
 8008f64:	2300      	movs	r3, #0
 8008f66:	4606      	mov	r6, r0
 8008f68:	460f      	mov	r7, r1
 8008f6a:	f7f7 fdc5 	bl	8000af8 <__aeabi_dcmpeq>
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	d09b      	beq.n	8008eaa <_dtoa_r+0x672>
 8008f72:	e7cd      	b.n	8008f10 <_dtoa_r+0x6d8>
 8008f74:	9a08      	ldr	r2, [sp, #32]
 8008f76:	2a00      	cmp	r2, #0
 8008f78:	f000 80c4 	beq.w	8009104 <_dtoa_r+0x8cc>
 8008f7c:	9a05      	ldr	r2, [sp, #20]
 8008f7e:	2a01      	cmp	r2, #1
 8008f80:	f300 80a8 	bgt.w	80090d4 <_dtoa_r+0x89c>
 8008f84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008f86:	2a00      	cmp	r2, #0
 8008f88:	f000 80a0 	beq.w	80090cc <_dtoa_r+0x894>
 8008f8c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008f90:	9e06      	ldr	r6, [sp, #24]
 8008f92:	4645      	mov	r5, r8
 8008f94:	9a04      	ldr	r2, [sp, #16]
 8008f96:	2101      	movs	r1, #1
 8008f98:	441a      	add	r2, r3
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	4498      	add	r8, r3
 8008f9e:	9204      	str	r2, [sp, #16]
 8008fa0:	f000 fb3e 	bl	8009620 <__i2b>
 8008fa4:	4607      	mov	r7, r0
 8008fa6:	2d00      	cmp	r5, #0
 8008fa8:	dd0b      	ble.n	8008fc2 <_dtoa_r+0x78a>
 8008faa:	9b04      	ldr	r3, [sp, #16]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	dd08      	ble.n	8008fc2 <_dtoa_r+0x78a>
 8008fb0:	42ab      	cmp	r3, r5
 8008fb2:	9a04      	ldr	r2, [sp, #16]
 8008fb4:	bfa8      	it	ge
 8008fb6:	462b      	movge	r3, r5
 8008fb8:	eba8 0803 	sub.w	r8, r8, r3
 8008fbc:	1aed      	subs	r5, r5, r3
 8008fbe:	1ad3      	subs	r3, r2, r3
 8008fc0:	9304      	str	r3, [sp, #16]
 8008fc2:	9b06      	ldr	r3, [sp, #24]
 8008fc4:	b1fb      	cbz	r3, 8009006 <_dtoa_r+0x7ce>
 8008fc6:	9b08      	ldr	r3, [sp, #32]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f000 809f 	beq.w	800910c <_dtoa_r+0x8d4>
 8008fce:	2e00      	cmp	r6, #0
 8008fd0:	dd11      	ble.n	8008ff6 <_dtoa_r+0x7be>
 8008fd2:	4639      	mov	r1, r7
 8008fd4:	4632      	mov	r2, r6
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	f000 fbde 	bl	8009798 <__pow5mult>
 8008fdc:	465a      	mov	r2, fp
 8008fde:	4601      	mov	r1, r0
 8008fe0:	4607      	mov	r7, r0
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	f000 fb32 	bl	800964c <__multiply>
 8008fe8:	4659      	mov	r1, fp
 8008fea:	9007      	str	r0, [sp, #28]
 8008fec:	4620      	mov	r0, r4
 8008fee:	f000 fa5b 	bl	80094a8 <_Bfree>
 8008ff2:	9b07      	ldr	r3, [sp, #28]
 8008ff4:	469b      	mov	fp, r3
 8008ff6:	9b06      	ldr	r3, [sp, #24]
 8008ff8:	1b9a      	subs	r2, r3, r6
 8008ffa:	d004      	beq.n	8009006 <_dtoa_r+0x7ce>
 8008ffc:	4659      	mov	r1, fp
 8008ffe:	4620      	mov	r0, r4
 8009000:	f000 fbca 	bl	8009798 <__pow5mult>
 8009004:	4683      	mov	fp, r0
 8009006:	2101      	movs	r1, #1
 8009008:	4620      	mov	r0, r4
 800900a:	f000 fb09 	bl	8009620 <__i2b>
 800900e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009010:	2b00      	cmp	r3, #0
 8009012:	4606      	mov	r6, r0
 8009014:	dd7c      	ble.n	8009110 <_dtoa_r+0x8d8>
 8009016:	461a      	mov	r2, r3
 8009018:	4601      	mov	r1, r0
 800901a:	4620      	mov	r0, r4
 800901c:	f000 fbbc 	bl	8009798 <__pow5mult>
 8009020:	9b05      	ldr	r3, [sp, #20]
 8009022:	2b01      	cmp	r3, #1
 8009024:	4606      	mov	r6, r0
 8009026:	dd76      	ble.n	8009116 <_dtoa_r+0x8de>
 8009028:	2300      	movs	r3, #0
 800902a:	9306      	str	r3, [sp, #24]
 800902c:	6933      	ldr	r3, [r6, #16]
 800902e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009032:	6918      	ldr	r0, [r3, #16]
 8009034:	f000 faa4 	bl	8009580 <__hi0bits>
 8009038:	f1c0 0020 	rsb	r0, r0, #32
 800903c:	9b04      	ldr	r3, [sp, #16]
 800903e:	4418      	add	r0, r3
 8009040:	f010 001f 	ands.w	r0, r0, #31
 8009044:	f000 8086 	beq.w	8009154 <_dtoa_r+0x91c>
 8009048:	f1c0 0320 	rsb	r3, r0, #32
 800904c:	2b04      	cmp	r3, #4
 800904e:	dd7f      	ble.n	8009150 <_dtoa_r+0x918>
 8009050:	f1c0 001c 	rsb	r0, r0, #28
 8009054:	9b04      	ldr	r3, [sp, #16]
 8009056:	4403      	add	r3, r0
 8009058:	4480      	add	r8, r0
 800905a:	4405      	add	r5, r0
 800905c:	9304      	str	r3, [sp, #16]
 800905e:	f1b8 0f00 	cmp.w	r8, #0
 8009062:	dd05      	ble.n	8009070 <_dtoa_r+0x838>
 8009064:	4659      	mov	r1, fp
 8009066:	4642      	mov	r2, r8
 8009068:	4620      	mov	r0, r4
 800906a:	f000 fbef 	bl	800984c <__lshift>
 800906e:	4683      	mov	fp, r0
 8009070:	9b04      	ldr	r3, [sp, #16]
 8009072:	2b00      	cmp	r3, #0
 8009074:	dd05      	ble.n	8009082 <_dtoa_r+0x84a>
 8009076:	4631      	mov	r1, r6
 8009078:	461a      	mov	r2, r3
 800907a:	4620      	mov	r0, r4
 800907c:	f000 fbe6 	bl	800984c <__lshift>
 8009080:	4606      	mov	r6, r0
 8009082:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009084:	2b00      	cmp	r3, #0
 8009086:	d069      	beq.n	800915c <_dtoa_r+0x924>
 8009088:	4631      	mov	r1, r6
 800908a:	4658      	mov	r0, fp
 800908c:	f000 fc4a 	bl	8009924 <__mcmp>
 8009090:	2800      	cmp	r0, #0
 8009092:	da63      	bge.n	800915c <_dtoa_r+0x924>
 8009094:	2300      	movs	r3, #0
 8009096:	4659      	mov	r1, fp
 8009098:	220a      	movs	r2, #10
 800909a:	4620      	mov	r0, r4
 800909c:	f000 fa26 	bl	80094ec <__multadd>
 80090a0:	9b08      	ldr	r3, [sp, #32]
 80090a2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80090a6:	4683      	mov	fp, r0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f000 818f 	beq.w	80093cc <_dtoa_r+0xb94>
 80090ae:	4639      	mov	r1, r7
 80090b0:	2300      	movs	r3, #0
 80090b2:	220a      	movs	r2, #10
 80090b4:	4620      	mov	r0, r4
 80090b6:	f000 fa19 	bl	80094ec <__multadd>
 80090ba:	f1b9 0f00 	cmp.w	r9, #0
 80090be:	4607      	mov	r7, r0
 80090c0:	f300 808e 	bgt.w	80091e0 <_dtoa_r+0x9a8>
 80090c4:	9b05      	ldr	r3, [sp, #20]
 80090c6:	2b02      	cmp	r3, #2
 80090c8:	dc50      	bgt.n	800916c <_dtoa_r+0x934>
 80090ca:	e089      	b.n	80091e0 <_dtoa_r+0x9a8>
 80090cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80090ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80090d2:	e75d      	b.n	8008f90 <_dtoa_r+0x758>
 80090d4:	9b01      	ldr	r3, [sp, #4]
 80090d6:	1e5e      	subs	r6, r3, #1
 80090d8:	9b06      	ldr	r3, [sp, #24]
 80090da:	42b3      	cmp	r3, r6
 80090dc:	bfbf      	itttt	lt
 80090de:	9b06      	ldrlt	r3, [sp, #24]
 80090e0:	9606      	strlt	r6, [sp, #24]
 80090e2:	1af2      	sublt	r2, r6, r3
 80090e4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80090e6:	bfb6      	itet	lt
 80090e8:	189b      	addlt	r3, r3, r2
 80090ea:	1b9e      	subge	r6, r3, r6
 80090ec:	930d      	strlt	r3, [sp, #52]	; 0x34
 80090ee:	9b01      	ldr	r3, [sp, #4]
 80090f0:	bfb8      	it	lt
 80090f2:	2600      	movlt	r6, #0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	bfb5      	itete	lt
 80090f8:	eba8 0503 	sublt.w	r5, r8, r3
 80090fc:	9b01      	ldrge	r3, [sp, #4]
 80090fe:	2300      	movlt	r3, #0
 8009100:	4645      	movge	r5, r8
 8009102:	e747      	b.n	8008f94 <_dtoa_r+0x75c>
 8009104:	9e06      	ldr	r6, [sp, #24]
 8009106:	9f08      	ldr	r7, [sp, #32]
 8009108:	4645      	mov	r5, r8
 800910a:	e74c      	b.n	8008fa6 <_dtoa_r+0x76e>
 800910c:	9a06      	ldr	r2, [sp, #24]
 800910e:	e775      	b.n	8008ffc <_dtoa_r+0x7c4>
 8009110:	9b05      	ldr	r3, [sp, #20]
 8009112:	2b01      	cmp	r3, #1
 8009114:	dc18      	bgt.n	8009148 <_dtoa_r+0x910>
 8009116:	9b02      	ldr	r3, [sp, #8]
 8009118:	b9b3      	cbnz	r3, 8009148 <_dtoa_r+0x910>
 800911a:	9b03      	ldr	r3, [sp, #12]
 800911c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009120:	b9a3      	cbnz	r3, 800914c <_dtoa_r+0x914>
 8009122:	9b03      	ldr	r3, [sp, #12]
 8009124:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009128:	0d1b      	lsrs	r3, r3, #20
 800912a:	051b      	lsls	r3, r3, #20
 800912c:	b12b      	cbz	r3, 800913a <_dtoa_r+0x902>
 800912e:	9b04      	ldr	r3, [sp, #16]
 8009130:	3301      	adds	r3, #1
 8009132:	9304      	str	r3, [sp, #16]
 8009134:	f108 0801 	add.w	r8, r8, #1
 8009138:	2301      	movs	r3, #1
 800913a:	9306      	str	r3, [sp, #24]
 800913c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800913e:	2b00      	cmp	r3, #0
 8009140:	f47f af74 	bne.w	800902c <_dtoa_r+0x7f4>
 8009144:	2001      	movs	r0, #1
 8009146:	e779      	b.n	800903c <_dtoa_r+0x804>
 8009148:	2300      	movs	r3, #0
 800914a:	e7f6      	b.n	800913a <_dtoa_r+0x902>
 800914c:	9b02      	ldr	r3, [sp, #8]
 800914e:	e7f4      	b.n	800913a <_dtoa_r+0x902>
 8009150:	d085      	beq.n	800905e <_dtoa_r+0x826>
 8009152:	4618      	mov	r0, r3
 8009154:	301c      	adds	r0, #28
 8009156:	e77d      	b.n	8009054 <_dtoa_r+0x81c>
 8009158:	40240000 	.word	0x40240000
 800915c:	9b01      	ldr	r3, [sp, #4]
 800915e:	2b00      	cmp	r3, #0
 8009160:	dc38      	bgt.n	80091d4 <_dtoa_r+0x99c>
 8009162:	9b05      	ldr	r3, [sp, #20]
 8009164:	2b02      	cmp	r3, #2
 8009166:	dd35      	ble.n	80091d4 <_dtoa_r+0x99c>
 8009168:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800916c:	f1b9 0f00 	cmp.w	r9, #0
 8009170:	d10d      	bne.n	800918e <_dtoa_r+0x956>
 8009172:	4631      	mov	r1, r6
 8009174:	464b      	mov	r3, r9
 8009176:	2205      	movs	r2, #5
 8009178:	4620      	mov	r0, r4
 800917a:	f000 f9b7 	bl	80094ec <__multadd>
 800917e:	4601      	mov	r1, r0
 8009180:	4606      	mov	r6, r0
 8009182:	4658      	mov	r0, fp
 8009184:	f000 fbce 	bl	8009924 <__mcmp>
 8009188:	2800      	cmp	r0, #0
 800918a:	f73f adbd 	bgt.w	8008d08 <_dtoa_r+0x4d0>
 800918e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009190:	9d00      	ldr	r5, [sp, #0]
 8009192:	ea6f 0a03 	mvn.w	sl, r3
 8009196:	f04f 0800 	mov.w	r8, #0
 800919a:	4631      	mov	r1, r6
 800919c:	4620      	mov	r0, r4
 800919e:	f000 f983 	bl	80094a8 <_Bfree>
 80091a2:	2f00      	cmp	r7, #0
 80091a4:	f43f aeb4 	beq.w	8008f10 <_dtoa_r+0x6d8>
 80091a8:	f1b8 0f00 	cmp.w	r8, #0
 80091ac:	d005      	beq.n	80091ba <_dtoa_r+0x982>
 80091ae:	45b8      	cmp	r8, r7
 80091b0:	d003      	beq.n	80091ba <_dtoa_r+0x982>
 80091b2:	4641      	mov	r1, r8
 80091b4:	4620      	mov	r0, r4
 80091b6:	f000 f977 	bl	80094a8 <_Bfree>
 80091ba:	4639      	mov	r1, r7
 80091bc:	4620      	mov	r0, r4
 80091be:	f000 f973 	bl	80094a8 <_Bfree>
 80091c2:	e6a5      	b.n	8008f10 <_dtoa_r+0x6d8>
 80091c4:	2600      	movs	r6, #0
 80091c6:	4637      	mov	r7, r6
 80091c8:	e7e1      	b.n	800918e <_dtoa_r+0x956>
 80091ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80091cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80091d0:	4637      	mov	r7, r6
 80091d2:	e599      	b.n	8008d08 <_dtoa_r+0x4d0>
 80091d4:	9b08      	ldr	r3, [sp, #32]
 80091d6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	f000 80fd 	beq.w	80093da <_dtoa_r+0xba2>
 80091e0:	2d00      	cmp	r5, #0
 80091e2:	dd05      	ble.n	80091f0 <_dtoa_r+0x9b8>
 80091e4:	4639      	mov	r1, r7
 80091e6:	462a      	mov	r2, r5
 80091e8:	4620      	mov	r0, r4
 80091ea:	f000 fb2f 	bl	800984c <__lshift>
 80091ee:	4607      	mov	r7, r0
 80091f0:	9b06      	ldr	r3, [sp, #24]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d05c      	beq.n	80092b0 <_dtoa_r+0xa78>
 80091f6:	6879      	ldr	r1, [r7, #4]
 80091f8:	4620      	mov	r0, r4
 80091fa:	f000 f915 	bl	8009428 <_Balloc>
 80091fe:	4605      	mov	r5, r0
 8009200:	b928      	cbnz	r0, 800920e <_dtoa_r+0x9d6>
 8009202:	4b80      	ldr	r3, [pc, #512]	; (8009404 <_dtoa_r+0xbcc>)
 8009204:	4602      	mov	r2, r0
 8009206:	f240 21ea 	movw	r1, #746	; 0x2ea
 800920a:	f7ff bb2e 	b.w	800886a <_dtoa_r+0x32>
 800920e:	693a      	ldr	r2, [r7, #16]
 8009210:	3202      	adds	r2, #2
 8009212:	0092      	lsls	r2, r2, #2
 8009214:	f107 010c 	add.w	r1, r7, #12
 8009218:	300c      	adds	r0, #12
 800921a:	f7fe fde1 	bl	8007de0 <memcpy>
 800921e:	2201      	movs	r2, #1
 8009220:	4629      	mov	r1, r5
 8009222:	4620      	mov	r0, r4
 8009224:	f000 fb12 	bl	800984c <__lshift>
 8009228:	9b00      	ldr	r3, [sp, #0]
 800922a:	3301      	adds	r3, #1
 800922c:	9301      	str	r3, [sp, #4]
 800922e:	9b00      	ldr	r3, [sp, #0]
 8009230:	444b      	add	r3, r9
 8009232:	9307      	str	r3, [sp, #28]
 8009234:	9b02      	ldr	r3, [sp, #8]
 8009236:	f003 0301 	and.w	r3, r3, #1
 800923a:	46b8      	mov	r8, r7
 800923c:	9306      	str	r3, [sp, #24]
 800923e:	4607      	mov	r7, r0
 8009240:	9b01      	ldr	r3, [sp, #4]
 8009242:	4631      	mov	r1, r6
 8009244:	3b01      	subs	r3, #1
 8009246:	4658      	mov	r0, fp
 8009248:	9302      	str	r3, [sp, #8]
 800924a:	f7ff fa69 	bl	8008720 <quorem>
 800924e:	4603      	mov	r3, r0
 8009250:	3330      	adds	r3, #48	; 0x30
 8009252:	9004      	str	r0, [sp, #16]
 8009254:	4641      	mov	r1, r8
 8009256:	4658      	mov	r0, fp
 8009258:	9308      	str	r3, [sp, #32]
 800925a:	f000 fb63 	bl	8009924 <__mcmp>
 800925e:	463a      	mov	r2, r7
 8009260:	4681      	mov	r9, r0
 8009262:	4631      	mov	r1, r6
 8009264:	4620      	mov	r0, r4
 8009266:	f000 fb79 	bl	800995c <__mdiff>
 800926a:	68c2      	ldr	r2, [r0, #12]
 800926c:	9b08      	ldr	r3, [sp, #32]
 800926e:	4605      	mov	r5, r0
 8009270:	bb02      	cbnz	r2, 80092b4 <_dtoa_r+0xa7c>
 8009272:	4601      	mov	r1, r0
 8009274:	4658      	mov	r0, fp
 8009276:	f000 fb55 	bl	8009924 <__mcmp>
 800927a:	9b08      	ldr	r3, [sp, #32]
 800927c:	4602      	mov	r2, r0
 800927e:	4629      	mov	r1, r5
 8009280:	4620      	mov	r0, r4
 8009282:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009286:	f000 f90f 	bl	80094a8 <_Bfree>
 800928a:	9b05      	ldr	r3, [sp, #20]
 800928c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800928e:	9d01      	ldr	r5, [sp, #4]
 8009290:	ea43 0102 	orr.w	r1, r3, r2
 8009294:	9b06      	ldr	r3, [sp, #24]
 8009296:	430b      	orrs	r3, r1
 8009298:	9b08      	ldr	r3, [sp, #32]
 800929a:	d10d      	bne.n	80092b8 <_dtoa_r+0xa80>
 800929c:	2b39      	cmp	r3, #57	; 0x39
 800929e:	d029      	beq.n	80092f4 <_dtoa_r+0xabc>
 80092a0:	f1b9 0f00 	cmp.w	r9, #0
 80092a4:	dd01      	ble.n	80092aa <_dtoa_r+0xa72>
 80092a6:	9b04      	ldr	r3, [sp, #16]
 80092a8:	3331      	adds	r3, #49	; 0x31
 80092aa:	9a02      	ldr	r2, [sp, #8]
 80092ac:	7013      	strb	r3, [r2, #0]
 80092ae:	e774      	b.n	800919a <_dtoa_r+0x962>
 80092b0:	4638      	mov	r0, r7
 80092b2:	e7b9      	b.n	8009228 <_dtoa_r+0x9f0>
 80092b4:	2201      	movs	r2, #1
 80092b6:	e7e2      	b.n	800927e <_dtoa_r+0xa46>
 80092b8:	f1b9 0f00 	cmp.w	r9, #0
 80092bc:	db06      	blt.n	80092cc <_dtoa_r+0xa94>
 80092be:	9905      	ldr	r1, [sp, #20]
 80092c0:	ea41 0909 	orr.w	r9, r1, r9
 80092c4:	9906      	ldr	r1, [sp, #24]
 80092c6:	ea59 0101 	orrs.w	r1, r9, r1
 80092ca:	d120      	bne.n	800930e <_dtoa_r+0xad6>
 80092cc:	2a00      	cmp	r2, #0
 80092ce:	ddec      	ble.n	80092aa <_dtoa_r+0xa72>
 80092d0:	4659      	mov	r1, fp
 80092d2:	2201      	movs	r2, #1
 80092d4:	4620      	mov	r0, r4
 80092d6:	9301      	str	r3, [sp, #4]
 80092d8:	f000 fab8 	bl	800984c <__lshift>
 80092dc:	4631      	mov	r1, r6
 80092de:	4683      	mov	fp, r0
 80092e0:	f000 fb20 	bl	8009924 <__mcmp>
 80092e4:	2800      	cmp	r0, #0
 80092e6:	9b01      	ldr	r3, [sp, #4]
 80092e8:	dc02      	bgt.n	80092f0 <_dtoa_r+0xab8>
 80092ea:	d1de      	bne.n	80092aa <_dtoa_r+0xa72>
 80092ec:	07da      	lsls	r2, r3, #31
 80092ee:	d5dc      	bpl.n	80092aa <_dtoa_r+0xa72>
 80092f0:	2b39      	cmp	r3, #57	; 0x39
 80092f2:	d1d8      	bne.n	80092a6 <_dtoa_r+0xa6e>
 80092f4:	9a02      	ldr	r2, [sp, #8]
 80092f6:	2339      	movs	r3, #57	; 0x39
 80092f8:	7013      	strb	r3, [r2, #0]
 80092fa:	462b      	mov	r3, r5
 80092fc:	461d      	mov	r5, r3
 80092fe:	3b01      	subs	r3, #1
 8009300:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009304:	2a39      	cmp	r2, #57	; 0x39
 8009306:	d050      	beq.n	80093aa <_dtoa_r+0xb72>
 8009308:	3201      	adds	r2, #1
 800930a:	701a      	strb	r2, [r3, #0]
 800930c:	e745      	b.n	800919a <_dtoa_r+0x962>
 800930e:	2a00      	cmp	r2, #0
 8009310:	dd03      	ble.n	800931a <_dtoa_r+0xae2>
 8009312:	2b39      	cmp	r3, #57	; 0x39
 8009314:	d0ee      	beq.n	80092f4 <_dtoa_r+0xabc>
 8009316:	3301      	adds	r3, #1
 8009318:	e7c7      	b.n	80092aa <_dtoa_r+0xa72>
 800931a:	9a01      	ldr	r2, [sp, #4]
 800931c:	9907      	ldr	r1, [sp, #28]
 800931e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009322:	428a      	cmp	r2, r1
 8009324:	d02a      	beq.n	800937c <_dtoa_r+0xb44>
 8009326:	4659      	mov	r1, fp
 8009328:	2300      	movs	r3, #0
 800932a:	220a      	movs	r2, #10
 800932c:	4620      	mov	r0, r4
 800932e:	f000 f8dd 	bl	80094ec <__multadd>
 8009332:	45b8      	cmp	r8, r7
 8009334:	4683      	mov	fp, r0
 8009336:	f04f 0300 	mov.w	r3, #0
 800933a:	f04f 020a 	mov.w	r2, #10
 800933e:	4641      	mov	r1, r8
 8009340:	4620      	mov	r0, r4
 8009342:	d107      	bne.n	8009354 <_dtoa_r+0xb1c>
 8009344:	f000 f8d2 	bl	80094ec <__multadd>
 8009348:	4680      	mov	r8, r0
 800934a:	4607      	mov	r7, r0
 800934c:	9b01      	ldr	r3, [sp, #4]
 800934e:	3301      	adds	r3, #1
 8009350:	9301      	str	r3, [sp, #4]
 8009352:	e775      	b.n	8009240 <_dtoa_r+0xa08>
 8009354:	f000 f8ca 	bl	80094ec <__multadd>
 8009358:	4639      	mov	r1, r7
 800935a:	4680      	mov	r8, r0
 800935c:	2300      	movs	r3, #0
 800935e:	220a      	movs	r2, #10
 8009360:	4620      	mov	r0, r4
 8009362:	f000 f8c3 	bl	80094ec <__multadd>
 8009366:	4607      	mov	r7, r0
 8009368:	e7f0      	b.n	800934c <_dtoa_r+0xb14>
 800936a:	f1b9 0f00 	cmp.w	r9, #0
 800936e:	9a00      	ldr	r2, [sp, #0]
 8009370:	bfcc      	ite	gt
 8009372:	464d      	movgt	r5, r9
 8009374:	2501      	movle	r5, #1
 8009376:	4415      	add	r5, r2
 8009378:	f04f 0800 	mov.w	r8, #0
 800937c:	4659      	mov	r1, fp
 800937e:	2201      	movs	r2, #1
 8009380:	4620      	mov	r0, r4
 8009382:	9301      	str	r3, [sp, #4]
 8009384:	f000 fa62 	bl	800984c <__lshift>
 8009388:	4631      	mov	r1, r6
 800938a:	4683      	mov	fp, r0
 800938c:	f000 faca 	bl	8009924 <__mcmp>
 8009390:	2800      	cmp	r0, #0
 8009392:	dcb2      	bgt.n	80092fa <_dtoa_r+0xac2>
 8009394:	d102      	bne.n	800939c <_dtoa_r+0xb64>
 8009396:	9b01      	ldr	r3, [sp, #4]
 8009398:	07db      	lsls	r3, r3, #31
 800939a:	d4ae      	bmi.n	80092fa <_dtoa_r+0xac2>
 800939c:	462b      	mov	r3, r5
 800939e:	461d      	mov	r5, r3
 80093a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80093a4:	2a30      	cmp	r2, #48	; 0x30
 80093a6:	d0fa      	beq.n	800939e <_dtoa_r+0xb66>
 80093a8:	e6f7      	b.n	800919a <_dtoa_r+0x962>
 80093aa:	9a00      	ldr	r2, [sp, #0]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d1a5      	bne.n	80092fc <_dtoa_r+0xac4>
 80093b0:	f10a 0a01 	add.w	sl, sl, #1
 80093b4:	2331      	movs	r3, #49	; 0x31
 80093b6:	e779      	b.n	80092ac <_dtoa_r+0xa74>
 80093b8:	4b13      	ldr	r3, [pc, #76]	; (8009408 <_dtoa_r+0xbd0>)
 80093ba:	f7ff baaf 	b.w	800891c <_dtoa_r+0xe4>
 80093be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f47f aa86 	bne.w	80088d2 <_dtoa_r+0x9a>
 80093c6:	4b11      	ldr	r3, [pc, #68]	; (800940c <_dtoa_r+0xbd4>)
 80093c8:	f7ff baa8 	b.w	800891c <_dtoa_r+0xe4>
 80093cc:	f1b9 0f00 	cmp.w	r9, #0
 80093d0:	dc03      	bgt.n	80093da <_dtoa_r+0xba2>
 80093d2:	9b05      	ldr	r3, [sp, #20]
 80093d4:	2b02      	cmp	r3, #2
 80093d6:	f73f aec9 	bgt.w	800916c <_dtoa_r+0x934>
 80093da:	9d00      	ldr	r5, [sp, #0]
 80093dc:	4631      	mov	r1, r6
 80093de:	4658      	mov	r0, fp
 80093e0:	f7ff f99e 	bl	8008720 <quorem>
 80093e4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80093e8:	f805 3b01 	strb.w	r3, [r5], #1
 80093ec:	9a00      	ldr	r2, [sp, #0]
 80093ee:	1aaa      	subs	r2, r5, r2
 80093f0:	4591      	cmp	r9, r2
 80093f2:	ddba      	ble.n	800936a <_dtoa_r+0xb32>
 80093f4:	4659      	mov	r1, fp
 80093f6:	2300      	movs	r3, #0
 80093f8:	220a      	movs	r2, #10
 80093fa:	4620      	mov	r0, r4
 80093fc:	f000 f876 	bl	80094ec <__multadd>
 8009400:	4683      	mov	fp, r0
 8009402:	e7eb      	b.n	80093dc <_dtoa_r+0xba4>
 8009404:	0800ad73 	.word	0x0800ad73
 8009408:	0800accc 	.word	0x0800accc
 800940c:	0800acf0 	.word	0x0800acf0

08009410 <_localeconv_r>:
 8009410:	4800      	ldr	r0, [pc, #0]	; (8009414 <_localeconv_r+0x4>)
 8009412:	4770      	bx	lr
 8009414:	20000228 	.word	0x20000228

08009418 <malloc>:
 8009418:	4b02      	ldr	r3, [pc, #8]	; (8009424 <malloc+0xc>)
 800941a:	4601      	mov	r1, r0
 800941c:	6818      	ldr	r0, [r3, #0]
 800941e:	f000 bbe1 	b.w	8009be4 <_malloc_r>
 8009422:	bf00      	nop
 8009424:	200000d4 	.word	0x200000d4

08009428 <_Balloc>:
 8009428:	b570      	push	{r4, r5, r6, lr}
 800942a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800942c:	4604      	mov	r4, r0
 800942e:	460d      	mov	r5, r1
 8009430:	b976      	cbnz	r6, 8009450 <_Balloc+0x28>
 8009432:	2010      	movs	r0, #16
 8009434:	f7ff fff0 	bl	8009418 <malloc>
 8009438:	4602      	mov	r2, r0
 800943a:	6260      	str	r0, [r4, #36]	; 0x24
 800943c:	b920      	cbnz	r0, 8009448 <_Balloc+0x20>
 800943e:	4b18      	ldr	r3, [pc, #96]	; (80094a0 <_Balloc+0x78>)
 8009440:	4818      	ldr	r0, [pc, #96]	; (80094a4 <_Balloc+0x7c>)
 8009442:	2166      	movs	r1, #102	; 0x66
 8009444:	f000 fd94 	bl	8009f70 <__assert_func>
 8009448:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800944c:	6006      	str	r6, [r0, #0]
 800944e:	60c6      	str	r6, [r0, #12]
 8009450:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009452:	68f3      	ldr	r3, [r6, #12]
 8009454:	b183      	cbz	r3, 8009478 <_Balloc+0x50>
 8009456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800945e:	b9b8      	cbnz	r0, 8009490 <_Balloc+0x68>
 8009460:	2101      	movs	r1, #1
 8009462:	fa01 f605 	lsl.w	r6, r1, r5
 8009466:	1d72      	adds	r2, r6, #5
 8009468:	0092      	lsls	r2, r2, #2
 800946a:	4620      	mov	r0, r4
 800946c:	f000 fb5a 	bl	8009b24 <_calloc_r>
 8009470:	b160      	cbz	r0, 800948c <_Balloc+0x64>
 8009472:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009476:	e00e      	b.n	8009496 <_Balloc+0x6e>
 8009478:	2221      	movs	r2, #33	; 0x21
 800947a:	2104      	movs	r1, #4
 800947c:	4620      	mov	r0, r4
 800947e:	f000 fb51 	bl	8009b24 <_calloc_r>
 8009482:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009484:	60f0      	str	r0, [r6, #12]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d1e4      	bne.n	8009456 <_Balloc+0x2e>
 800948c:	2000      	movs	r0, #0
 800948e:	bd70      	pop	{r4, r5, r6, pc}
 8009490:	6802      	ldr	r2, [r0, #0]
 8009492:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009496:	2300      	movs	r3, #0
 8009498:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800949c:	e7f7      	b.n	800948e <_Balloc+0x66>
 800949e:	bf00      	nop
 80094a0:	0800acfd 	.word	0x0800acfd
 80094a4:	0800ad84 	.word	0x0800ad84

080094a8 <_Bfree>:
 80094a8:	b570      	push	{r4, r5, r6, lr}
 80094aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80094ac:	4605      	mov	r5, r0
 80094ae:	460c      	mov	r4, r1
 80094b0:	b976      	cbnz	r6, 80094d0 <_Bfree+0x28>
 80094b2:	2010      	movs	r0, #16
 80094b4:	f7ff ffb0 	bl	8009418 <malloc>
 80094b8:	4602      	mov	r2, r0
 80094ba:	6268      	str	r0, [r5, #36]	; 0x24
 80094bc:	b920      	cbnz	r0, 80094c8 <_Bfree+0x20>
 80094be:	4b09      	ldr	r3, [pc, #36]	; (80094e4 <_Bfree+0x3c>)
 80094c0:	4809      	ldr	r0, [pc, #36]	; (80094e8 <_Bfree+0x40>)
 80094c2:	218a      	movs	r1, #138	; 0x8a
 80094c4:	f000 fd54 	bl	8009f70 <__assert_func>
 80094c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094cc:	6006      	str	r6, [r0, #0]
 80094ce:	60c6      	str	r6, [r0, #12]
 80094d0:	b13c      	cbz	r4, 80094e2 <_Bfree+0x3a>
 80094d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80094d4:	6862      	ldr	r2, [r4, #4]
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094dc:	6021      	str	r1, [r4, #0]
 80094de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80094e2:	bd70      	pop	{r4, r5, r6, pc}
 80094e4:	0800acfd 	.word	0x0800acfd
 80094e8:	0800ad84 	.word	0x0800ad84

080094ec <__multadd>:
 80094ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094f0:	690e      	ldr	r6, [r1, #16]
 80094f2:	4607      	mov	r7, r0
 80094f4:	4698      	mov	r8, r3
 80094f6:	460c      	mov	r4, r1
 80094f8:	f101 0014 	add.w	r0, r1, #20
 80094fc:	2300      	movs	r3, #0
 80094fe:	6805      	ldr	r5, [r0, #0]
 8009500:	b2a9      	uxth	r1, r5
 8009502:	fb02 8101 	mla	r1, r2, r1, r8
 8009506:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800950a:	0c2d      	lsrs	r5, r5, #16
 800950c:	fb02 c505 	mla	r5, r2, r5, ip
 8009510:	b289      	uxth	r1, r1
 8009512:	3301      	adds	r3, #1
 8009514:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009518:	429e      	cmp	r6, r3
 800951a:	f840 1b04 	str.w	r1, [r0], #4
 800951e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009522:	dcec      	bgt.n	80094fe <__multadd+0x12>
 8009524:	f1b8 0f00 	cmp.w	r8, #0
 8009528:	d022      	beq.n	8009570 <__multadd+0x84>
 800952a:	68a3      	ldr	r3, [r4, #8]
 800952c:	42b3      	cmp	r3, r6
 800952e:	dc19      	bgt.n	8009564 <__multadd+0x78>
 8009530:	6861      	ldr	r1, [r4, #4]
 8009532:	4638      	mov	r0, r7
 8009534:	3101      	adds	r1, #1
 8009536:	f7ff ff77 	bl	8009428 <_Balloc>
 800953a:	4605      	mov	r5, r0
 800953c:	b928      	cbnz	r0, 800954a <__multadd+0x5e>
 800953e:	4602      	mov	r2, r0
 8009540:	4b0d      	ldr	r3, [pc, #52]	; (8009578 <__multadd+0x8c>)
 8009542:	480e      	ldr	r0, [pc, #56]	; (800957c <__multadd+0x90>)
 8009544:	21b5      	movs	r1, #181	; 0xb5
 8009546:	f000 fd13 	bl	8009f70 <__assert_func>
 800954a:	6922      	ldr	r2, [r4, #16]
 800954c:	3202      	adds	r2, #2
 800954e:	f104 010c 	add.w	r1, r4, #12
 8009552:	0092      	lsls	r2, r2, #2
 8009554:	300c      	adds	r0, #12
 8009556:	f7fe fc43 	bl	8007de0 <memcpy>
 800955a:	4621      	mov	r1, r4
 800955c:	4638      	mov	r0, r7
 800955e:	f7ff ffa3 	bl	80094a8 <_Bfree>
 8009562:	462c      	mov	r4, r5
 8009564:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009568:	3601      	adds	r6, #1
 800956a:	f8c3 8014 	str.w	r8, [r3, #20]
 800956e:	6126      	str	r6, [r4, #16]
 8009570:	4620      	mov	r0, r4
 8009572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009576:	bf00      	nop
 8009578:	0800ad73 	.word	0x0800ad73
 800957c:	0800ad84 	.word	0x0800ad84

08009580 <__hi0bits>:
 8009580:	0c03      	lsrs	r3, r0, #16
 8009582:	041b      	lsls	r3, r3, #16
 8009584:	b9d3      	cbnz	r3, 80095bc <__hi0bits+0x3c>
 8009586:	0400      	lsls	r0, r0, #16
 8009588:	2310      	movs	r3, #16
 800958a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800958e:	bf04      	itt	eq
 8009590:	0200      	lsleq	r0, r0, #8
 8009592:	3308      	addeq	r3, #8
 8009594:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009598:	bf04      	itt	eq
 800959a:	0100      	lsleq	r0, r0, #4
 800959c:	3304      	addeq	r3, #4
 800959e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80095a2:	bf04      	itt	eq
 80095a4:	0080      	lsleq	r0, r0, #2
 80095a6:	3302      	addeq	r3, #2
 80095a8:	2800      	cmp	r0, #0
 80095aa:	db05      	blt.n	80095b8 <__hi0bits+0x38>
 80095ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80095b0:	f103 0301 	add.w	r3, r3, #1
 80095b4:	bf08      	it	eq
 80095b6:	2320      	moveq	r3, #32
 80095b8:	4618      	mov	r0, r3
 80095ba:	4770      	bx	lr
 80095bc:	2300      	movs	r3, #0
 80095be:	e7e4      	b.n	800958a <__hi0bits+0xa>

080095c0 <__lo0bits>:
 80095c0:	6803      	ldr	r3, [r0, #0]
 80095c2:	f013 0207 	ands.w	r2, r3, #7
 80095c6:	4601      	mov	r1, r0
 80095c8:	d00b      	beq.n	80095e2 <__lo0bits+0x22>
 80095ca:	07da      	lsls	r2, r3, #31
 80095cc:	d424      	bmi.n	8009618 <__lo0bits+0x58>
 80095ce:	0798      	lsls	r0, r3, #30
 80095d0:	bf49      	itett	mi
 80095d2:	085b      	lsrmi	r3, r3, #1
 80095d4:	089b      	lsrpl	r3, r3, #2
 80095d6:	2001      	movmi	r0, #1
 80095d8:	600b      	strmi	r3, [r1, #0]
 80095da:	bf5c      	itt	pl
 80095dc:	600b      	strpl	r3, [r1, #0]
 80095de:	2002      	movpl	r0, #2
 80095e0:	4770      	bx	lr
 80095e2:	b298      	uxth	r0, r3
 80095e4:	b9b0      	cbnz	r0, 8009614 <__lo0bits+0x54>
 80095e6:	0c1b      	lsrs	r3, r3, #16
 80095e8:	2010      	movs	r0, #16
 80095ea:	f013 0fff 	tst.w	r3, #255	; 0xff
 80095ee:	bf04      	itt	eq
 80095f0:	0a1b      	lsreq	r3, r3, #8
 80095f2:	3008      	addeq	r0, #8
 80095f4:	071a      	lsls	r2, r3, #28
 80095f6:	bf04      	itt	eq
 80095f8:	091b      	lsreq	r3, r3, #4
 80095fa:	3004      	addeq	r0, #4
 80095fc:	079a      	lsls	r2, r3, #30
 80095fe:	bf04      	itt	eq
 8009600:	089b      	lsreq	r3, r3, #2
 8009602:	3002      	addeq	r0, #2
 8009604:	07da      	lsls	r2, r3, #31
 8009606:	d403      	bmi.n	8009610 <__lo0bits+0x50>
 8009608:	085b      	lsrs	r3, r3, #1
 800960a:	f100 0001 	add.w	r0, r0, #1
 800960e:	d005      	beq.n	800961c <__lo0bits+0x5c>
 8009610:	600b      	str	r3, [r1, #0]
 8009612:	4770      	bx	lr
 8009614:	4610      	mov	r0, r2
 8009616:	e7e8      	b.n	80095ea <__lo0bits+0x2a>
 8009618:	2000      	movs	r0, #0
 800961a:	4770      	bx	lr
 800961c:	2020      	movs	r0, #32
 800961e:	4770      	bx	lr

08009620 <__i2b>:
 8009620:	b510      	push	{r4, lr}
 8009622:	460c      	mov	r4, r1
 8009624:	2101      	movs	r1, #1
 8009626:	f7ff feff 	bl	8009428 <_Balloc>
 800962a:	4602      	mov	r2, r0
 800962c:	b928      	cbnz	r0, 800963a <__i2b+0x1a>
 800962e:	4b05      	ldr	r3, [pc, #20]	; (8009644 <__i2b+0x24>)
 8009630:	4805      	ldr	r0, [pc, #20]	; (8009648 <__i2b+0x28>)
 8009632:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009636:	f000 fc9b 	bl	8009f70 <__assert_func>
 800963a:	2301      	movs	r3, #1
 800963c:	6144      	str	r4, [r0, #20]
 800963e:	6103      	str	r3, [r0, #16]
 8009640:	bd10      	pop	{r4, pc}
 8009642:	bf00      	nop
 8009644:	0800ad73 	.word	0x0800ad73
 8009648:	0800ad84 	.word	0x0800ad84

0800964c <__multiply>:
 800964c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009650:	4614      	mov	r4, r2
 8009652:	690a      	ldr	r2, [r1, #16]
 8009654:	6923      	ldr	r3, [r4, #16]
 8009656:	429a      	cmp	r2, r3
 8009658:	bfb8      	it	lt
 800965a:	460b      	movlt	r3, r1
 800965c:	460d      	mov	r5, r1
 800965e:	bfbc      	itt	lt
 8009660:	4625      	movlt	r5, r4
 8009662:	461c      	movlt	r4, r3
 8009664:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009668:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800966c:	68ab      	ldr	r3, [r5, #8]
 800966e:	6869      	ldr	r1, [r5, #4]
 8009670:	eb0a 0709 	add.w	r7, sl, r9
 8009674:	42bb      	cmp	r3, r7
 8009676:	b085      	sub	sp, #20
 8009678:	bfb8      	it	lt
 800967a:	3101      	addlt	r1, #1
 800967c:	f7ff fed4 	bl	8009428 <_Balloc>
 8009680:	b930      	cbnz	r0, 8009690 <__multiply+0x44>
 8009682:	4602      	mov	r2, r0
 8009684:	4b42      	ldr	r3, [pc, #264]	; (8009790 <__multiply+0x144>)
 8009686:	4843      	ldr	r0, [pc, #268]	; (8009794 <__multiply+0x148>)
 8009688:	f240 115d 	movw	r1, #349	; 0x15d
 800968c:	f000 fc70 	bl	8009f70 <__assert_func>
 8009690:	f100 0614 	add.w	r6, r0, #20
 8009694:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009698:	4633      	mov	r3, r6
 800969a:	2200      	movs	r2, #0
 800969c:	4543      	cmp	r3, r8
 800969e:	d31e      	bcc.n	80096de <__multiply+0x92>
 80096a0:	f105 0c14 	add.w	ip, r5, #20
 80096a4:	f104 0314 	add.w	r3, r4, #20
 80096a8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80096ac:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80096b0:	9202      	str	r2, [sp, #8]
 80096b2:	ebac 0205 	sub.w	r2, ip, r5
 80096b6:	3a15      	subs	r2, #21
 80096b8:	f022 0203 	bic.w	r2, r2, #3
 80096bc:	3204      	adds	r2, #4
 80096be:	f105 0115 	add.w	r1, r5, #21
 80096c2:	458c      	cmp	ip, r1
 80096c4:	bf38      	it	cc
 80096c6:	2204      	movcc	r2, #4
 80096c8:	9201      	str	r2, [sp, #4]
 80096ca:	9a02      	ldr	r2, [sp, #8]
 80096cc:	9303      	str	r3, [sp, #12]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d808      	bhi.n	80096e4 <__multiply+0x98>
 80096d2:	2f00      	cmp	r7, #0
 80096d4:	dc55      	bgt.n	8009782 <__multiply+0x136>
 80096d6:	6107      	str	r7, [r0, #16]
 80096d8:	b005      	add	sp, #20
 80096da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096de:	f843 2b04 	str.w	r2, [r3], #4
 80096e2:	e7db      	b.n	800969c <__multiply+0x50>
 80096e4:	f8b3 a000 	ldrh.w	sl, [r3]
 80096e8:	f1ba 0f00 	cmp.w	sl, #0
 80096ec:	d020      	beq.n	8009730 <__multiply+0xe4>
 80096ee:	f105 0e14 	add.w	lr, r5, #20
 80096f2:	46b1      	mov	r9, r6
 80096f4:	2200      	movs	r2, #0
 80096f6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80096fa:	f8d9 b000 	ldr.w	fp, [r9]
 80096fe:	b2a1      	uxth	r1, r4
 8009700:	fa1f fb8b 	uxth.w	fp, fp
 8009704:	fb0a b101 	mla	r1, sl, r1, fp
 8009708:	4411      	add	r1, r2
 800970a:	f8d9 2000 	ldr.w	r2, [r9]
 800970e:	0c24      	lsrs	r4, r4, #16
 8009710:	0c12      	lsrs	r2, r2, #16
 8009712:	fb0a 2404 	mla	r4, sl, r4, r2
 8009716:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800971a:	b289      	uxth	r1, r1
 800971c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009720:	45f4      	cmp	ip, lr
 8009722:	f849 1b04 	str.w	r1, [r9], #4
 8009726:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800972a:	d8e4      	bhi.n	80096f6 <__multiply+0xaa>
 800972c:	9901      	ldr	r1, [sp, #4]
 800972e:	5072      	str	r2, [r6, r1]
 8009730:	9a03      	ldr	r2, [sp, #12]
 8009732:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009736:	3304      	adds	r3, #4
 8009738:	f1b9 0f00 	cmp.w	r9, #0
 800973c:	d01f      	beq.n	800977e <__multiply+0x132>
 800973e:	6834      	ldr	r4, [r6, #0]
 8009740:	f105 0114 	add.w	r1, r5, #20
 8009744:	46b6      	mov	lr, r6
 8009746:	f04f 0a00 	mov.w	sl, #0
 800974a:	880a      	ldrh	r2, [r1, #0]
 800974c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009750:	fb09 b202 	mla	r2, r9, r2, fp
 8009754:	4492      	add	sl, r2
 8009756:	b2a4      	uxth	r4, r4
 8009758:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800975c:	f84e 4b04 	str.w	r4, [lr], #4
 8009760:	f851 4b04 	ldr.w	r4, [r1], #4
 8009764:	f8be 2000 	ldrh.w	r2, [lr]
 8009768:	0c24      	lsrs	r4, r4, #16
 800976a:	fb09 2404 	mla	r4, r9, r4, r2
 800976e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009772:	458c      	cmp	ip, r1
 8009774:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009778:	d8e7      	bhi.n	800974a <__multiply+0xfe>
 800977a:	9a01      	ldr	r2, [sp, #4]
 800977c:	50b4      	str	r4, [r6, r2]
 800977e:	3604      	adds	r6, #4
 8009780:	e7a3      	b.n	80096ca <__multiply+0x7e>
 8009782:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009786:	2b00      	cmp	r3, #0
 8009788:	d1a5      	bne.n	80096d6 <__multiply+0x8a>
 800978a:	3f01      	subs	r7, #1
 800978c:	e7a1      	b.n	80096d2 <__multiply+0x86>
 800978e:	bf00      	nop
 8009790:	0800ad73 	.word	0x0800ad73
 8009794:	0800ad84 	.word	0x0800ad84

08009798 <__pow5mult>:
 8009798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800979c:	4615      	mov	r5, r2
 800979e:	f012 0203 	ands.w	r2, r2, #3
 80097a2:	4606      	mov	r6, r0
 80097a4:	460f      	mov	r7, r1
 80097a6:	d007      	beq.n	80097b8 <__pow5mult+0x20>
 80097a8:	4c25      	ldr	r4, [pc, #148]	; (8009840 <__pow5mult+0xa8>)
 80097aa:	3a01      	subs	r2, #1
 80097ac:	2300      	movs	r3, #0
 80097ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80097b2:	f7ff fe9b 	bl	80094ec <__multadd>
 80097b6:	4607      	mov	r7, r0
 80097b8:	10ad      	asrs	r5, r5, #2
 80097ba:	d03d      	beq.n	8009838 <__pow5mult+0xa0>
 80097bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80097be:	b97c      	cbnz	r4, 80097e0 <__pow5mult+0x48>
 80097c0:	2010      	movs	r0, #16
 80097c2:	f7ff fe29 	bl	8009418 <malloc>
 80097c6:	4602      	mov	r2, r0
 80097c8:	6270      	str	r0, [r6, #36]	; 0x24
 80097ca:	b928      	cbnz	r0, 80097d8 <__pow5mult+0x40>
 80097cc:	4b1d      	ldr	r3, [pc, #116]	; (8009844 <__pow5mult+0xac>)
 80097ce:	481e      	ldr	r0, [pc, #120]	; (8009848 <__pow5mult+0xb0>)
 80097d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80097d4:	f000 fbcc 	bl	8009f70 <__assert_func>
 80097d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80097dc:	6004      	str	r4, [r0, #0]
 80097de:	60c4      	str	r4, [r0, #12]
 80097e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80097e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80097e8:	b94c      	cbnz	r4, 80097fe <__pow5mult+0x66>
 80097ea:	f240 2171 	movw	r1, #625	; 0x271
 80097ee:	4630      	mov	r0, r6
 80097f0:	f7ff ff16 	bl	8009620 <__i2b>
 80097f4:	2300      	movs	r3, #0
 80097f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80097fa:	4604      	mov	r4, r0
 80097fc:	6003      	str	r3, [r0, #0]
 80097fe:	f04f 0900 	mov.w	r9, #0
 8009802:	07eb      	lsls	r3, r5, #31
 8009804:	d50a      	bpl.n	800981c <__pow5mult+0x84>
 8009806:	4639      	mov	r1, r7
 8009808:	4622      	mov	r2, r4
 800980a:	4630      	mov	r0, r6
 800980c:	f7ff ff1e 	bl	800964c <__multiply>
 8009810:	4639      	mov	r1, r7
 8009812:	4680      	mov	r8, r0
 8009814:	4630      	mov	r0, r6
 8009816:	f7ff fe47 	bl	80094a8 <_Bfree>
 800981a:	4647      	mov	r7, r8
 800981c:	106d      	asrs	r5, r5, #1
 800981e:	d00b      	beq.n	8009838 <__pow5mult+0xa0>
 8009820:	6820      	ldr	r0, [r4, #0]
 8009822:	b938      	cbnz	r0, 8009834 <__pow5mult+0x9c>
 8009824:	4622      	mov	r2, r4
 8009826:	4621      	mov	r1, r4
 8009828:	4630      	mov	r0, r6
 800982a:	f7ff ff0f 	bl	800964c <__multiply>
 800982e:	6020      	str	r0, [r4, #0]
 8009830:	f8c0 9000 	str.w	r9, [r0]
 8009834:	4604      	mov	r4, r0
 8009836:	e7e4      	b.n	8009802 <__pow5mult+0x6a>
 8009838:	4638      	mov	r0, r7
 800983a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800983e:	bf00      	nop
 8009840:	0800aed8 	.word	0x0800aed8
 8009844:	0800acfd 	.word	0x0800acfd
 8009848:	0800ad84 	.word	0x0800ad84

0800984c <__lshift>:
 800984c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009850:	460c      	mov	r4, r1
 8009852:	6849      	ldr	r1, [r1, #4]
 8009854:	6923      	ldr	r3, [r4, #16]
 8009856:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800985a:	68a3      	ldr	r3, [r4, #8]
 800985c:	4607      	mov	r7, r0
 800985e:	4691      	mov	r9, r2
 8009860:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009864:	f108 0601 	add.w	r6, r8, #1
 8009868:	42b3      	cmp	r3, r6
 800986a:	db0b      	blt.n	8009884 <__lshift+0x38>
 800986c:	4638      	mov	r0, r7
 800986e:	f7ff fddb 	bl	8009428 <_Balloc>
 8009872:	4605      	mov	r5, r0
 8009874:	b948      	cbnz	r0, 800988a <__lshift+0x3e>
 8009876:	4602      	mov	r2, r0
 8009878:	4b28      	ldr	r3, [pc, #160]	; (800991c <__lshift+0xd0>)
 800987a:	4829      	ldr	r0, [pc, #164]	; (8009920 <__lshift+0xd4>)
 800987c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009880:	f000 fb76 	bl	8009f70 <__assert_func>
 8009884:	3101      	adds	r1, #1
 8009886:	005b      	lsls	r3, r3, #1
 8009888:	e7ee      	b.n	8009868 <__lshift+0x1c>
 800988a:	2300      	movs	r3, #0
 800988c:	f100 0114 	add.w	r1, r0, #20
 8009890:	f100 0210 	add.w	r2, r0, #16
 8009894:	4618      	mov	r0, r3
 8009896:	4553      	cmp	r3, sl
 8009898:	db33      	blt.n	8009902 <__lshift+0xb6>
 800989a:	6920      	ldr	r0, [r4, #16]
 800989c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80098a0:	f104 0314 	add.w	r3, r4, #20
 80098a4:	f019 091f 	ands.w	r9, r9, #31
 80098a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80098ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80098b0:	d02b      	beq.n	800990a <__lshift+0xbe>
 80098b2:	f1c9 0e20 	rsb	lr, r9, #32
 80098b6:	468a      	mov	sl, r1
 80098b8:	2200      	movs	r2, #0
 80098ba:	6818      	ldr	r0, [r3, #0]
 80098bc:	fa00 f009 	lsl.w	r0, r0, r9
 80098c0:	4302      	orrs	r2, r0
 80098c2:	f84a 2b04 	str.w	r2, [sl], #4
 80098c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80098ca:	459c      	cmp	ip, r3
 80098cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80098d0:	d8f3      	bhi.n	80098ba <__lshift+0x6e>
 80098d2:	ebac 0304 	sub.w	r3, ip, r4
 80098d6:	3b15      	subs	r3, #21
 80098d8:	f023 0303 	bic.w	r3, r3, #3
 80098dc:	3304      	adds	r3, #4
 80098de:	f104 0015 	add.w	r0, r4, #21
 80098e2:	4584      	cmp	ip, r0
 80098e4:	bf38      	it	cc
 80098e6:	2304      	movcc	r3, #4
 80098e8:	50ca      	str	r2, [r1, r3]
 80098ea:	b10a      	cbz	r2, 80098f0 <__lshift+0xa4>
 80098ec:	f108 0602 	add.w	r6, r8, #2
 80098f0:	3e01      	subs	r6, #1
 80098f2:	4638      	mov	r0, r7
 80098f4:	612e      	str	r6, [r5, #16]
 80098f6:	4621      	mov	r1, r4
 80098f8:	f7ff fdd6 	bl	80094a8 <_Bfree>
 80098fc:	4628      	mov	r0, r5
 80098fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009902:	f842 0f04 	str.w	r0, [r2, #4]!
 8009906:	3301      	adds	r3, #1
 8009908:	e7c5      	b.n	8009896 <__lshift+0x4a>
 800990a:	3904      	subs	r1, #4
 800990c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009910:	f841 2f04 	str.w	r2, [r1, #4]!
 8009914:	459c      	cmp	ip, r3
 8009916:	d8f9      	bhi.n	800990c <__lshift+0xc0>
 8009918:	e7ea      	b.n	80098f0 <__lshift+0xa4>
 800991a:	bf00      	nop
 800991c:	0800ad73 	.word	0x0800ad73
 8009920:	0800ad84 	.word	0x0800ad84

08009924 <__mcmp>:
 8009924:	b530      	push	{r4, r5, lr}
 8009926:	6902      	ldr	r2, [r0, #16]
 8009928:	690c      	ldr	r4, [r1, #16]
 800992a:	1b12      	subs	r2, r2, r4
 800992c:	d10e      	bne.n	800994c <__mcmp+0x28>
 800992e:	f100 0314 	add.w	r3, r0, #20
 8009932:	3114      	adds	r1, #20
 8009934:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009938:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800993c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009940:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009944:	42a5      	cmp	r5, r4
 8009946:	d003      	beq.n	8009950 <__mcmp+0x2c>
 8009948:	d305      	bcc.n	8009956 <__mcmp+0x32>
 800994a:	2201      	movs	r2, #1
 800994c:	4610      	mov	r0, r2
 800994e:	bd30      	pop	{r4, r5, pc}
 8009950:	4283      	cmp	r3, r0
 8009952:	d3f3      	bcc.n	800993c <__mcmp+0x18>
 8009954:	e7fa      	b.n	800994c <__mcmp+0x28>
 8009956:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800995a:	e7f7      	b.n	800994c <__mcmp+0x28>

0800995c <__mdiff>:
 800995c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009960:	460c      	mov	r4, r1
 8009962:	4606      	mov	r6, r0
 8009964:	4611      	mov	r1, r2
 8009966:	4620      	mov	r0, r4
 8009968:	4617      	mov	r7, r2
 800996a:	f7ff ffdb 	bl	8009924 <__mcmp>
 800996e:	1e05      	subs	r5, r0, #0
 8009970:	d110      	bne.n	8009994 <__mdiff+0x38>
 8009972:	4629      	mov	r1, r5
 8009974:	4630      	mov	r0, r6
 8009976:	f7ff fd57 	bl	8009428 <_Balloc>
 800997a:	b930      	cbnz	r0, 800998a <__mdiff+0x2e>
 800997c:	4b39      	ldr	r3, [pc, #228]	; (8009a64 <__mdiff+0x108>)
 800997e:	4602      	mov	r2, r0
 8009980:	f240 2132 	movw	r1, #562	; 0x232
 8009984:	4838      	ldr	r0, [pc, #224]	; (8009a68 <__mdiff+0x10c>)
 8009986:	f000 faf3 	bl	8009f70 <__assert_func>
 800998a:	2301      	movs	r3, #1
 800998c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009990:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009994:	bfa4      	itt	ge
 8009996:	463b      	movge	r3, r7
 8009998:	4627      	movge	r7, r4
 800999a:	4630      	mov	r0, r6
 800999c:	6879      	ldr	r1, [r7, #4]
 800999e:	bfa6      	itte	ge
 80099a0:	461c      	movge	r4, r3
 80099a2:	2500      	movge	r5, #0
 80099a4:	2501      	movlt	r5, #1
 80099a6:	f7ff fd3f 	bl	8009428 <_Balloc>
 80099aa:	b920      	cbnz	r0, 80099b6 <__mdiff+0x5a>
 80099ac:	4b2d      	ldr	r3, [pc, #180]	; (8009a64 <__mdiff+0x108>)
 80099ae:	4602      	mov	r2, r0
 80099b0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80099b4:	e7e6      	b.n	8009984 <__mdiff+0x28>
 80099b6:	693e      	ldr	r6, [r7, #16]
 80099b8:	60c5      	str	r5, [r0, #12]
 80099ba:	6925      	ldr	r5, [r4, #16]
 80099bc:	f107 0114 	add.w	r1, r7, #20
 80099c0:	f104 0914 	add.w	r9, r4, #20
 80099c4:	f100 0e14 	add.w	lr, r0, #20
 80099c8:	f107 0210 	add.w	r2, r7, #16
 80099cc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80099d0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80099d4:	46f2      	mov	sl, lr
 80099d6:	2700      	movs	r7, #0
 80099d8:	f859 3b04 	ldr.w	r3, [r9], #4
 80099dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80099e0:	fa1f f883 	uxth.w	r8, r3
 80099e4:	fa17 f78b 	uxtah	r7, r7, fp
 80099e8:	0c1b      	lsrs	r3, r3, #16
 80099ea:	eba7 0808 	sub.w	r8, r7, r8
 80099ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80099f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80099f6:	fa1f f888 	uxth.w	r8, r8
 80099fa:	141f      	asrs	r7, r3, #16
 80099fc:	454d      	cmp	r5, r9
 80099fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009a02:	f84a 3b04 	str.w	r3, [sl], #4
 8009a06:	d8e7      	bhi.n	80099d8 <__mdiff+0x7c>
 8009a08:	1b2b      	subs	r3, r5, r4
 8009a0a:	3b15      	subs	r3, #21
 8009a0c:	f023 0303 	bic.w	r3, r3, #3
 8009a10:	3304      	adds	r3, #4
 8009a12:	3415      	adds	r4, #21
 8009a14:	42a5      	cmp	r5, r4
 8009a16:	bf38      	it	cc
 8009a18:	2304      	movcc	r3, #4
 8009a1a:	4419      	add	r1, r3
 8009a1c:	4473      	add	r3, lr
 8009a1e:	469e      	mov	lr, r3
 8009a20:	460d      	mov	r5, r1
 8009a22:	4565      	cmp	r5, ip
 8009a24:	d30e      	bcc.n	8009a44 <__mdiff+0xe8>
 8009a26:	f10c 0203 	add.w	r2, ip, #3
 8009a2a:	1a52      	subs	r2, r2, r1
 8009a2c:	f022 0203 	bic.w	r2, r2, #3
 8009a30:	3903      	subs	r1, #3
 8009a32:	458c      	cmp	ip, r1
 8009a34:	bf38      	it	cc
 8009a36:	2200      	movcc	r2, #0
 8009a38:	441a      	add	r2, r3
 8009a3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009a3e:	b17b      	cbz	r3, 8009a60 <__mdiff+0x104>
 8009a40:	6106      	str	r6, [r0, #16]
 8009a42:	e7a5      	b.n	8009990 <__mdiff+0x34>
 8009a44:	f855 8b04 	ldr.w	r8, [r5], #4
 8009a48:	fa17 f488 	uxtah	r4, r7, r8
 8009a4c:	1422      	asrs	r2, r4, #16
 8009a4e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009a52:	b2a4      	uxth	r4, r4
 8009a54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009a58:	f84e 4b04 	str.w	r4, [lr], #4
 8009a5c:	1417      	asrs	r7, r2, #16
 8009a5e:	e7e0      	b.n	8009a22 <__mdiff+0xc6>
 8009a60:	3e01      	subs	r6, #1
 8009a62:	e7ea      	b.n	8009a3a <__mdiff+0xde>
 8009a64:	0800ad73 	.word	0x0800ad73
 8009a68:	0800ad84 	.word	0x0800ad84

08009a6c <__d2b>:
 8009a6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a70:	4689      	mov	r9, r1
 8009a72:	2101      	movs	r1, #1
 8009a74:	ec57 6b10 	vmov	r6, r7, d0
 8009a78:	4690      	mov	r8, r2
 8009a7a:	f7ff fcd5 	bl	8009428 <_Balloc>
 8009a7e:	4604      	mov	r4, r0
 8009a80:	b930      	cbnz	r0, 8009a90 <__d2b+0x24>
 8009a82:	4602      	mov	r2, r0
 8009a84:	4b25      	ldr	r3, [pc, #148]	; (8009b1c <__d2b+0xb0>)
 8009a86:	4826      	ldr	r0, [pc, #152]	; (8009b20 <__d2b+0xb4>)
 8009a88:	f240 310a 	movw	r1, #778	; 0x30a
 8009a8c:	f000 fa70 	bl	8009f70 <__assert_func>
 8009a90:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009a94:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a98:	bb35      	cbnz	r5, 8009ae8 <__d2b+0x7c>
 8009a9a:	2e00      	cmp	r6, #0
 8009a9c:	9301      	str	r3, [sp, #4]
 8009a9e:	d028      	beq.n	8009af2 <__d2b+0x86>
 8009aa0:	4668      	mov	r0, sp
 8009aa2:	9600      	str	r6, [sp, #0]
 8009aa4:	f7ff fd8c 	bl	80095c0 <__lo0bits>
 8009aa8:	9900      	ldr	r1, [sp, #0]
 8009aaa:	b300      	cbz	r0, 8009aee <__d2b+0x82>
 8009aac:	9a01      	ldr	r2, [sp, #4]
 8009aae:	f1c0 0320 	rsb	r3, r0, #32
 8009ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ab6:	430b      	orrs	r3, r1
 8009ab8:	40c2      	lsrs	r2, r0
 8009aba:	6163      	str	r3, [r4, #20]
 8009abc:	9201      	str	r2, [sp, #4]
 8009abe:	9b01      	ldr	r3, [sp, #4]
 8009ac0:	61a3      	str	r3, [r4, #24]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	bf14      	ite	ne
 8009ac6:	2202      	movne	r2, #2
 8009ac8:	2201      	moveq	r2, #1
 8009aca:	6122      	str	r2, [r4, #16]
 8009acc:	b1d5      	cbz	r5, 8009b04 <__d2b+0x98>
 8009ace:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009ad2:	4405      	add	r5, r0
 8009ad4:	f8c9 5000 	str.w	r5, [r9]
 8009ad8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009adc:	f8c8 0000 	str.w	r0, [r8]
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	b003      	add	sp, #12
 8009ae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ae8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009aec:	e7d5      	b.n	8009a9a <__d2b+0x2e>
 8009aee:	6161      	str	r1, [r4, #20]
 8009af0:	e7e5      	b.n	8009abe <__d2b+0x52>
 8009af2:	a801      	add	r0, sp, #4
 8009af4:	f7ff fd64 	bl	80095c0 <__lo0bits>
 8009af8:	9b01      	ldr	r3, [sp, #4]
 8009afa:	6163      	str	r3, [r4, #20]
 8009afc:	2201      	movs	r2, #1
 8009afe:	6122      	str	r2, [r4, #16]
 8009b00:	3020      	adds	r0, #32
 8009b02:	e7e3      	b.n	8009acc <__d2b+0x60>
 8009b04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009b08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009b0c:	f8c9 0000 	str.w	r0, [r9]
 8009b10:	6918      	ldr	r0, [r3, #16]
 8009b12:	f7ff fd35 	bl	8009580 <__hi0bits>
 8009b16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009b1a:	e7df      	b.n	8009adc <__d2b+0x70>
 8009b1c:	0800ad73 	.word	0x0800ad73
 8009b20:	0800ad84 	.word	0x0800ad84

08009b24 <_calloc_r>:
 8009b24:	b513      	push	{r0, r1, r4, lr}
 8009b26:	434a      	muls	r2, r1
 8009b28:	4611      	mov	r1, r2
 8009b2a:	9201      	str	r2, [sp, #4]
 8009b2c:	f000 f85a 	bl	8009be4 <_malloc_r>
 8009b30:	4604      	mov	r4, r0
 8009b32:	b118      	cbz	r0, 8009b3c <_calloc_r+0x18>
 8009b34:	9a01      	ldr	r2, [sp, #4]
 8009b36:	2100      	movs	r1, #0
 8009b38:	f7fe f960 	bl	8007dfc <memset>
 8009b3c:	4620      	mov	r0, r4
 8009b3e:	b002      	add	sp, #8
 8009b40:	bd10      	pop	{r4, pc}
	...

08009b44 <_free_r>:
 8009b44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b46:	2900      	cmp	r1, #0
 8009b48:	d048      	beq.n	8009bdc <_free_r+0x98>
 8009b4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b4e:	9001      	str	r0, [sp, #4]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	f1a1 0404 	sub.w	r4, r1, #4
 8009b56:	bfb8      	it	lt
 8009b58:	18e4      	addlt	r4, r4, r3
 8009b5a:	f000 fa65 	bl	800a028 <__malloc_lock>
 8009b5e:	4a20      	ldr	r2, [pc, #128]	; (8009be0 <_free_r+0x9c>)
 8009b60:	9801      	ldr	r0, [sp, #4]
 8009b62:	6813      	ldr	r3, [r2, #0]
 8009b64:	4615      	mov	r5, r2
 8009b66:	b933      	cbnz	r3, 8009b76 <_free_r+0x32>
 8009b68:	6063      	str	r3, [r4, #4]
 8009b6a:	6014      	str	r4, [r2, #0]
 8009b6c:	b003      	add	sp, #12
 8009b6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b72:	f000 ba5f 	b.w	800a034 <__malloc_unlock>
 8009b76:	42a3      	cmp	r3, r4
 8009b78:	d90b      	bls.n	8009b92 <_free_r+0x4e>
 8009b7a:	6821      	ldr	r1, [r4, #0]
 8009b7c:	1862      	adds	r2, r4, r1
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	bf04      	itt	eq
 8009b82:	681a      	ldreq	r2, [r3, #0]
 8009b84:	685b      	ldreq	r3, [r3, #4]
 8009b86:	6063      	str	r3, [r4, #4]
 8009b88:	bf04      	itt	eq
 8009b8a:	1852      	addeq	r2, r2, r1
 8009b8c:	6022      	streq	r2, [r4, #0]
 8009b8e:	602c      	str	r4, [r5, #0]
 8009b90:	e7ec      	b.n	8009b6c <_free_r+0x28>
 8009b92:	461a      	mov	r2, r3
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	b10b      	cbz	r3, 8009b9c <_free_r+0x58>
 8009b98:	42a3      	cmp	r3, r4
 8009b9a:	d9fa      	bls.n	8009b92 <_free_r+0x4e>
 8009b9c:	6811      	ldr	r1, [r2, #0]
 8009b9e:	1855      	adds	r5, r2, r1
 8009ba0:	42a5      	cmp	r5, r4
 8009ba2:	d10b      	bne.n	8009bbc <_free_r+0x78>
 8009ba4:	6824      	ldr	r4, [r4, #0]
 8009ba6:	4421      	add	r1, r4
 8009ba8:	1854      	adds	r4, r2, r1
 8009baa:	42a3      	cmp	r3, r4
 8009bac:	6011      	str	r1, [r2, #0]
 8009bae:	d1dd      	bne.n	8009b6c <_free_r+0x28>
 8009bb0:	681c      	ldr	r4, [r3, #0]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	6053      	str	r3, [r2, #4]
 8009bb6:	4421      	add	r1, r4
 8009bb8:	6011      	str	r1, [r2, #0]
 8009bba:	e7d7      	b.n	8009b6c <_free_r+0x28>
 8009bbc:	d902      	bls.n	8009bc4 <_free_r+0x80>
 8009bbe:	230c      	movs	r3, #12
 8009bc0:	6003      	str	r3, [r0, #0]
 8009bc2:	e7d3      	b.n	8009b6c <_free_r+0x28>
 8009bc4:	6825      	ldr	r5, [r4, #0]
 8009bc6:	1961      	adds	r1, r4, r5
 8009bc8:	428b      	cmp	r3, r1
 8009bca:	bf04      	itt	eq
 8009bcc:	6819      	ldreq	r1, [r3, #0]
 8009bce:	685b      	ldreq	r3, [r3, #4]
 8009bd0:	6063      	str	r3, [r4, #4]
 8009bd2:	bf04      	itt	eq
 8009bd4:	1949      	addeq	r1, r1, r5
 8009bd6:	6021      	streq	r1, [r4, #0]
 8009bd8:	6054      	str	r4, [r2, #4]
 8009bda:	e7c7      	b.n	8009b6c <_free_r+0x28>
 8009bdc:	b003      	add	sp, #12
 8009bde:	bd30      	pop	{r4, r5, pc}
 8009be0:	20001248 	.word	0x20001248

08009be4 <_malloc_r>:
 8009be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009be6:	1ccd      	adds	r5, r1, #3
 8009be8:	f025 0503 	bic.w	r5, r5, #3
 8009bec:	3508      	adds	r5, #8
 8009bee:	2d0c      	cmp	r5, #12
 8009bf0:	bf38      	it	cc
 8009bf2:	250c      	movcc	r5, #12
 8009bf4:	2d00      	cmp	r5, #0
 8009bf6:	4606      	mov	r6, r0
 8009bf8:	db01      	blt.n	8009bfe <_malloc_r+0x1a>
 8009bfa:	42a9      	cmp	r1, r5
 8009bfc:	d903      	bls.n	8009c06 <_malloc_r+0x22>
 8009bfe:	230c      	movs	r3, #12
 8009c00:	6033      	str	r3, [r6, #0]
 8009c02:	2000      	movs	r0, #0
 8009c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c06:	f000 fa0f 	bl	800a028 <__malloc_lock>
 8009c0a:	4921      	ldr	r1, [pc, #132]	; (8009c90 <_malloc_r+0xac>)
 8009c0c:	680a      	ldr	r2, [r1, #0]
 8009c0e:	4614      	mov	r4, r2
 8009c10:	b99c      	cbnz	r4, 8009c3a <_malloc_r+0x56>
 8009c12:	4f20      	ldr	r7, [pc, #128]	; (8009c94 <_malloc_r+0xb0>)
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	b923      	cbnz	r3, 8009c22 <_malloc_r+0x3e>
 8009c18:	4621      	mov	r1, r4
 8009c1a:	4630      	mov	r0, r6
 8009c1c:	f000 f998 	bl	8009f50 <_sbrk_r>
 8009c20:	6038      	str	r0, [r7, #0]
 8009c22:	4629      	mov	r1, r5
 8009c24:	4630      	mov	r0, r6
 8009c26:	f000 f993 	bl	8009f50 <_sbrk_r>
 8009c2a:	1c43      	adds	r3, r0, #1
 8009c2c:	d123      	bne.n	8009c76 <_malloc_r+0x92>
 8009c2e:	230c      	movs	r3, #12
 8009c30:	6033      	str	r3, [r6, #0]
 8009c32:	4630      	mov	r0, r6
 8009c34:	f000 f9fe 	bl	800a034 <__malloc_unlock>
 8009c38:	e7e3      	b.n	8009c02 <_malloc_r+0x1e>
 8009c3a:	6823      	ldr	r3, [r4, #0]
 8009c3c:	1b5b      	subs	r3, r3, r5
 8009c3e:	d417      	bmi.n	8009c70 <_malloc_r+0x8c>
 8009c40:	2b0b      	cmp	r3, #11
 8009c42:	d903      	bls.n	8009c4c <_malloc_r+0x68>
 8009c44:	6023      	str	r3, [r4, #0]
 8009c46:	441c      	add	r4, r3
 8009c48:	6025      	str	r5, [r4, #0]
 8009c4a:	e004      	b.n	8009c56 <_malloc_r+0x72>
 8009c4c:	6863      	ldr	r3, [r4, #4]
 8009c4e:	42a2      	cmp	r2, r4
 8009c50:	bf0c      	ite	eq
 8009c52:	600b      	streq	r3, [r1, #0]
 8009c54:	6053      	strne	r3, [r2, #4]
 8009c56:	4630      	mov	r0, r6
 8009c58:	f000 f9ec 	bl	800a034 <__malloc_unlock>
 8009c5c:	f104 000b 	add.w	r0, r4, #11
 8009c60:	1d23      	adds	r3, r4, #4
 8009c62:	f020 0007 	bic.w	r0, r0, #7
 8009c66:	1ac2      	subs	r2, r0, r3
 8009c68:	d0cc      	beq.n	8009c04 <_malloc_r+0x20>
 8009c6a:	1a1b      	subs	r3, r3, r0
 8009c6c:	50a3      	str	r3, [r4, r2]
 8009c6e:	e7c9      	b.n	8009c04 <_malloc_r+0x20>
 8009c70:	4622      	mov	r2, r4
 8009c72:	6864      	ldr	r4, [r4, #4]
 8009c74:	e7cc      	b.n	8009c10 <_malloc_r+0x2c>
 8009c76:	1cc4      	adds	r4, r0, #3
 8009c78:	f024 0403 	bic.w	r4, r4, #3
 8009c7c:	42a0      	cmp	r0, r4
 8009c7e:	d0e3      	beq.n	8009c48 <_malloc_r+0x64>
 8009c80:	1a21      	subs	r1, r4, r0
 8009c82:	4630      	mov	r0, r6
 8009c84:	f000 f964 	bl	8009f50 <_sbrk_r>
 8009c88:	3001      	adds	r0, #1
 8009c8a:	d1dd      	bne.n	8009c48 <_malloc_r+0x64>
 8009c8c:	e7cf      	b.n	8009c2e <_malloc_r+0x4a>
 8009c8e:	bf00      	nop
 8009c90:	20001248 	.word	0x20001248
 8009c94:	2000124c 	.word	0x2000124c

08009c98 <__ssputs_r>:
 8009c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c9c:	688e      	ldr	r6, [r1, #8]
 8009c9e:	429e      	cmp	r6, r3
 8009ca0:	4682      	mov	sl, r0
 8009ca2:	460c      	mov	r4, r1
 8009ca4:	4690      	mov	r8, r2
 8009ca6:	461f      	mov	r7, r3
 8009ca8:	d838      	bhi.n	8009d1c <__ssputs_r+0x84>
 8009caa:	898a      	ldrh	r2, [r1, #12]
 8009cac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009cb0:	d032      	beq.n	8009d18 <__ssputs_r+0x80>
 8009cb2:	6825      	ldr	r5, [r4, #0]
 8009cb4:	6909      	ldr	r1, [r1, #16]
 8009cb6:	eba5 0901 	sub.w	r9, r5, r1
 8009cba:	6965      	ldr	r5, [r4, #20]
 8009cbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009cc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	444b      	add	r3, r9
 8009cc8:	106d      	asrs	r5, r5, #1
 8009cca:	429d      	cmp	r5, r3
 8009ccc:	bf38      	it	cc
 8009cce:	461d      	movcc	r5, r3
 8009cd0:	0553      	lsls	r3, r2, #21
 8009cd2:	d531      	bpl.n	8009d38 <__ssputs_r+0xa0>
 8009cd4:	4629      	mov	r1, r5
 8009cd6:	f7ff ff85 	bl	8009be4 <_malloc_r>
 8009cda:	4606      	mov	r6, r0
 8009cdc:	b950      	cbnz	r0, 8009cf4 <__ssputs_r+0x5c>
 8009cde:	230c      	movs	r3, #12
 8009ce0:	f8ca 3000 	str.w	r3, [sl]
 8009ce4:	89a3      	ldrh	r3, [r4, #12]
 8009ce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cea:	81a3      	strh	r3, [r4, #12]
 8009cec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cf4:	6921      	ldr	r1, [r4, #16]
 8009cf6:	464a      	mov	r2, r9
 8009cf8:	f7fe f872 	bl	8007de0 <memcpy>
 8009cfc:	89a3      	ldrh	r3, [r4, #12]
 8009cfe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d06:	81a3      	strh	r3, [r4, #12]
 8009d08:	6126      	str	r6, [r4, #16]
 8009d0a:	6165      	str	r5, [r4, #20]
 8009d0c:	444e      	add	r6, r9
 8009d0e:	eba5 0509 	sub.w	r5, r5, r9
 8009d12:	6026      	str	r6, [r4, #0]
 8009d14:	60a5      	str	r5, [r4, #8]
 8009d16:	463e      	mov	r6, r7
 8009d18:	42be      	cmp	r6, r7
 8009d1a:	d900      	bls.n	8009d1e <__ssputs_r+0x86>
 8009d1c:	463e      	mov	r6, r7
 8009d1e:	4632      	mov	r2, r6
 8009d20:	6820      	ldr	r0, [r4, #0]
 8009d22:	4641      	mov	r1, r8
 8009d24:	f000 f966 	bl	8009ff4 <memmove>
 8009d28:	68a3      	ldr	r3, [r4, #8]
 8009d2a:	6822      	ldr	r2, [r4, #0]
 8009d2c:	1b9b      	subs	r3, r3, r6
 8009d2e:	4432      	add	r2, r6
 8009d30:	60a3      	str	r3, [r4, #8]
 8009d32:	6022      	str	r2, [r4, #0]
 8009d34:	2000      	movs	r0, #0
 8009d36:	e7db      	b.n	8009cf0 <__ssputs_r+0x58>
 8009d38:	462a      	mov	r2, r5
 8009d3a:	f000 f981 	bl	800a040 <_realloc_r>
 8009d3e:	4606      	mov	r6, r0
 8009d40:	2800      	cmp	r0, #0
 8009d42:	d1e1      	bne.n	8009d08 <__ssputs_r+0x70>
 8009d44:	6921      	ldr	r1, [r4, #16]
 8009d46:	4650      	mov	r0, sl
 8009d48:	f7ff fefc 	bl	8009b44 <_free_r>
 8009d4c:	e7c7      	b.n	8009cde <__ssputs_r+0x46>
	...

08009d50 <_svfiprintf_r>:
 8009d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d54:	4698      	mov	r8, r3
 8009d56:	898b      	ldrh	r3, [r1, #12]
 8009d58:	061b      	lsls	r3, r3, #24
 8009d5a:	b09d      	sub	sp, #116	; 0x74
 8009d5c:	4607      	mov	r7, r0
 8009d5e:	460d      	mov	r5, r1
 8009d60:	4614      	mov	r4, r2
 8009d62:	d50e      	bpl.n	8009d82 <_svfiprintf_r+0x32>
 8009d64:	690b      	ldr	r3, [r1, #16]
 8009d66:	b963      	cbnz	r3, 8009d82 <_svfiprintf_r+0x32>
 8009d68:	2140      	movs	r1, #64	; 0x40
 8009d6a:	f7ff ff3b 	bl	8009be4 <_malloc_r>
 8009d6e:	6028      	str	r0, [r5, #0]
 8009d70:	6128      	str	r0, [r5, #16]
 8009d72:	b920      	cbnz	r0, 8009d7e <_svfiprintf_r+0x2e>
 8009d74:	230c      	movs	r3, #12
 8009d76:	603b      	str	r3, [r7, #0]
 8009d78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d7c:	e0d1      	b.n	8009f22 <_svfiprintf_r+0x1d2>
 8009d7e:	2340      	movs	r3, #64	; 0x40
 8009d80:	616b      	str	r3, [r5, #20]
 8009d82:	2300      	movs	r3, #0
 8009d84:	9309      	str	r3, [sp, #36]	; 0x24
 8009d86:	2320      	movs	r3, #32
 8009d88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d90:	2330      	movs	r3, #48	; 0x30
 8009d92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009f3c <_svfiprintf_r+0x1ec>
 8009d96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d9a:	f04f 0901 	mov.w	r9, #1
 8009d9e:	4623      	mov	r3, r4
 8009da0:	469a      	mov	sl, r3
 8009da2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009da6:	b10a      	cbz	r2, 8009dac <_svfiprintf_r+0x5c>
 8009da8:	2a25      	cmp	r2, #37	; 0x25
 8009daa:	d1f9      	bne.n	8009da0 <_svfiprintf_r+0x50>
 8009dac:	ebba 0b04 	subs.w	fp, sl, r4
 8009db0:	d00b      	beq.n	8009dca <_svfiprintf_r+0x7a>
 8009db2:	465b      	mov	r3, fp
 8009db4:	4622      	mov	r2, r4
 8009db6:	4629      	mov	r1, r5
 8009db8:	4638      	mov	r0, r7
 8009dba:	f7ff ff6d 	bl	8009c98 <__ssputs_r>
 8009dbe:	3001      	adds	r0, #1
 8009dc0:	f000 80aa 	beq.w	8009f18 <_svfiprintf_r+0x1c8>
 8009dc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009dc6:	445a      	add	r2, fp
 8009dc8:	9209      	str	r2, [sp, #36]	; 0x24
 8009dca:	f89a 3000 	ldrb.w	r3, [sl]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	f000 80a2 	beq.w	8009f18 <_svfiprintf_r+0x1c8>
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009dda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dde:	f10a 0a01 	add.w	sl, sl, #1
 8009de2:	9304      	str	r3, [sp, #16]
 8009de4:	9307      	str	r3, [sp, #28]
 8009de6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009dea:	931a      	str	r3, [sp, #104]	; 0x68
 8009dec:	4654      	mov	r4, sl
 8009dee:	2205      	movs	r2, #5
 8009df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009df4:	4851      	ldr	r0, [pc, #324]	; (8009f3c <_svfiprintf_r+0x1ec>)
 8009df6:	f7f6 fa0b 	bl	8000210 <memchr>
 8009dfa:	9a04      	ldr	r2, [sp, #16]
 8009dfc:	b9d8      	cbnz	r0, 8009e36 <_svfiprintf_r+0xe6>
 8009dfe:	06d0      	lsls	r0, r2, #27
 8009e00:	bf44      	itt	mi
 8009e02:	2320      	movmi	r3, #32
 8009e04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e08:	0711      	lsls	r1, r2, #28
 8009e0a:	bf44      	itt	mi
 8009e0c:	232b      	movmi	r3, #43	; 0x2b
 8009e0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e12:	f89a 3000 	ldrb.w	r3, [sl]
 8009e16:	2b2a      	cmp	r3, #42	; 0x2a
 8009e18:	d015      	beq.n	8009e46 <_svfiprintf_r+0xf6>
 8009e1a:	9a07      	ldr	r2, [sp, #28]
 8009e1c:	4654      	mov	r4, sl
 8009e1e:	2000      	movs	r0, #0
 8009e20:	f04f 0c0a 	mov.w	ip, #10
 8009e24:	4621      	mov	r1, r4
 8009e26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e2a:	3b30      	subs	r3, #48	; 0x30
 8009e2c:	2b09      	cmp	r3, #9
 8009e2e:	d94e      	bls.n	8009ece <_svfiprintf_r+0x17e>
 8009e30:	b1b0      	cbz	r0, 8009e60 <_svfiprintf_r+0x110>
 8009e32:	9207      	str	r2, [sp, #28]
 8009e34:	e014      	b.n	8009e60 <_svfiprintf_r+0x110>
 8009e36:	eba0 0308 	sub.w	r3, r0, r8
 8009e3a:	fa09 f303 	lsl.w	r3, r9, r3
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	9304      	str	r3, [sp, #16]
 8009e42:	46a2      	mov	sl, r4
 8009e44:	e7d2      	b.n	8009dec <_svfiprintf_r+0x9c>
 8009e46:	9b03      	ldr	r3, [sp, #12]
 8009e48:	1d19      	adds	r1, r3, #4
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	9103      	str	r1, [sp, #12]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	bfbb      	ittet	lt
 8009e52:	425b      	neglt	r3, r3
 8009e54:	f042 0202 	orrlt.w	r2, r2, #2
 8009e58:	9307      	strge	r3, [sp, #28]
 8009e5a:	9307      	strlt	r3, [sp, #28]
 8009e5c:	bfb8      	it	lt
 8009e5e:	9204      	strlt	r2, [sp, #16]
 8009e60:	7823      	ldrb	r3, [r4, #0]
 8009e62:	2b2e      	cmp	r3, #46	; 0x2e
 8009e64:	d10c      	bne.n	8009e80 <_svfiprintf_r+0x130>
 8009e66:	7863      	ldrb	r3, [r4, #1]
 8009e68:	2b2a      	cmp	r3, #42	; 0x2a
 8009e6a:	d135      	bne.n	8009ed8 <_svfiprintf_r+0x188>
 8009e6c:	9b03      	ldr	r3, [sp, #12]
 8009e6e:	1d1a      	adds	r2, r3, #4
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	9203      	str	r2, [sp, #12]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	bfb8      	it	lt
 8009e78:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009e7c:	3402      	adds	r4, #2
 8009e7e:	9305      	str	r3, [sp, #20]
 8009e80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009f4c <_svfiprintf_r+0x1fc>
 8009e84:	7821      	ldrb	r1, [r4, #0]
 8009e86:	2203      	movs	r2, #3
 8009e88:	4650      	mov	r0, sl
 8009e8a:	f7f6 f9c1 	bl	8000210 <memchr>
 8009e8e:	b140      	cbz	r0, 8009ea2 <_svfiprintf_r+0x152>
 8009e90:	2340      	movs	r3, #64	; 0x40
 8009e92:	eba0 000a 	sub.w	r0, r0, sl
 8009e96:	fa03 f000 	lsl.w	r0, r3, r0
 8009e9a:	9b04      	ldr	r3, [sp, #16]
 8009e9c:	4303      	orrs	r3, r0
 8009e9e:	3401      	adds	r4, #1
 8009ea0:	9304      	str	r3, [sp, #16]
 8009ea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ea6:	4826      	ldr	r0, [pc, #152]	; (8009f40 <_svfiprintf_r+0x1f0>)
 8009ea8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009eac:	2206      	movs	r2, #6
 8009eae:	f7f6 f9af 	bl	8000210 <memchr>
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	d038      	beq.n	8009f28 <_svfiprintf_r+0x1d8>
 8009eb6:	4b23      	ldr	r3, [pc, #140]	; (8009f44 <_svfiprintf_r+0x1f4>)
 8009eb8:	bb1b      	cbnz	r3, 8009f02 <_svfiprintf_r+0x1b2>
 8009eba:	9b03      	ldr	r3, [sp, #12]
 8009ebc:	3307      	adds	r3, #7
 8009ebe:	f023 0307 	bic.w	r3, r3, #7
 8009ec2:	3308      	adds	r3, #8
 8009ec4:	9303      	str	r3, [sp, #12]
 8009ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ec8:	4433      	add	r3, r6
 8009eca:	9309      	str	r3, [sp, #36]	; 0x24
 8009ecc:	e767      	b.n	8009d9e <_svfiprintf_r+0x4e>
 8009ece:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ed2:	460c      	mov	r4, r1
 8009ed4:	2001      	movs	r0, #1
 8009ed6:	e7a5      	b.n	8009e24 <_svfiprintf_r+0xd4>
 8009ed8:	2300      	movs	r3, #0
 8009eda:	3401      	adds	r4, #1
 8009edc:	9305      	str	r3, [sp, #20]
 8009ede:	4619      	mov	r1, r3
 8009ee0:	f04f 0c0a 	mov.w	ip, #10
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009eea:	3a30      	subs	r2, #48	; 0x30
 8009eec:	2a09      	cmp	r2, #9
 8009eee:	d903      	bls.n	8009ef8 <_svfiprintf_r+0x1a8>
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d0c5      	beq.n	8009e80 <_svfiprintf_r+0x130>
 8009ef4:	9105      	str	r1, [sp, #20]
 8009ef6:	e7c3      	b.n	8009e80 <_svfiprintf_r+0x130>
 8009ef8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009efc:	4604      	mov	r4, r0
 8009efe:	2301      	movs	r3, #1
 8009f00:	e7f0      	b.n	8009ee4 <_svfiprintf_r+0x194>
 8009f02:	ab03      	add	r3, sp, #12
 8009f04:	9300      	str	r3, [sp, #0]
 8009f06:	462a      	mov	r2, r5
 8009f08:	4b0f      	ldr	r3, [pc, #60]	; (8009f48 <_svfiprintf_r+0x1f8>)
 8009f0a:	a904      	add	r1, sp, #16
 8009f0c:	4638      	mov	r0, r7
 8009f0e:	f7fe f81d 	bl	8007f4c <_printf_float>
 8009f12:	1c42      	adds	r2, r0, #1
 8009f14:	4606      	mov	r6, r0
 8009f16:	d1d6      	bne.n	8009ec6 <_svfiprintf_r+0x176>
 8009f18:	89ab      	ldrh	r3, [r5, #12]
 8009f1a:	065b      	lsls	r3, r3, #25
 8009f1c:	f53f af2c 	bmi.w	8009d78 <_svfiprintf_r+0x28>
 8009f20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f22:	b01d      	add	sp, #116	; 0x74
 8009f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f28:	ab03      	add	r3, sp, #12
 8009f2a:	9300      	str	r3, [sp, #0]
 8009f2c:	462a      	mov	r2, r5
 8009f2e:	4b06      	ldr	r3, [pc, #24]	; (8009f48 <_svfiprintf_r+0x1f8>)
 8009f30:	a904      	add	r1, sp, #16
 8009f32:	4638      	mov	r0, r7
 8009f34:	f7fe faae 	bl	8008494 <_printf_i>
 8009f38:	e7eb      	b.n	8009f12 <_svfiprintf_r+0x1c2>
 8009f3a:	bf00      	nop
 8009f3c:	0800aee4 	.word	0x0800aee4
 8009f40:	0800aeee 	.word	0x0800aeee
 8009f44:	08007f4d 	.word	0x08007f4d
 8009f48:	08009c99 	.word	0x08009c99
 8009f4c:	0800aeea 	.word	0x0800aeea

08009f50 <_sbrk_r>:
 8009f50:	b538      	push	{r3, r4, r5, lr}
 8009f52:	4d06      	ldr	r5, [pc, #24]	; (8009f6c <_sbrk_r+0x1c>)
 8009f54:	2300      	movs	r3, #0
 8009f56:	4604      	mov	r4, r0
 8009f58:	4608      	mov	r0, r1
 8009f5a:	602b      	str	r3, [r5, #0]
 8009f5c:	f7f8 fcd6 	bl	800290c <_sbrk>
 8009f60:	1c43      	adds	r3, r0, #1
 8009f62:	d102      	bne.n	8009f6a <_sbrk_r+0x1a>
 8009f64:	682b      	ldr	r3, [r5, #0]
 8009f66:	b103      	cbz	r3, 8009f6a <_sbrk_r+0x1a>
 8009f68:	6023      	str	r3, [r4, #0]
 8009f6a:	bd38      	pop	{r3, r4, r5, pc}
 8009f6c:	200014c0 	.word	0x200014c0

08009f70 <__assert_func>:
 8009f70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f72:	4614      	mov	r4, r2
 8009f74:	461a      	mov	r2, r3
 8009f76:	4b09      	ldr	r3, [pc, #36]	; (8009f9c <__assert_func+0x2c>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4605      	mov	r5, r0
 8009f7c:	68d8      	ldr	r0, [r3, #12]
 8009f7e:	b14c      	cbz	r4, 8009f94 <__assert_func+0x24>
 8009f80:	4b07      	ldr	r3, [pc, #28]	; (8009fa0 <__assert_func+0x30>)
 8009f82:	9100      	str	r1, [sp, #0]
 8009f84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f88:	4906      	ldr	r1, [pc, #24]	; (8009fa4 <__assert_func+0x34>)
 8009f8a:	462b      	mov	r3, r5
 8009f8c:	f000 f80e 	bl	8009fac <fiprintf>
 8009f90:	f000 faa4 	bl	800a4dc <abort>
 8009f94:	4b04      	ldr	r3, [pc, #16]	; (8009fa8 <__assert_func+0x38>)
 8009f96:	461c      	mov	r4, r3
 8009f98:	e7f3      	b.n	8009f82 <__assert_func+0x12>
 8009f9a:	bf00      	nop
 8009f9c:	200000d4 	.word	0x200000d4
 8009fa0:	0800aef5 	.word	0x0800aef5
 8009fa4:	0800af02 	.word	0x0800af02
 8009fa8:	0800af30 	.word	0x0800af30

08009fac <fiprintf>:
 8009fac:	b40e      	push	{r1, r2, r3}
 8009fae:	b503      	push	{r0, r1, lr}
 8009fb0:	4601      	mov	r1, r0
 8009fb2:	ab03      	add	r3, sp, #12
 8009fb4:	4805      	ldr	r0, [pc, #20]	; (8009fcc <fiprintf+0x20>)
 8009fb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fba:	6800      	ldr	r0, [r0, #0]
 8009fbc:	9301      	str	r3, [sp, #4]
 8009fbe:	f000 f88f 	bl	800a0e0 <_vfiprintf_r>
 8009fc2:	b002      	add	sp, #8
 8009fc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fc8:	b003      	add	sp, #12
 8009fca:	4770      	bx	lr
 8009fcc:	200000d4 	.word	0x200000d4

08009fd0 <__ascii_mbtowc>:
 8009fd0:	b082      	sub	sp, #8
 8009fd2:	b901      	cbnz	r1, 8009fd6 <__ascii_mbtowc+0x6>
 8009fd4:	a901      	add	r1, sp, #4
 8009fd6:	b142      	cbz	r2, 8009fea <__ascii_mbtowc+0x1a>
 8009fd8:	b14b      	cbz	r3, 8009fee <__ascii_mbtowc+0x1e>
 8009fda:	7813      	ldrb	r3, [r2, #0]
 8009fdc:	600b      	str	r3, [r1, #0]
 8009fde:	7812      	ldrb	r2, [r2, #0]
 8009fe0:	1e10      	subs	r0, r2, #0
 8009fe2:	bf18      	it	ne
 8009fe4:	2001      	movne	r0, #1
 8009fe6:	b002      	add	sp, #8
 8009fe8:	4770      	bx	lr
 8009fea:	4610      	mov	r0, r2
 8009fec:	e7fb      	b.n	8009fe6 <__ascii_mbtowc+0x16>
 8009fee:	f06f 0001 	mvn.w	r0, #1
 8009ff2:	e7f8      	b.n	8009fe6 <__ascii_mbtowc+0x16>

08009ff4 <memmove>:
 8009ff4:	4288      	cmp	r0, r1
 8009ff6:	b510      	push	{r4, lr}
 8009ff8:	eb01 0402 	add.w	r4, r1, r2
 8009ffc:	d902      	bls.n	800a004 <memmove+0x10>
 8009ffe:	4284      	cmp	r4, r0
 800a000:	4623      	mov	r3, r4
 800a002:	d807      	bhi.n	800a014 <memmove+0x20>
 800a004:	1e43      	subs	r3, r0, #1
 800a006:	42a1      	cmp	r1, r4
 800a008:	d008      	beq.n	800a01c <memmove+0x28>
 800a00a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a00e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a012:	e7f8      	b.n	800a006 <memmove+0x12>
 800a014:	4402      	add	r2, r0
 800a016:	4601      	mov	r1, r0
 800a018:	428a      	cmp	r2, r1
 800a01a:	d100      	bne.n	800a01e <memmove+0x2a>
 800a01c:	bd10      	pop	{r4, pc}
 800a01e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a022:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a026:	e7f7      	b.n	800a018 <memmove+0x24>

0800a028 <__malloc_lock>:
 800a028:	4801      	ldr	r0, [pc, #4]	; (800a030 <__malloc_lock+0x8>)
 800a02a:	f000 bc17 	b.w	800a85c <__retarget_lock_acquire_recursive>
 800a02e:	bf00      	nop
 800a030:	200014c8 	.word	0x200014c8

0800a034 <__malloc_unlock>:
 800a034:	4801      	ldr	r0, [pc, #4]	; (800a03c <__malloc_unlock+0x8>)
 800a036:	f000 bc12 	b.w	800a85e <__retarget_lock_release_recursive>
 800a03a:	bf00      	nop
 800a03c:	200014c8 	.word	0x200014c8

0800a040 <_realloc_r>:
 800a040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a042:	4607      	mov	r7, r0
 800a044:	4614      	mov	r4, r2
 800a046:	460e      	mov	r6, r1
 800a048:	b921      	cbnz	r1, 800a054 <_realloc_r+0x14>
 800a04a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a04e:	4611      	mov	r1, r2
 800a050:	f7ff bdc8 	b.w	8009be4 <_malloc_r>
 800a054:	b922      	cbnz	r2, 800a060 <_realloc_r+0x20>
 800a056:	f7ff fd75 	bl	8009b44 <_free_r>
 800a05a:	4625      	mov	r5, r4
 800a05c:	4628      	mov	r0, r5
 800a05e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a060:	f000 fc62 	bl	800a928 <_malloc_usable_size_r>
 800a064:	42a0      	cmp	r0, r4
 800a066:	d20f      	bcs.n	800a088 <_realloc_r+0x48>
 800a068:	4621      	mov	r1, r4
 800a06a:	4638      	mov	r0, r7
 800a06c:	f7ff fdba 	bl	8009be4 <_malloc_r>
 800a070:	4605      	mov	r5, r0
 800a072:	2800      	cmp	r0, #0
 800a074:	d0f2      	beq.n	800a05c <_realloc_r+0x1c>
 800a076:	4631      	mov	r1, r6
 800a078:	4622      	mov	r2, r4
 800a07a:	f7fd feb1 	bl	8007de0 <memcpy>
 800a07e:	4631      	mov	r1, r6
 800a080:	4638      	mov	r0, r7
 800a082:	f7ff fd5f 	bl	8009b44 <_free_r>
 800a086:	e7e9      	b.n	800a05c <_realloc_r+0x1c>
 800a088:	4635      	mov	r5, r6
 800a08a:	e7e7      	b.n	800a05c <_realloc_r+0x1c>

0800a08c <__sfputc_r>:
 800a08c:	6893      	ldr	r3, [r2, #8]
 800a08e:	3b01      	subs	r3, #1
 800a090:	2b00      	cmp	r3, #0
 800a092:	b410      	push	{r4}
 800a094:	6093      	str	r3, [r2, #8]
 800a096:	da08      	bge.n	800a0aa <__sfputc_r+0x1e>
 800a098:	6994      	ldr	r4, [r2, #24]
 800a09a:	42a3      	cmp	r3, r4
 800a09c:	db01      	blt.n	800a0a2 <__sfputc_r+0x16>
 800a09e:	290a      	cmp	r1, #10
 800a0a0:	d103      	bne.n	800a0aa <__sfputc_r+0x1e>
 800a0a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0a6:	f000 b94b 	b.w	800a340 <__swbuf_r>
 800a0aa:	6813      	ldr	r3, [r2, #0]
 800a0ac:	1c58      	adds	r0, r3, #1
 800a0ae:	6010      	str	r0, [r2, #0]
 800a0b0:	7019      	strb	r1, [r3, #0]
 800a0b2:	4608      	mov	r0, r1
 800a0b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0b8:	4770      	bx	lr

0800a0ba <__sfputs_r>:
 800a0ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0bc:	4606      	mov	r6, r0
 800a0be:	460f      	mov	r7, r1
 800a0c0:	4614      	mov	r4, r2
 800a0c2:	18d5      	adds	r5, r2, r3
 800a0c4:	42ac      	cmp	r4, r5
 800a0c6:	d101      	bne.n	800a0cc <__sfputs_r+0x12>
 800a0c8:	2000      	movs	r0, #0
 800a0ca:	e007      	b.n	800a0dc <__sfputs_r+0x22>
 800a0cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0d0:	463a      	mov	r2, r7
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	f7ff ffda 	bl	800a08c <__sfputc_r>
 800a0d8:	1c43      	adds	r3, r0, #1
 800a0da:	d1f3      	bne.n	800a0c4 <__sfputs_r+0xa>
 800a0dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a0e0 <_vfiprintf_r>:
 800a0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e4:	460d      	mov	r5, r1
 800a0e6:	b09d      	sub	sp, #116	; 0x74
 800a0e8:	4614      	mov	r4, r2
 800a0ea:	4698      	mov	r8, r3
 800a0ec:	4606      	mov	r6, r0
 800a0ee:	b118      	cbz	r0, 800a0f8 <_vfiprintf_r+0x18>
 800a0f0:	6983      	ldr	r3, [r0, #24]
 800a0f2:	b90b      	cbnz	r3, 800a0f8 <_vfiprintf_r+0x18>
 800a0f4:	f000 fb14 	bl	800a720 <__sinit>
 800a0f8:	4b89      	ldr	r3, [pc, #548]	; (800a320 <_vfiprintf_r+0x240>)
 800a0fa:	429d      	cmp	r5, r3
 800a0fc:	d11b      	bne.n	800a136 <_vfiprintf_r+0x56>
 800a0fe:	6875      	ldr	r5, [r6, #4]
 800a100:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a102:	07d9      	lsls	r1, r3, #31
 800a104:	d405      	bmi.n	800a112 <_vfiprintf_r+0x32>
 800a106:	89ab      	ldrh	r3, [r5, #12]
 800a108:	059a      	lsls	r2, r3, #22
 800a10a:	d402      	bmi.n	800a112 <_vfiprintf_r+0x32>
 800a10c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a10e:	f000 fba5 	bl	800a85c <__retarget_lock_acquire_recursive>
 800a112:	89ab      	ldrh	r3, [r5, #12]
 800a114:	071b      	lsls	r3, r3, #28
 800a116:	d501      	bpl.n	800a11c <_vfiprintf_r+0x3c>
 800a118:	692b      	ldr	r3, [r5, #16]
 800a11a:	b9eb      	cbnz	r3, 800a158 <_vfiprintf_r+0x78>
 800a11c:	4629      	mov	r1, r5
 800a11e:	4630      	mov	r0, r6
 800a120:	f000 f96e 	bl	800a400 <__swsetup_r>
 800a124:	b1c0      	cbz	r0, 800a158 <_vfiprintf_r+0x78>
 800a126:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a128:	07dc      	lsls	r4, r3, #31
 800a12a:	d50e      	bpl.n	800a14a <_vfiprintf_r+0x6a>
 800a12c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a130:	b01d      	add	sp, #116	; 0x74
 800a132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a136:	4b7b      	ldr	r3, [pc, #492]	; (800a324 <_vfiprintf_r+0x244>)
 800a138:	429d      	cmp	r5, r3
 800a13a:	d101      	bne.n	800a140 <_vfiprintf_r+0x60>
 800a13c:	68b5      	ldr	r5, [r6, #8]
 800a13e:	e7df      	b.n	800a100 <_vfiprintf_r+0x20>
 800a140:	4b79      	ldr	r3, [pc, #484]	; (800a328 <_vfiprintf_r+0x248>)
 800a142:	429d      	cmp	r5, r3
 800a144:	bf08      	it	eq
 800a146:	68f5      	ldreq	r5, [r6, #12]
 800a148:	e7da      	b.n	800a100 <_vfiprintf_r+0x20>
 800a14a:	89ab      	ldrh	r3, [r5, #12]
 800a14c:	0598      	lsls	r0, r3, #22
 800a14e:	d4ed      	bmi.n	800a12c <_vfiprintf_r+0x4c>
 800a150:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a152:	f000 fb84 	bl	800a85e <__retarget_lock_release_recursive>
 800a156:	e7e9      	b.n	800a12c <_vfiprintf_r+0x4c>
 800a158:	2300      	movs	r3, #0
 800a15a:	9309      	str	r3, [sp, #36]	; 0x24
 800a15c:	2320      	movs	r3, #32
 800a15e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a162:	f8cd 800c 	str.w	r8, [sp, #12]
 800a166:	2330      	movs	r3, #48	; 0x30
 800a168:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a32c <_vfiprintf_r+0x24c>
 800a16c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a170:	f04f 0901 	mov.w	r9, #1
 800a174:	4623      	mov	r3, r4
 800a176:	469a      	mov	sl, r3
 800a178:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a17c:	b10a      	cbz	r2, 800a182 <_vfiprintf_r+0xa2>
 800a17e:	2a25      	cmp	r2, #37	; 0x25
 800a180:	d1f9      	bne.n	800a176 <_vfiprintf_r+0x96>
 800a182:	ebba 0b04 	subs.w	fp, sl, r4
 800a186:	d00b      	beq.n	800a1a0 <_vfiprintf_r+0xc0>
 800a188:	465b      	mov	r3, fp
 800a18a:	4622      	mov	r2, r4
 800a18c:	4629      	mov	r1, r5
 800a18e:	4630      	mov	r0, r6
 800a190:	f7ff ff93 	bl	800a0ba <__sfputs_r>
 800a194:	3001      	adds	r0, #1
 800a196:	f000 80aa 	beq.w	800a2ee <_vfiprintf_r+0x20e>
 800a19a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a19c:	445a      	add	r2, fp
 800a19e:	9209      	str	r2, [sp, #36]	; 0x24
 800a1a0:	f89a 3000 	ldrb.w	r3, [sl]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	f000 80a2 	beq.w	800a2ee <_vfiprintf_r+0x20e>
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1b4:	f10a 0a01 	add.w	sl, sl, #1
 800a1b8:	9304      	str	r3, [sp, #16]
 800a1ba:	9307      	str	r3, [sp, #28]
 800a1bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1c0:	931a      	str	r3, [sp, #104]	; 0x68
 800a1c2:	4654      	mov	r4, sl
 800a1c4:	2205      	movs	r2, #5
 800a1c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1ca:	4858      	ldr	r0, [pc, #352]	; (800a32c <_vfiprintf_r+0x24c>)
 800a1cc:	f7f6 f820 	bl	8000210 <memchr>
 800a1d0:	9a04      	ldr	r2, [sp, #16]
 800a1d2:	b9d8      	cbnz	r0, 800a20c <_vfiprintf_r+0x12c>
 800a1d4:	06d1      	lsls	r1, r2, #27
 800a1d6:	bf44      	itt	mi
 800a1d8:	2320      	movmi	r3, #32
 800a1da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1de:	0713      	lsls	r3, r2, #28
 800a1e0:	bf44      	itt	mi
 800a1e2:	232b      	movmi	r3, #43	; 0x2b
 800a1e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1e8:	f89a 3000 	ldrb.w	r3, [sl]
 800a1ec:	2b2a      	cmp	r3, #42	; 0x2a
 800a1ee:	d015      	beq.n	800a21c <_vfiprintf_r+0x13c>
 800a1f0:	9a07      	ldr	r2, [sp, #28]
 800a1f2:	4654      	mov	r4, sl
 800a1f4:	2000      	movs	r0, #0
 800a1f6:	f04f 0c0a 	mov.w	ip, #10
 800a1fa:	4621      	mov	r1, r4
 800a1fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a200:	3b30      	subs	r3, #48	; 0x30
 800a202:	2b09      	cmp	r3, #9
 800a204:	d94e      	bls.n	800a2a4 <_vfiprintf_r+0x1c4>
 800a206:	b1b0      	cbz	r0, 800a236 <_vfiprintf_r+0x156>
 800a208:	9207      	str	r2, [sp, #28]
 800a20a:	e014      	b.n	800a236 <_vfiprintf_r+0x156>
 800a20c:	eba0 0308 	sub.w	r3, r0, r8
 800a210:	fa09 f303 	lsl.w	r3, r9, r3
 800a214:	4313      	orrs	r3, r2
 800a216:	9304      	str	r3, [sp, #16]
 800a218:	46a2      	mov	sl, r4
 800a21a:	e7d2      	b.n	800a1c2 <_vfiprintf_r+0xe2>
 800a21c:	9b03      	ldr	r3, [sp, #12]
 800a21e:	1d19      	adds	r1, r3, #4
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	9103      	str	r1, [sp, #12]
 800a224:	2b00      	cmp	r3, #0
 800a226:	bfbb      	ittet	lt
 800a228:	425b      	neglt	r3, r3
 800a22a:	f042 0202 	orrlt.w	r2, r2, #2
 800a22e:	9307      	strge	r3, [sp, #28]
 800a230:	9307      	strlt	r3, [sp, #28]
 800a232:	bfb8      	it	lt
 800a234:	9204      	strlt	r2, [sp, #16]
 800a236:	7823      	ldrb	r3, [r4, #0]
 800a238:	2b2e      	cmp	r3, #46	; 0x2e
 800a23a:	d10c      	bne.n	800a256 <_vfiprintf_r+0x176>
 800a23c:	7863      	ldrb	r3, [r4, #1]
 800a23e:	2b2a      	cmp	r3, #42	; 0x2a
 800a240:	d135      	bne.n	800a2ae <_vfiprintf_r+0x1ce>
 800a242:	9b03      	ldr	r3, [sp, #12]
 800a244:	1d1a      	adds	r2, r3, #4
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	9203      	str	r2, [sp, #12]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	bfb8      	it	lt
 800a24e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a252:	3402      	adds	r4, #2
 800a254:	9305      	str	r3, [sp, #20]
 800a256:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a33c <_vfiprintf_r+0x25c>
 800a25a:	7821      	ldrb	r1, [r4, #0]
 800a25c:	2203      	movs	r2, #3
 800a25e:	4650      	mov	r0, sl
 800a260:	f7f5 ffd6 	bl	8000210 <memchr>
 800a264:	b140      	cbz	r0, 800a278 <_vfiprintf_r+0x198>
 800a266:	2340      	movs	r3, #64	; 0x40
 800a268:	eba0 000a 	sub.w	r0, r0, sl
 800a26c:	fa03 f000 	lsl.w	r0, r3, r0
 800a270:	9b04      	ldr	r3, [sp, #16]
 800a272:	4303      	orrs	r3, r0
 800a274:	3401      	adds	r4, #1
 800a276:	9304      	str	r3, [sp, #16]
 800a278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a27c:	482c      	ldr	r0, [pc, #176]	; (800a330 <_vfiprintf_r+0x250>)
 800a27e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a282:	2206      	movs	r2, #6
 800a284:	f7f5 ffc4 	bl	8000210 <memchr>
 800a288:	2800      	cmp	r0, #0
 800a28a:	d03f      	beq.n	800a30c <_vfiprintf_r+0x22c>
 800a28c:	4b29      	ldr	r3, [pc, #164]	; (800a334 <_vfiprintf_r+0x254>)
 800a28e:	bb1b      	cbnz	r3, 800a2d8 <_vfiprintf_r+0x1f8>
 800a290:	9b03      	ldr	r3, [sp, #12]
 800a292:	3307      	adds	r3, #7
 800a294:	f023 0307 	bic.w	r3, r3, #7
 800a298:	3308      	adds	r3, #8
 800a29a:	9303      	str	r3, [sp, #12]
 800a29c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a29e:	443b      	add	r3, r7
 800a2a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a2a2:	e767      	b.n	800a174 <_vfiprintf_r+0x94>
 800a2a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2a8:	460c      	mov	r4, r1
 800a2aa:	2001      	movs	r0, #1
 800a2ac:	e7a5      	b.n	800a1fa <_vfiprintf_r+0x11a>
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	3401      	adds	r4, #1
 800a2b2:	9305      	str	r3, [sp, #20]
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	f04f 0c0a 	mov.w	ip, #10
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2c0:	3a30      	subs	r2, #48	; 0x30
 800a2c2:	2a09      	cmp	r2, #9
 800a2c4:	d903      	bls.n	800a2ce <_vfiprintf_r+0x1ee>
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d0c5      	beq.n	800a256 <_vfiprintf_r+0x176>
 800a2ca:	9105      	str	r1, [sp, #20]
 800a2cc:	e7c3      	b.n	800a256 <_vfiprintf_r+0x176>
 800a2ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2d2:	4604      	mov	r4, r0
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	e7f0      	b.n	800a2ba <_vfiprintf_r+0x1da>
 800a2d8:	ab03      	add	r3, sp, #12
 800a2da:	9300      	str	r3, [sp, #0]
 800a2dc:	462a      	mov	r2, r5
 800a2de:	4b16      	ldr	r3, [pc, #88]	; (800a338 <_vfiprintf_r+0x258>)
 800a2e0:	a904      	add	r1, sp, #16
 800a2e2:	4630      	mov	r0, r6
 800a2e4:	f7fd fe32 	bl	8007f4c <_printf_float>
 800a2e8:	4607      	mov	r7, r0
 800a2ea:	1c78      	adds	r0, r7, #1
 800a2ec:	d1d6      	bne.n	800a29c <_vfiprintf_r+0x1bc>
 800a2ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2f0:	07d9      	lsls	r1, r3, #31
 800a2f2:	d405      	bmi.n	800a300 <_vfiprintf_r+0x220>
 800a2f4:	89ab      	ldrh	r3, [r5, #12]
 800a2f6:	059a      	lsls	r2, r3, #22
 800a2f8:	d402      	bmi.n	800a300 <_vfiprintf_r+0x220>
 800a2fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2fc:	f000 faaf 	bl	800a85e <__retarget_lock_release_recursive>
 800a300:	89ab      	ldrh	r3, [r5, #12]
 800a302:	065b      	lsls	r3, r3, #25
 800a304:	f53f af12 	bmi.w	800a12c <_vfiprintf_r+0x4c>
 800a308:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a30a:	e711      	b.n	800a130 <_vfiprintf_r+0x50>
 800a30c:	ab03      	add	r3, sp, #12
 800a30e:	9300      	str	r3, [sp, #0]
 800a310:	462a      	mov	r2, r5
 800a312:	4b09      	ldr	r3, [pc, #36]	; (800a338 <_vfiprintf_r+0x258>)
 800a314:	a904      	add	r1, sp, #16
 800a316:	4630      	mov	r0, r6
 800a318:	f7fe f8bc 	bl	8008494 <_printf_i>
 800a31c:	e7e4      	b.n	800a2e8 <_vfiprintf_r+0x208>
 800a31e:	bf00      	nop
 800a320:	0800b05c 	.word	0x0800b05c
 800a324:	0800b07c 	.word	0x0800b07c
 800a328:	0800b03c 	.word	0x0800b03c
 800a32c:	0800aee4 	.word	0x0800aee4
 800a330:	0800aeee 	.word	0x0800aeee
 800a334:	08007f4d 	.word	0x08007f4d
 800a338:	0800a0bb 	.word	0x0800a0bb
 800a33c:	0800aeea 	.word	0x0800aeea

0800a340 <__swbuf_r>:
 800a340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a342:	460e      	mov	r6, r1
 800a344:	4614      	mov	r4, r2
 800a346:	4605      	mov	r5, r0
 800a348:	b118      	cbz	r0, 800a352 <__swbuf_r+0x12>
 800a34a:	6983      	ldr	r3, [r0, #24]
 800a34c:	b90b      	cbnz	r3, 800a352 <__swbuf_r+0x12>
 800a34e:	f000 f9e7 	bl	800a720 <__sinit>
 800a352:	4b21      	ldr	r3, [pc, #132]	; (800a3d8 <__swbuf_r+0x98>)
 800a354:	429c      	cmp	r4, r3
 800a356:	d12b      	bne.n	800a3b0 <__swbuf_r+0x70>
 800a358:	686c      	ldr	r4, [r5, #4]
 800a35a:	69a3      	ldr	r3, [r4, #24]
 800a35c:	60a3      	str	r3, [r4, #8]
 800a35e:	89a3      	ldrh	r3, [r4, #12]
 800a360:	071a      	lsls	r2, r3, #28
 800a362:	d52f      	bpl.n	800a3c4 <__swbuf_r+0x84>
 800a364:	6923      	ldr	r3, [r4, #16]
 800a366:	b36b      	cbz	r3, 800a3c4 <__swbuf_r+0x84>
 800a368:	6923      	ldr	r3, [r4, #16]
 800a36a:	6820      	ldr	r0, [r4, #0]
 800a36c:	1ac0      	subs	r0, r0, r3
 800a36e:	6963      	ldr	r3, [r4, #20]
 800a370:	b2f6      	uxtb	r6, r6
 800a372:	4283      	cmp	r3, r0
 800a374:	4637      	mov	r7, r6
 800a376:	dc04      	bgt.n	800a382 <__swbuf_r+0x42>
 800a378:	4621      	mov	r1, r4
 800a37a:	4628      	mov	r0, r5
 800a37c:	f000 f93c 	bl	800a5f8 <_fflush_r>
 800a380:	bb30      	cbnz	r0, 800a3d0 <__swbuf_r+0x90>
 800a382:	68a3      	ldr	r3, [r4, #8]
 800a384:	3b01      	subs	r3, #1
 800a386:	60a3      	str	r3, [r4, #8]
 800a388:	6823      	ldr	r3, [r4, #0]
 800a38a:	1c5a      	adds	r2, r3, #1
 800a38c:	6022      	str	r2, [r4, #0]
 800a38e:	701e      	strb	r6, [r3, #0]
 800a390:	6963      	ldr	r3, [r4, #20]
 800a392:	3001      	adds	r0, #1
 800a394:	4283      	cmp	r3, r0
 800a396:	d004      	beq.n	800a3a2 <__swbuf_r+0x62>
 800a398:	89a3      	ldrh	r3, [r4, #12]
 800a39a:	07db      	lsls	r3, r3, #31
 800a39c:	d506      	bpl.n	800a3ac <__swbuf_r+0x6c>
 800a39e:	2e0a      	cmp	r6, #10
 800a3a0:	d104      	bne.n	800a3ac <__swbuf_r+0x6c>
 800a3a2:	4621      	mov	r1, r4
 800a3a4:	4628      	mov	r0, r5
 800a3a6:	f000 f927 	bl	800a5f8 <_fflush_r>
 800a3aa:	b988      	cbnz	r0, 800a3d0 <__swbuf_r+0x90>
 800a3ac:	4638      	mov	r0, r7
 800a3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3b0:	4b0a      	ldr	r3, [pc, #40]	; (800a3dc <__swbuf_r+0x9c>)
 800a3b2:	429c      	cmp	r4, r3
 800a3b4:	d101      	bne.n	800a3ba <__swbuf_r+0x7a>
 800a3b6:	68ac      	ldr	r4, [r5, #8]
 800a3b8:	e7cf      	b.n	800a35a <__swbuf_r+0x1a>
 800a3ba:	4b09      	ldr	r3, [pc, #36]	; (800a3e0 <__swbuf_r+0xa0>)
 800a3bc:	429c      	cmp	r4, r3
 800a3be:	bf08      	it	eq
 800a3c0:	68ec      	ldreq	r4, [r5, #12]
 800a3c2:	e7ca      	b.n	800a35a <__swbuf_r+0x1a>
 800a3c4:	4621      	mov	r1, r4
 800a3c6:	4628      	mov	r0, r5
 800a3c8:	f000 f81a 	bl	800a400 <__swsetup_r>
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	d0cb      	beq.n	800a368 <__swbuf_r+0x28>
 800a3d0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a3d4:	e7ea      	b.n	800a3ac <__swbuf_r+0x6c>
 800a3d6:	bf00      	nop
 800a3d8:	0800b05c 	.word	0x0800b05c
 800a3dc:	0800b07c 	.word	0x0800b07c
 800a3e0:	0800b03c 	.word	0x0800b03c

0800a3e4 <__ascii_wctomb>:
 800a3e4:	b149      	cbz	r1, 800a3fa <__ascii_wctomb+0x16>
 800a3e6:	2aff      	cmp	r2, #255	; 0xff
 800a3e8:	bf85      	ittet	hi
 800a3ea:	238a      	movhi	r3, #138	; 0x8a
 800a3ec:	6003      	strhi	r3, [r0, #0]
 800a3ee:	700a      	strbls	r2, [r1, #0]
 800a3f0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a3f4:	bf98      	it	ls
 800a3f6:	2001      	movls	r0, #1
 800a3f8:	4770      	bx	lr
 800a3fa:	4608      	mov	r0, r1
 800a3fc:	4770      	bx	lr
	...

0800a400 <__swsetup_r>:
 800a400:	4b32      	ldr	r3, [pc, #200]	; (800a4cc <__swsetup_r+0xcc>)
 800a402:	b570      	push	{r4, r5, r6, lr}
 800a404:	681d      	ldr	r5, [r3, #0]
 800a406:	4606      	mov	r6, r0
 800a408:	460c      	mov	r4, r1
 800a40a:	b125      	cbz	r5, 800a416 <__swsetup_r+0x16>
 800a40c:	69ab      	ldr	r3, [r5, #24]
 800a40e:	b913      	cbnz	r3, 800a416 <__swsetup_r+0x16>
 800a410:	4628      	mov	r0, r5
 800a412:	f000 f985 	bl	800a720 <__sinit>
 800a416:	4b2e      	ldr	r3, [pc, #184]	; (800a4d0 <__swsetup_r+0xd0>)
 800a418:	429c      	cmp	r4, r3
 800a41a:	d10f      	bne.n	800a43c <__swsetup_r+0x3c>
 800a41c:	686c      	ldr	r4, [r5, #4]
 800a41e:	89a3      	ldrh	r3, [r4, #12]
 800a420:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a424:	0719      	lsls	r1, r3, #28
 800a426:	d42c      	bmi.n	800a482 <__swsetup_r+0x82>
 800a428:	06dd      	lsls	r5, r3, #27
 800a42a:	d411      	bmi.n	800a450 <__swsetup_r+0x50>
 800a42c:	2309      	movs	r3, #9
 800a42e:	6033      	str	r3, [r6, #0]
 800a430:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a434:	81a3      	strh	r3, [r4, #12]
 800a436:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a43a:	e03e      	b.n	800a4ba <__swsetup_r+0xba>
 800a43c:	4b25      	ldr	r3, [pc, #148]	; (800a4d4 <__swsetup_r+0xd4>)
 800a43e:	429c      	cmp	r4, r3
 800a440:	d101      	bne.n	800a446 <__swsetup_r+0x46>
 800a442:	68ac      	ldr	r4, [r5, #8]
 800a444:	e7eb      	b.n	800a41e <__swsetup_r+0x1e>
 800a446:	4b24      	ldr	r3, [pc, #144]	; (800a4d8 <__swsetup_r+0xd8>)
 800a448:	429c      	cmp	r4, r3
 800a44a:	bf08      	it	eq
 800a44c:	68ec      	ldreq	r4, [r5, #12]
 800a44e:	e7e6      	b.n	800a41e <__swsetup_r+0x1e>
 800a450:	0758      	lsls	r0, r3, #29
 800a452:	d512      	bpl.n	800a47a <__swsetup_r+0x7a>
 800a454:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a456:	b141      	cbz	r1, 800a46a <__swsetup_r+0x6a>
 800a458:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a45c:	4299      	cmp	r1, r3
 800a45e:	d002      	beq.n	800a466 <__swsetup_r+0x66>
 800a460:	4630      	mov	r0, r6
 800a462:	f7ff fb6f 	bl	8009b44 <_free_r>
 800a466:	2300      	movs	r3, #0
 800a468:	6363      	str	r3, [r4, #52]	; 0x34
 800a46a:	89a3      	ldrh	r3, [r4, #12]
 800a46c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a470:	81a3      	strh	r3, [r4, #12]
 800a472:	2300      	movs	r3, #0
 800a474:	6063      	str	r3, [r4, #4]
 800a476:	6923      	ldr	r3, [r4, #16]
 800a478:	6023      	str	r3, [r4, #0]
 800a47a:	89a3      	ldrh	r3, [r4, #12]
 800a47c:	f043 0308 	orr.w	r3, r3, #8
 800a480:	81a3      	strh	r3, [r4, #12]
 800a482:	6923      	ldr	r3, [r4, #16]
 800a484:	b94b      	cbnz	r3, 800a49a <__swsetup_r+0x9a>
 800a486:	89a3      	ldrh	r3, [r4, #12]
 800a488:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a48c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a490:	d003      	beq.n	800a49a <__swsetup_r+0x9a>
 800a492:	4621      	mov	r1, r4
 800a494:	4630      	mov	r0, r6
 800a496:	f000 fa07 	bl	800a8a8 <__smakebuf_r>
 800a49a:	89a0      	ldrh	r0, [r4, #12]
 800a49c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4a0:	f010 0301 	ands.w	r3, r0, #1
 800a4a4:	d00a      	beq.n	800a4bc <__swsetup_r+0xbc>
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	60a3      	str	r3, [r4, #8]
 800a4aa:	6963      	ldr	r3, [r4, #20]
 800a4ac:	425b      	negs	r3, r3
 800a4ae:	61a3      	str	r3, [r4, #24]
 800a4b0:	6923      	ldr	r3, [r4, #16]
 800a4b2:	b943      	cbnz	r3, 800a4c6 <__swsetup_r+0xc6>
 800a4b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a4b8:	d1ba      	bne.n	800a430 <__swsetup_r+0x30>
 800a4ba:	bd70      	pop	{r4, r5, r6, pc}
 800a4bc:	0781      	lsls	r1, r0, #30
 800a4be:	bf58      	it	pl
 800a4c0:	6963      	ldrpl	r3, [r4, #20]
 800a4c2:	60a3      	str	r3, [r4, #8]
 800a4c4:	e7f4      	b.n	800a4b0 <__swsetup_r+0xb0>
 800a4c6:	2000      	movs	r0, #0
 800a4c8:	e7f7      	b.n	800a4ba <__swsetup_r+0xba>
 800a4ca:	bf00      	nop
 800a4cc:	200000d4 	.word	0x200000d4
 800a4d0:	0800b05c 	.word	0x0800b05c
 800a4d4:	0800b07c 	.word	0x0800b07c
 800a4d8:	0800b03c 	.word	0x0800b03c

0800a4dc <abort>:
 800a4dc:	b508      	push	{r3, lr}
 800a4de:	2006      	movs	r0, #6
 800a4e0:	f000 fa52 	bl	800a988 <raise>
 800a4e4:	2001      	movs	r0, #1
 800a4e6:	f7f8 f999 	bl	800281c <_exit>
	...

0800a4ec <__sflush_r>:
 800a4ec:	898a      	ldrh	r2, [r1, #12]
 800a4ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4f2:	4605      	mov	r5, r0
 800a4f4:	0710      	lsls	r0, r2, #28
 800a4f6:	460c      	mov	r4, r1
 800a4f8:	d458      	bmi.n	800a5ac <__sflush_r+0xc0>
 800a4fa:	684b      	ldr	r3, [r1, #4]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	dc05      	bgt.n	800a50c <__sflush_r+0x20>
 800a500:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a502:	2b00      	cmp	r3, #0
 800a504:	dc02      	bgt.n	800a50c <__sflush_r+0x20>
 800a506:	2000      	movs	r0, #0
 800a508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a50c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a50e:	2e00      	cmp	r6, #0
 800a510:	d0f9      	beq.n	800a506 <__sflush_r+0x1a>
 800a512:	2300      	movs	r3, #0
 800a514:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a518:	682f      	ldr	r7, [r5, #0]
 800a51a:	602b      	str	r3, [r5, #0]
 800a51c:	d032      	beq.n	800a584 <__sflush_r+0x98>
 800a51e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a520:	89a3      	ldrh	r3, [r4, #12]
 800a522:	075a      	lsls	r2, r3, #29
 800a524:	d505      	bpl.n	800a532 <__sflush_r+0x46>
 800a526:	6863      	ldr	r3, [r4, #4]
 800a528:	1ac0      	subs	r0, r0, r3
 800a52a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a52c:	b10b      	cbz	r3, 800a532 <__sflush_r+0x46>
 800a52e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a530:	1ac0      	subs	r0, r0, r3
 800a532:	2300      	movs	r3, #0
 800a534:	4602      	mov	r2, r0
 800a536:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a538:	6a21      	ldr	r1, [r4, #32]
 800a53a:	4628      	mov	r0, r5
 800a53c:	47b0      	blx	r6
 800a53e:	1c43      	adds	r3, r0, #1
 800a540:	89a3      	ldrh	r3, [r4, #12]
 800a542:	d106      	bne.n	800a552 <__sflush_r+0x66>
 800a544:	6829      	ldr	r1, [r5, #0]
 800a546:	291d      	cmp	r1, #29
 800a548:	d82c      	bhi.n	800a5a4 <__sflush_r+0xb8>
 800a54a:	4a2a      	ldr	r2, [pc, #168]	; (800a5f4 <__sflush_r+0x108>)
 800a54c:	40ca      	lsrs	r2, r1
 800a54e:	07d6      	lsls	r6, r2, #31
 800a550:	d528      	bpl.n	800a5a4 <__sflush_r+0xb8>
 800a552:	2200      	movs	r2, #0
 800a554:	6062      	str	r2, [r4, #4]
 800a556:	04d9      	lsls	r1, r3, #19
 800a558:	6922      	ldr	r2, [r4, #16]
 800a55a:	6022      	str	r2, [r4, #0]
 800a55c:	d504      	bpl.n	800a568 <__sflush_r+0x7c>
 800a55e:	1c42      	adds	r2, r0, #1
 800a560:	d101      	bne.n	800a566 <__sflush_r+0x7a>
 800a562:	682b      	ldr	r3, [r5, #0]
 800a564:	b903      	cbnz	r3, 800a568 <__sflush_r+0x7c>
 800a566:	6560      	str	r0, [r4, #84]	; 0x54
 800a568:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a56a:	602f      	str	r7, [r5, #0]
 800a56c:	2900      	cmp	r1, #0
 800a56e:	d0ca      	beq.n	800a506 <__sflush_r+0x1a>
 800a570:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a574:	4299      	cmp	r1, r3
 800a576:	d002      	beq.n	800a57e <__sflush_r+0x92>
 800a578:	4628      	mov	r0, r5
 800a57a:	f7ff fae3 	bl	8009b44 <_free_r>
 800a57e:	2000      	movs	r0, #0
 800a580:	6360      	str	r0, [r4, #52]	; 0x34
 800a582:	e7c1      	b.n	800a508 <__sflush_r+0x1c>
 800a584:	6a21      	ldr	r1, [r4, #32]
 800a586:	2301      	movs	r3, #1
 800a588:	4628      	mov	r0, r5
 800a58a:	47b0      	blx	r6
 800a58c:	1c41      	adds	r1, r0, #1
 800a58e:	d1c7      	bne.n	800a520 <__sflush_r+0x34>
 800a590:	682b      	ldr	r3, [r5, #0]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d0c4      	beq.n	800a520 <__sflush_r+0x34>
 800a596:	2b1d      	cmp	r3, #29
 800a598:	d001      	beq.n	800a59e <__sflush_r+0xb2>
 800a59a:	2b16      	cmp	r3, #22
 800a59c:	d101      	bne.n	800a5a2 <__sflush_r+0xb6>
 800a59e:	602f      	str	r7, [r5, #0]
 800a5a0:	e7b1      	b.n	800a506 <__sflush_r+0x1a>
 800a5a2:	89a3      	ldrh	r3, [r4, #12]
 800a5a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5a8:	81a3      	strh	r3, [r4, #12]
 800a5aa:	e7ad      	b.n	800a508 <__sflush_r+0x1c>
 800a5ac:	690f      	ldr	r7, [r1, #16]
 800a5ae:	2f00      	cmp	r7, #0
 800a5b0:	d0a9      	beq.n	800a506 <__sflush_r+0x1a>
 800a5b2:	0793      	lsls	r3, r2, #30
 800a5b4:	680e      	ldr	r6, [r1, #0]
 800a5b6:	bf08      	it	eq
 800a5b8:	694b      	ldreq	r3, [r1, #20]
 800a5ba:	600f      	str	r7, [r1, #0]
 800a5bc:	bf18      	it	ne
 800a5be:	2300      	movne	r3, #0
 800a5c0:	eba6 0807 	sub.w	r8, r6, r7
 800a5c4:	608b      	str	r3, [r1, #8]
 800a5c6:	f1b8 0f00 	cmp.w	r8, #0
 800a5ca:	dd9c      	ble.n	800a506 <__sflush_r+0x1a>
 800a5cc:	6a21      	ldr	r1, [r4, #32]
 800a5ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a5d0:	4643      	mov	r3, r8
 800a5d2:	463a      	mov	r2, r7
 800a5d4:	4628      	mov	r0, r5
 800a5d6:	47b0      	blx	r6
 800a5d8:	2800      	cmp	r0, #0
 800a5da:	dc06      	bgt.n	800a5ea <__sflush_r+0xfe>
 800a5dc:	89a3      	ldrh	r3, [r4, #12]
 800a5de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5e2:	81a3      	strh	r3, [r4, #12]
 800a5e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5e8:	e78e      	b.n	800a508 <__sflush_r+0x1c>
 800a5ea:	4407      	add	r7, r0
 800a5ec:	eba8 0800 	sub.w	r8, r8, r0
 800a5f0:	e7e9      	b.n	800a5c6 <__sflush_r+0xda>
 800a5f2:	bf00      	nop
 800a5f4:	20400001 	.word	0x20400001

0800a5f8 <_fflush_r>:
 800a5f8:	b538      	push	{r3, r4, r5, lr}
 800a5fa:	690b      	ldr	r3, [r1, #16]
 800a5fc:	4605      	mov	r5, r0
 800a5fe:	460c      	mov	r4, r1
 800a600:	b913      	cbnz	r3, 800a608 <_fflush_r+0x10>
 800a602:	2500      	movs	r5, #0
 800a604:	4628      	mov	r0, r5
 800a606:	bd38      	pop	{r3, r4, r5, pc}
 800a608:	b118      	cbz	r0, 800a612 <_fflush_r+0x1a>
 800a60a:	6983      	ldr	r3, [r0, #24]
 800a60c:	b90b      	cbnz	r3, 800a612 <_fflush_r+0x1a>
 800a60e:	f000 f887 	bl	800a720 <__sinit>
 800a612:	4b14      	ldr	r3, [pc, #80]	; (800a664 <_fflush_r+0x6c>)
 800a614:	429c      	cmp	r4, r3
 800a616:	d11b      	bne.n	800a650 <_fflush_r+0x58>
 800a618:	686c      	ldr	r4, [r5, #4]
 800a61a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d0ef      	beq.n	800a602 <_fflush_r+0xa>
 800a622:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a624:	07d0      	lsls	r0, r2, #31
 800a626:	d404      	bmi.n	800a632 <_fflush_r+0x3a>
 800a628:	0599      	lsls	r1, r3, #22
 800a62a:	d402      	bmi.n	800a632 <_fflush_r+0x3a>
 800a62c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a62e:	f000 f915 	bl	800a85c <__retarget_lock_acquire_recursive>
 800a632:	4628      	mov	r0, r5
 800a634:	4621      	mov	r1, r4
 800a636:	f7ff ff59 	bl	800a4ec <__sflush_r>
 800a63a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a63c:	07da      	lsls	r2, r3, #31
 800a63e:	4605      	mov	r5, r0
 800a640:	d4e0      	bmi.n	800a604 <_fflush_r+0xc>
 800a642:	89a3      	ldrh	r3, [r4, #12]
 800a644:	059b      	lsls	r3, r3, #22
 800a646:	d4dd      	bmi.n	800a604 <_fflush_r+0xc>
 800a648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a64a:	f000 f908 	bl	800a85e <__retarget_lock_release_recursive>
 800a64e:	e7d9      	b.n	800a604 <_fflush_r+0xc>
 800a650:	4b05      	ldr	r3, [pc, #20]	; (800a668 <_fflush_r+0x70>)
 800a652:	429c      	cmp	r4, r3
 800a654:	d101      	bne.n	800a65a <_fflush_r+0x62>
 800a656:	68ac      	ldr	r4, [r5, #8]
 800a658:	e7df      	b.n	800a61a <_fflush_r+0x22>
 800a65a:	4b04      	ldr	r3, [pc, #16]	; (800a66c <_fflush_r+0x74>)
 800a65c:	429c      	cmp	r4, r3
 800a65e:	bf08      	it	eq
 800a660:	68ec      	ldreq	r4, [r5, #12]
 800a662:	e7da      	b.n	800a61a <_fflush_r+0x22>
 800a664:	0800b05c 	.word	0x0800b05c
 800a668:	0800b07c 	.word	0x0800b07c
 800a66c:	0800b03c 	.word	0x0800b03c

0800a670 <std>:
 800a670:	2300      	movs	r3, #0
 800a672:	b510      	push	{r4, lr}
 800a674:	4604      	mov	r4, r0
 800a676:	e9c0 3300 	strd	r3, r3, [r0]
 800a67a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a67e:	6083      	str	r3, [r0, #8]
 800a680:	8181      	strh	r1, [r0, #12]
 800a682:	6643      	str	r3, [r0, #100]	; 0x64
 800a684:	81c2      	strh	r2, [r0, #14]
 800a686:	6183      	str	r3, [r0, #24]
 800a688:	4619      	mov	r1, r3
 800a68a:	2208      	movs	r2, #8
 800a68c:	305c      	adds	r0, #92	; 0x5c
 800a68e:	f7fd fbb5 	bl	8007dfc <memset>
 800a692:	4b05      	ldr	r3, [pc, #20]	; (800a6a8 <std+0x38>)
 800a694:	6263      	str	r3, [r4, #36]	; 0x24
 800a696:	4b05      	ldr	r3, [pc, #20]	; (800a6ac <std+0x3c>)
 800a698:	62a3      	str	r3, [r4, #40]	; 0x28
 800a69a:	4b05      	ldr	r3, [pc, #20]	; (800a6b0 <std+0x40>)
 800a69c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a69e:	4b05      	ldr	r3, [pc, #20]	; (800a6b4 <std+0x44>)
 800a6a0:	6224      	str	r4, [r4, #32]
 800a6a2:	6323      	str	r3, [r4, #48]	; 0x30
 800a6a4:	bd10      	pop	{r4, pc}
 800a6a6:	bf00      	nop
 800a6a8:	0800a9c1 	.word	0x0800a9c1
 800a6ac:	0800a9e3 	.word	0x0800a9e3
 800a6b0:	0800aa1b 	.word	0x0800aa1b
 800a6b4:	0800aa3f 	.word	0x0800aa3f

0800a6b8 <_cleanup_r>:
 800a6b8:	4901      	ldr	r1, [pc, #4]	; (800a6c0 <_cleanup_r+0x8>)
 800a6ba:	f000 b8af 	b.w	800a81c <_fwalk_reent>
 800a6be:	bf00      	nop
 800a6c0:	0800a5f9 	.word	0x0800a5f9

0800a6c4 <__sfmoreglue>:
 800a6c4:	b570      	push	{r4, r5, r6, lr}
 800a6c6:	1e4a      	subs	r2, r1, #1
 800a6c8:	2568      	movs	r5, #104	; 0x68
 800a6ca:	4355      	muls	r5, r2
 800a6cc:	460e      	mov	r6, r1
 800a6ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a6d2:	f7ff fa87 	bl	8009be4 <_malloc_r>
 800a6d6:	4604      	mov	r4, r0
 800a6d8:	b140      	cbz	r0, 800a6ec <__sfmoreglue+0x28>
 800a6da:	2100      	movs	r1, #0
 800a6dc:	e9c0 1600 	strd	r1, r6, [r0]
 800a6e0:	300c      	adds	r0, #12
 800a6e2:	60a0      	str	r0, [r4, #8]
 800a6e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a6e8:	f7fd fb88 	bl	8007dfc <memset>
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	bd70      	pop	{r4, r5, r6, pc}

0800a6f0 <__sfp_lock_acquire>:
 800a6f0:	4801      	ldr	r0, [pc, #4]	; (800a6f8 <__sfp_lock_acquire+0x8>)
 800a6f2:	f000 b8b3 	b.w	800a85c <__retarget_lock_acquire_recursive>
 800a6f6:	bf00      	nop
 800a6f8:	200014cc 	.word	0x200014cc

0800a6fc <__sfp_lock_release>:
 800a6fc:	4801      	ldr	r0, [pc, #4]	; (800a704 <__sfp_lock_release+0x8>)
 800a6fe:	f000 b8ae 	b.w	800a85e <__retarget_lock_release_recursive>
 800a702:	bf00      	nop
 800a704:	200014cc 	.word	0x200014cc

0800a708 <__sinit_lock_acquire>:
 800a708:	4801      	ldr	r0, [pc, #4]	; (800a710 <__sinit_lock_acquire+0x8>)
 800a70a:	f000 b8a7 	b.w	800a85c <__retarget_lock_acquire_recursive>
 800a70e:	bf00      	nop
 800a710:	200014c7 	.word	0x200014c7

0800a714 <__sinit_lock_release>:
 800a714:	4801      	ldr	r0, [pc, #4]	; (800a71c <__sinit_lock_release+0x8>)
 800a716:	f000 b8a2 	b.w	800a85e <__retarget_lock_release_recursive>
 800a71a:	bf00      	nop
 800a71c:	200014c7 	.word	0x200014c7

0800a720 <__sinit>:
 800a720:	b510      	push	{r4, lr}
 800a722:	4604      	mov	r4, r0
 800a724:	f7ff fff0 	bl	800a708 <__sinit_lock_acquire>
 800a728:	69a3      	ldr	r3, [r4, #24]
 800a72a:	b11b      	cbz	r3, 800a734 <__sinit+0x14>
 800a72c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a730:	f7ff bff0 	b.w	800a714 <__sinit_lock_release>
 800a734:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a738:	6523      	str	r3, [r4, #80]	; 0x50
 800a73a:	4b13      	ldr	r3, [pc, #76]	; (800a788 <__sinit+0x68>)
 800a73c:	4a13      	ldr	r2, [pc, #76]	; (800a78c <__sinit+0x6c>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	62a2      	str	r2, [r4, #40]	; 0x28
 800a742:	42a3      	cmp	r3, r4
 800a744:	bf04      	itt	eq
 800a746:	2301      	moveq	r3, #1
 800a748:	61a3      	streq	r3, [r4, #24]
 800a74a:	4620      	mov	r0, r4
 800a74c:	f000 f820 	bl	800a790 <__sfp>
 800a750:	6060      	str	r0, [r4, #4]
 800a752:	4620      	mov	r0, r4
 800a754:	f000 f81c 	bl	800a790 <__sfp>
 800a758:	60a0      	str	r0, [r4, #8]
 800a75a:	4620      	mov	r0, r4
 800a75c:	f000 f818 	bl	800a790 <__sfp>
 800a760:	2200      	movs	r2, #0
 800a762:	60e0      	str	r0, [r4, #12]
 800a764:	2104      	movs	r1, #4
 800a766:	6860      	ldr	r0, [r4, #4]
 800a768:	f7ff ff82 	bl	800a670 <std>
 800a76c:	68a0      	ldr	r0, [r4, #8]
 800a76e:	2201      	movs	r2, #1
 800a770:	2109      	movs	r1, #9
 800a772:	f7ff ff7d 	bl	800a670 <std>
 800a776:	68e0      	ldr	r0, [r4, #12]
 800a778:	2202      	movs	r2, #2
 800a77a:	2112      	movs	r1, #18
 800a77c:	f7ff ff78 	bl	800a670 <std>
 800a780:	2301      	movs	r3, #1
 800a782:	61a3      	str	r3, [r4, #24]
 800a784:	e7d2      	b.n	800a72c <__sinit+0xc>
 800a786:	bf00      	nop
 800a788:	0800acb8 	.word	0x0800acb8
 800a78c:	0800a6b9 	.word	0x0800a6b9

0800a790 <__sfp>:
 800a790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a792:	4607      	mov	r7, r0
 800a794:	f7ff ffac 	bl	800a6f0 <__sfp_lock_acquire>
 800a798:	4b1e      	ldr	r3, [pc, #120]	; (800a814 <__sfp+0x84>)
 800a79a:	681e      	ldr	r6, [r3, #0]
 800a79c:	69b3      	ldr	r3, [r6, #24]
 800a79e:	b913      	cbnz	r3, 800a7a6 <__sfp+0x16>
 800a7a0:	4630      	mov	r0, r6
 800a7a2:	f7ff ffbd 	bl	800a720 <__sinit>
 800a7a6:	3648      	adds	r6, #72	; 0x48
 800a7a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a7ac:	3b01      	subs	r3, #1
 800a7ae:	d503      	bpl.n	800a7b8 <__sfp+0x28>
 800a7b0:	6833      	ldr	r3, [r6, #0]
 800a7b2:	b30b      	cbz	r3, 800a7f8 <__sfp+0x68>
 800a7b4:	6836      	ldr	r6, [r6, #0]
 800a7b6:	e7f7      	b.n	800a7a8 <__sfp+0x18>
 800a7b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a7bc:	b9d5      	cbnz	r5, 800a7f4 <__sfp+0x64>
 800a7be:	4b16      	ldr	r3, [pc, #88]	; (800a818 <__sfp+0x88>)
 800a7c0:	60e3      	str	r3, [r4, #12]
 800a7c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a7c6:	6665      	str	r5, [r4, #100]	; 0x64
 800a7c8:	f000 f847 	bl	800a85a <__retarget_lock_init_recursive>
 800a7cc:	f7ff ff96 	bl	800a6fc <__sfp_lock_release>
 800a7d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a7d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a7d8:	6025      	str	r5, [r4, #0]
 800a7da:	61a5      	str	r5, [r4, #24]
 800a7dc:	2208      	movs	r2, #8
 800a7de:	4629      	mov	r1, r5
 800a7e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a7e4:	f7fd fb0a 	bl	8007dfc <memset>
 800a7e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a7ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7f4:	3468      	adds	r4, #104	; 0x68
 800a7f6:	e7d9      	b.n	800a7ac <__sfp+0x1c>
 800a7f8:	2104      	movs	r1, #4
 800a7fa:	4638      	mov	r0, r7
 800a7fc:	f7ff ff62 	bl	800a6c4 <__sfmoreglue>
 800a800:	4604      	mov	r4, r0
 800a802:	6030      	str	r0, [r6, #0]
 800a804:	2800      	cmp	r0, #0
 800a806:	d1d5      	bne.n	800a7b4 <__sfp+0x24>
 800a808:	f7ff ff78 	bl	800a6fc <__sfp_lock_release>
 800a80c:	230c      	movs	r3, #12
 800a80e:	603b      	str	r3, [r7, #0]
 800a810:	e7ee      	b.n	800a7f0 <__sfp+0x60>
 800a812:	bf00      	nop
 800a814:	0800acb8 	.word	0x0800acb8
 800a818:	ffff0001 	.word	0xffff0001

0800a81c <_fwalk_reent>:
 800a81c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a820:	4606      	mov	r6, r0
 800a822:	4688      	mov	r8, r1
 800a824:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a828:	2700      	movs	r7, #0
 800a82a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a82e:	f1b9 0901 	subs.w	r9, r9, #1
 800a832:	d505      	bpl.n	800a840 <_fwalk_reent+0x24>
 800a834:	6824      	ldr	r4, [r4, #0]
 800a836:	2c00      	cmp	r4, #0
 800a838:	d1f7      	bne.n	800a82a <_fwalk_reent+0xe>
 800a83a:	4638      	mov	r0, r7
 800a83c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a840:	89ab      	ldrh	r3, [r5, #12]
 800a842:	2b01      	cmp	r3, #1
 800a844:	d907      	bls.n	800a856 <_fwalk_reent+0x3a>
 800a846:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a84a:	3301      	adds	r3, #1
 800a84c:	d003      	beq.n	800a856 <_fwalk_reent+0x3a>
 800a84e:	4629      	mov	r1, r5
 800a850:	4630      	mov	r0, r6
 800a852:	47c0      	blx	r8
 800a854:	4307      	orrs	r7, r0
 800a856:	3568      	adds	r5, #104	; 0x68
 800a858:	e7e9      	b.n	800a82e <_fwalk_reent+0x12>

0800a85a <__retarget_lock_init_recursive>:
 800a85a:	4770      	bx	lr

0800a85c <__retarget_lock_acquire_recursive>:
 800a85c:	4770      	bx	lr

0800a85e <__retarget_lock_release_recursive>:
 800a85e:	4770      	bx	lr

0800a860 <__swhatbuf_r>:
 800a860:	b570      	push	{r4, r5, r6, lr}
 800a862:	460e      	mov	r6, r1
 800a864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a868:	2900      	cmp	r1, #0
 800a86a:	b096      	sub	sp, #88	; 0x58
 800a86c:	4614      	mov	r4, r2
 800a86e:	461d      	mov	r5, r3
 800a870:	da07      	bge.n	800a882 <__swhatbuf_r+0x22>
 800a872:	2300      	movs	r3, #0
 800a874:	602b      	str	r3, [r5, #0]
 800a876:	89b3      	ldrh	r3, [r6, #12]
 800a878:	061a      	lsls	r2, r3, #24
 800a87a:	d410      	bmi.n	800a89e <__swhatbuf_r+0x3e>
 800a87c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a880:	e00e      	b.n	800a8a0 <__swhatbuf_r+0x40>
 800a882:	466a      	mov	r2, sp
 800a884:	f000 f902 	bl	800aa8c <_fstat_r>
 800a888:	2800      	cmp	r0, #0
 800a88a:	dbf2      	blt.n	800a872 <__swhatbuf_r+0x12>
 800a88c:	9a01      	ldr	r2, [sp, #4]
 800a88e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a892:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a896:	425a      	negs	r2, r3
 800a898:	415a      	adcs	r2, r3
 800a89a:	602a      	str	r2, [r5, #0]
 800a89c:	e7ee      	b.n	800a87c <__swhatbuf_r+0x1c>
 800a89e:	2340      	movs	r3, #64	; 0x40
 800a8a0:	2000      	movs	r0, #0
 800a8a2:	6023      	str	r3, [r4, #0]
 800a8a4:	b016      	add	sp, #88	; 0x58
 800a8a6:	bd70      	pop	{r4, r5, r6, pc}

0800a8a8 <__smakebuf_r>:
 800a8a8:	898b      	ldrh	r3, [r1, #12]
 800a8aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a8ac:	079d      	lsls	r5, r3, #30
 800a8ae:	4606      	mov	r6, r0
 800a8b0:	460c      	mov	r4, r1
 800a8b2:	d507      	bpl.n	800a8c4 <__smakebuf_r+0x1c>
 800a8b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a8b8:	6023      	str	r3, [r4, #0]
 800a8ba:	6123      	str	r3, [r4, #16]
 800a8bc:	2301      	movs	r3, #1
 800a8be:	6163      	str	r3, [r4, #20]
 800a8c0:	b002      	add	sp, #8
 800a8c2:	bd70      	pop	{r4, r5, r6, pc}
 800a8c4:	ab01      	add	r3, sp, #4
 800a8c6:	466a      	mov	r2, sp
 800a8c8:	f7ff ffca 	bl	800a860 <__swhatbuf_r>
 800a8cc:	9900      	ldr	r1, [sp, #0]
 800a8ce:	4605      	mov	r5, r0
 800a8d0:	4630      	mov	r0, r6
 800a8d2:	f7ff f987 	bl	8009be4 <_malloc_r>
 800a8d6:	b948      	cbnz	r0, 800a8ec <__smakebuf_r+0x44>
 800a8d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8dc:	059a      	lsls	r2, r3, #22
 800a8de:	d4ef      	bmi.n	800a8c0 <__smakebuf_r+0x18>
 800a8e0:	f023 0303 	bic.w	r3, r3, #3
 800a8e4:	f043 0302 	orr.w	r3, r3, #2
 800a8e8:	81a3      	strh	r3, [r4, #12]
 800a8ea:	e7e3      	b.n	800a8b4 <__smakebuf_r+0xc>
 800a8ec:	4b0d      	ldr	r3, [pc, #52]	; (800a924 <__smakebuf_r+0x7c>)
 800a8ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800a8f0:	89a3      	ldrh	r3, [r4, #12]
 800a8f2:	6020      	str	r0, [r4, #0]
 800a8f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8f8:	81a3      	strh	r3, [r4, #12]
 800a8fa:	9b00      	ldr	r3, [sp, #0]
 800a8fc:	6163      	str	r3, [r4, #20]
 800a8fe:	9b01      	ldr	r3, [sp, #4]
 800a900:	6120      	str	r0, [r4, #16]
 800a902:	b15b      	cbz	r3, 800a91c <__smakebuf_r+0x74>
 800a904:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a908:	4630      	mov	r0, r6
 800a90a:	f000 f8d1 	bl	800aab0 <_isatty_r>
 800a90e:	b128      	cbz	r0, 800a91c <__smakebuf_r+0x74>
 800a910:	89a3      	ldrh	r3, [r4, #12]
 800a912:	f023 0303 	bic.w	r3, r3, #3
 800a916:	f043 0301 	orr.w	r3, r3, #1
 800a91a:	81a3      	strh	r3, [r4, #12]
 800a91c:	89a0      	ldrh	r0, [r4, #12]
 800a91e:	4305      	orrs	r5, r0
 800a920:	81a5      	strh	r5, [r4, #12]
 800a922:	e7cd      	b.n	800a8c0 <__smakebuf_r+0x18>
 800a924:	0800a6b9 	.word	0x0800a6b9

0800a928 <_malloc_usable_size_r>:
 800a928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a92c:	1f18      	subs	r0, r3, #4
 800a92e:	2b00      	cmp	r3, #0
 800a930:	bfbc      	itt	lt
 800a932:	580b      	ldrlt	r3, [r1, r0]
 800a934:	18c0      	addlt	r0, r0, r3
 800a936:	4770      	bx	lr

0800a938 <_raise_r>:
 800a938:	291f      	cmp	r1, #31
 800a93a:	b538      	push	{r3, r4, r5, lr}
 800a93c:	4604      	mov	r4, r0
 800a93e:	460d      	mov	r5, r1
 800a940:	d904      	bls.n	800a94c <_raise_r+0x14>
 800a942:	2316      	movs	r3, #22
 800a944:	6003      	str	r3, [r0, #0]
 800a946:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a94a:	bd38      	pop	{r3, r4, r5, pc}
 800a94c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a94e:	b112      	cbz	r2, 800a956 <_raise_r+0x1e>
 800a950:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a954:	b94b      	cbnz	r3, 800a96a <_raise_r+0x32>
 800a956:	4620      	mov	r0, r4
 800a958:	f000 f830 	bl	800a9bc <_getpid_r>
 800a95c:	462a      	mov	r2, r5
 800a95e:	4601      	mov	r1, r0
 800a960:	4620      	mov	r0, r4
 800a962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a966:	f000 b817 	b.w	800a998 <_kill_r>
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	d00a      	beq.n	800a984 <_raise_r+0x4c>
 800a96e:	1c59      	adds	r1, r3, #1
 800a970:	d103      	bne.n	800a97a <_raise_r+0x42>
 800a972:	2316      	movs	r3, #22
 800a974:	6003      	str	r3, [r0, #0]
 800a976:	2001      	movs	r0, #1
 800a978:	e7e7      	b.n	800a94a <_raise_r+0x12>
 800a97a:	2400      	movs	r4, #0
 800a97c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a980:	4628      	mov	r0, r5
 800a982:	4798      	blx	r3
 800a984:	2000      	movs	r0, #0
 800a986:	e7e0      	b.n	800a94a <_raise_r+0x12>

0800a988 <raise>:
 800a988:	4b02      	ldr	r3, [pc, #8]	; (800a994 <raise+0xc>)
 800a98a:	4601      	mov	r1, r0
 800a98c:	6818      	ldr	r0, [r3, #0]
 800a98e:	f7ff bfd3 	b.w	800a938 <_raise_r>
 800a992:	bf00      	nop
 800a994:	200000d4 	.word	0x200000d4

0800a998 <_kill_r>:
 800a998:	b538      	push	{r3, r4, r5, lr}
 800a99a:	4d07      	ldr	r5, [pc, #28]	; (800a9b8 <_kill_r+0x20>)
 800a99c:	2300      	movs	r3, #0
 800a99e:	4604      	mov	r4, r0
 800a9a0:	4608      	mov	r0, r1
 800a9a2:	4611      	mov	r1, r2
 800a9a4:	602b      	str	r3, [r5, #0]
 800a9a6:	f7f7 ff29 	bl	80027fc <_kill>
 800a9aa:	1c43      	adds	r3, r0, #1
 800a9ac:	d102      	bne.n	800a9b4 <_kill_r+0x1c>
 800a9ae:	682b      	ldr	r3, [r5, #0]
 800a9b0:	b103      	cbz	r3, 800a9b4 <_kill_r+0x1c>
 800a9b2:	6023      	str	r3, [r4, #0]
 800a9b4:	bd38      	pop	{r3, r4, r5, pc}
 800a9b6:	bf00      	nop
 800a9b8:	200014c0 	.word	0x200014c0

0800a9bc <_getpid_r>:
 800a9bc:	f7f7 bf16 	b.w	80027ec <_getpid>

0800a9c0 <__sread>:
 800a9c0:	b510      	push	{r4, lr}
 800a9c2:	460c      	mov	r4, r1
 800a9c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9c8:	f000 f894 	bl	800aaf4 <_read_r>
 800a9cc:	2800      	cmp	r0, #0
 800a9ce:	bfab      	itete	ge
 800a9d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a9d2:	89a3      	ldrhlt	r3, [r4, #12]
 800a9d4:	181b      	addge	r3, r3, r0
 800a9d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a9da:	bfac      	ite	ge
 800a9dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a9de:	81a3      	strhlt	r3, [r4, #12]
 800a9e0:	bd10      	pop	{r4, pc}

0800a9e2 <__swrite>:
 800a9e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9e6:	461f      	mov	r7, r3
 800a9e8:	898b      	ldrh	r3, [r1, #12]
 800a9ea:	05db      	lsls	r3, r3, #23
 800a9ec:	4605      	mov	r5, r0
 800a9ee:	460c      	mov	r4, r1
 800a9f0:	4616      	mov	r6, r2
 800a9f2:	d505      	bpl.n	800aa00 <__swrite+0x1e>
 800a9f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9f8:	2302      	movs	r3, #2
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f000 f868 	bl	800aad0 <_lseek_r>
 800aa00:	89a3      	ldrh	r3, [r4, #12]
 800aa02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa0a:	81a3      	strh	r3, [r4, #12]
 800aa0c:	4632      	mov	r2, r6
 800aa0e:	463b      	mov	r3, r7
 800aa10:	4628      	mov	r0, r5
 800aa12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa16:	f000 b817 	b.w	800aa48 <_write_r>

0800aa1a <__sseek>:
 800aa1a:	b510      	push	{r4, lr}
 800aa1c:	460c      	mov	r4, r1
 800aa1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa22:	f000 f855 	bl	800aad0 <_lseek_r>
 800aa26:	1c43      	adds	r3, r0, #1
 800aa28:	89a3      	ldrh	r3, [r4, #12]
 800aa2a:	bf15      	itete	ne
 800aa2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa36:	81a3      	strheq	r3, [r4, #12]
 800aa38:	bf18      	it	ne
 800aa3a:	81a3      	strhne	r3, [r4, #12]
 800aa3c:	bd10      	pop	{r4, pc}

0800aa3e <__sclose>:
 800aa3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa42:	f000 b813 	b.w	800aa6c <_close_r>
	...

0800aa48 <_write_r>:
 800aa48:	b538      	push	{r3, r4, r5, lr}
 800aa4a:	4d07      	ldr	r5, [pc, #28]	; (800aa68 <_write_r+0x20>)
 800aa4c:	4604      	mov	r4, r0
 800aa4e:	4608      	mov	r0, r1
 800aa50:	4611      	mov	r1, r2
 800aa52:	2200      	movs	r2, #0
 800aa54:	602a      	str	r2, [r5, #0]
 800aa56:	461a      	mov	r2, r3
 800aa58:	f7f7 ff07 	bl	800286a <_write>
 800aa5c:	1c43      	adds	r3, r0, #1
 800aa5e:	d102      	bne.n	800aa66 <_write_r+0x1e>
 800aa60:	682b      	ldr	r3, [r5, #0]
 800aa62:	b103      	cbz	r3, 800aa66 <_write_r+0x1e>
 800aa64:	6023      	str	r3, [r4, #0]
 800aa66:	bd38      	pop	{r3, r4, r5, pc}
 800aa68:	200014c0 	.word	0x200014c0

0800aa6c <_close_r>:
 800aa6c:	b538      	push	{r3, r4, r5, lr}
 800aa6e:	4d06      	ldr	r5, [pc, #24]	; (800aa88 <_close_r+0x1c>)
 800aa70:	2300      	movs	r3, #0
 800aa72:	4604      	mov	r4, r0
 800aa74:	4608      	mov	r0, r1
 800aa76:	602b      	str	r3, [r5, #0]
 800aa78:	f7f7 ff13 	bl	80028a2 <_close>
 800aa7c:	1c43      	adds	r3, r0, #1
 800aa7e:	d102      	bne.n	800aa86 <_close_r+0x1a>
 800aa80:	682b      	ldr	r3, [r5, #0]
 800aa82:	b103      	cbz	r3, 800aa86 <_close_r+0x1a>
 800aa84:	6023      	str	r3, [r4, #0]
 800aa86:	bd38      	pop	{r3, r4, r5, pc}
 800aa88:	200014c0 	.word	0x200014c0

0800aa8c <_fstat_r>:
 800aa8c:	b538      	push	{r3, r4, r5, lr}
 800aa8e:	4d07      	ldr	r5, [pc, #28]	; (800aaac <_fstat_r+0x20>)
 800aa90:	2300      	movs	r3, #0
 800aa92:	4604      	mov	r4, r0
 800aa94:	4608      	mov	r0, r1
 800aa96:	4611      	mov	r1, r2
 800aa98:	602b      	str	r3, [r5, #0]
 800aa9a:	f7f7 ff0e 	bl	80028ba <_fstat>
 800aa9e:	1c43      	adds	r3, r0, #1
 800aaa0:	d102      	bne.n	800aaa8 <_fstat_r+0x1c>
 800aaa2:	682b      	ldr	r3, [r5, #0]
 800aaa4:	b103      	cbz	r3, 800aaa8 <_fstat_r+0x1c>
 800aaa6:	6023      	str	r3, [r4, #0]
 800aaa8:	bd38      	pop	{r3, r4, r5, pc}
 800aaaa:	bf00      	nop
 800aaac:	200014c0 	.word	0x200014c0

0800aab0 <_isatty_r>:
 800aab0:	b538      	push	{r3, r4, r5, lr}
 800aab2:	4d06      	ldr	r5, [pc, #24]	; (800aacc <_isatty_r+0x1c>)
 800aab4:	2300      	movs	r3, #0
 800aab6:	4604      	mov	r4, r0
 800aab8:	4608      	mov	r0, r1
 800aaba:	602b      	str	r3, [r5, #0]
 800aabc:	f7f7 ff0d 	bl	80028da <_isatty>
 800aac0:	1c43      	adds	r3, r0, #1
 800aac2:	d102      	bne.n	800aaca <_isatty_r+0x1a>
 800aac4:	682b      	ldr	r3, [r5, #0]
 800aac6:	b103      	cbz	r3, 800aaca <_isatty_r+0x1a>
 800aac8:	6023      	str	r3, [r4, #0]
 800aaca:	bd38      	pop	{r3, r4, r5, pc}
 800aacc:	200014c0 	.word	0x200014c0

0800aad0 <_lseek_r>:
 800aad0:	b538      	push	{r3, r4, r5, lr}
 800aad2:	4d07      	ldr	r5, [pc, #28]	; (800aaf0 <_lseek_r+0x20>)
 800aad4:	4604      	mov	r4, r0
 800aad6:	4608      	mov	r0, r1
 800aad8:	4611      	mov	r1, r2
 800aada:	2200      	movs	r2, #0
 800aadc:	602a      	str	r2, [r5, #0]
 800aade:	461a      	mov	r2, r3
 800aae0:	f7f7 ff06 	bl	80028f0 <_lseek>
 800aae4:	1c43      	adds	r3, r0, #1
 800aae6:	d102      	bne.n	800aaee <_lseek_r+0x1e>
 800aae8:	682b      	ldr	r3, [r5, #0]
 800aaea:	b103      	cbz	r3, 800aaee <_lseek_r+0x1e>
 800aaec:	6023      	str	r3, [r4, #0]
 800aaee:	bd38      	pop	{r3, r4, r5, pc}
 800aaf0:	200014c0 	.word	0x200014c0

0800aaf4 <_read_r>:
 800aaf4:	b538      	push	{r3, r4, r5, lr}
 800aaf6:	4d07      	ldr	r5, [pc, #28]	; (800ab14 <_read_r+0x20>)
 800aaf8:	4604      	mov	r4, r0
 800aafa:	4608      	mov	r0, r1
 800aafc:	4611      	mov	r1, r2
 800aafe:	2200      	movs	r2, #0
 800ab00:	602a      	str	r2, [r5, #0]
 800ab02:	461a      	mov	r2, r3
 800ab04:	f7f7 fe94 	bl	8002830 <_read>
 800ab08:	1c43      	adds	r3, r0, #1
 800ab0a:	d102      	bne.n	800ab12 <_read_r+0x1e>
 800ab0c:	682b      	ldr	r3, [r5, #0]
 800ab0e:	b103      	cbz	r3, 800ab12 <_read_r+0x1e>
 800ab10:	6023      	str	r3, [r4, #0]
 800ab12:	bd38      	pop	{r3, r4, r5, pc}
 800ab14:	200014c0 	.word	0x200014c0

0800ab18 <_init>:
 800ab18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab1a:	bf00      	nop
 800ab1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab1e:	bc08      	pop	{r3}
 800ab20:	469e      	mov	lr, r3
 800ab22:	4770      	bx	lr

0800ab24 <_fini>:
 800ab24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab26:	bf00      	nop
 800ab28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab2a:	bc08      	pop	{r3}
 800ab2c:	469e      	mov	lr, r3
 800ab2e:	4770      	bx	lr
