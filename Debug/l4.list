
l4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a48  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  08008c08  08008c08  00018c08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800908c  0800908c  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800908c  0800908c  0001908c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009094  08009094  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009094  08009094  00019094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009098  08009098  00019098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800909c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000204  080092a0  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  080092a0  0002048c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a82b  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003259  00000000  00000000  0003aa5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001548  00000000  00000000  0003dcb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013e0  00000000  00000000  0003f200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b8b0  00000000  00000000  000405e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000187aa  00000000  00000000  0006be90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110af3  00000000  00000000  0008463a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019512d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a00  00000000  00000000  00195180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000204 	.word	0x20000204
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008bf0 	.word	0x08008bf0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000208 	.word	0x20000208
 80001fc:	08008bf0 	.word	0x08008bf0

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 b96e 	b.w	8000ecc <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468c      	mov	ip, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f040 8083 	bne.w	8000d1e <__udivmoddi4+0x116>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4617      	mov	r7, r2
 8000c1c:	d947      	bls.n	8000cae <__udivmoddi4+0xa6>
 8000c1e:	fab2 f282 	clz	r2, r2
 8000c22:	b142      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	f1c2 0020 	rsb	r0, r2, #32
 8000c28:	fa24 f000 	lsr.w	r0, r4, r0
 8000c2c:	4091      	lsls	r1, r2
 8000c2e:	4097      	lsls	r7, r2
 8000c30:	ea40 0c01 	orr.w	ip, r0, r1
 8000c34:	4094      	lsls	r4, r2
 8000c36:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c3a:	0c23      	lsrs	r3, r4, #16
 8000c3c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c40:	fa1f fe87 	uxth.w	lr, r7
 8000c44:	fb08 c116 	mls	r1, r8, r6, ip
 8000c48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x60>
 8000c54:	18fb      	adds	r3, r7, r3
 8000c56:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c5a:	f080 8119 	bcs.w	8000e90 <__udivmoddi4+0x288>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 8116 	bls.w	8000e90 <__udivmoddi4+0x288>
 8000c64:	3e02      	subs	r6, #2
 8000c66:	443b      	add	r3, r7
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c70:	fb08 3310 	mls	r3, r8, r0, r3
 8000c74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c7c:	45a6      	cmp	lr, r4
 8000c7e:	d909      	bls.n	8000c94 <__udivmoddi4+0x8c>
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c86:	f080 8105 	bcs.w	8000e94 <__udivmoddi4+0x28c>
 8000c8a:	45a6      	cmp	lr, r4
 8000c8c:	f240 8102 	bls.w	8000e94 <__udivmoddi4+0x28c>
 8000c90:	3802      	subs	r0, #2
 8000c92:	443c      	add	r4, r7
 8000c94:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c98:	eba4 040e 	sub.w	r4, r4, lr
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	b11d      	cbz	r5, 8000ca8 <__udivmoddi4+0xa0>
 8000ca0:	40d4      	lsrs	r4, r2
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca8:	4631      	mov	r1, r6
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	b902      	cbnz	r2, 8000cb2 <__udivmoddi4+0xaa>
 8000cb0:	deff      	udf	#255	; 0xff
 8000cb2:	fab2 f282 	clz	r2, r2
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	d150      	bne.n	8000d5c <__udivmoddi4+0x154>
 8000cba:	1bcb      	subs	r3, r1, r7
 8000cbc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc0:	fa1f f887 	uxth.w	r8, r7
 8000cc4:	2601      	movs	r6, #1
 8000cc6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cca:	0c21      	lsrs	r1, r4, #16
 8000ccc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0xe4>
 8000cdc:	1879      	adds	r1, r7, r1
 8000cde:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0xe2>
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	f200 80e9 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000cea:	4684      	mov	ip, r0
 8000cec:	1ac9      	subs	r1, r1, r3
 8000cee:	b2a3      	uxth	r3, r4
 8000cf0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cf8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cfc:	fb08 f800 	mul.w	r8, r8, r0
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x10c>
 8000d04:	193c      	adds	r4, r7, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x10a>
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	f200 80d9 	bhi.w	8000ec4 <__udivmoddi4+0x2bc>
 8000d12:	4618      	mov	r0, r3
 8000d14:	eba4 0408 	sub.w	r4, r4, r8
 8000d18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1c:	e7bf      	b.n	8000c9e <__udivmoddi4+0x96>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0x12e>
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	f000 80b1 	beq.w	8000e8a <__udivmoddi4+0x282>
 8000d28:	2600      	movs	r6, #0
 8000d2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2e:	4630      	mov	r0, r6
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f683 	clz	r6, r3
 8000d3a:	2e00      	cmp	r6, #0
 8000d3c:	d14a      	bne.n	8000dd4 <__udivmoddi4+0x1cc>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0x140>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80b8 	bhi.w	8000eb8 <__udivmoddi4+0x2b0>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	468c      	mov	ip, r1
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	d0a8      	beq.n	8000ca8 <__udivmoddi4+0xa0>
 8000d56:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d5a:	e7a5      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000d5c:	f1c2 0320 	rsb	r3, r2, #32
 8000d60:	fa20 f603 	lsr.w	r6, r0, r3
 8000d64:	4097      	lsls	r7, r2
 8000d66:	fa01 f002 	lsl.w	r0, r1, r2
 8000d6a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6e:	40d9      	lsrs	r1, r3
 8000d70:	4330      	orrs	r0, r6
 8000d72:	0c03      	lsrs	r3, r0, #16
 8000d74:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d78:	fa1f f887 	uxth.w	r8, r7
 8000d7c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb06 f108 	mul.w	r1, r6, r8
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x19c>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d96:	f080 808d 	bcs.w	8000eb4 <__udivmoddi4+0x2ac>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 808a 	bls.w	8000eb4 <__udivmoddi4+0x2ac>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b281      	uxth	r1, r0
 8000da8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000db0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db4:	fb00 f308 	mul.w	r3, r0, r8
 8000db8:	428b      	cmp	r3, r1
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x1c4>
 8000dbc:	1879      	adds	r1, r7, r1
 8000dbe:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000dc2:	d273      	bcs.n	8000eac <__udivmoddi4+0x2a4>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d971      	bls.n	8000eac <__udivmoddi4+0x2a4>
 8000dc8:	3802      	subs	r0, #2
 8000dca:	4439      	add	r1, r7
 8000dcc:	1acb      	subs	r3, r1, r3
 8000dce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dd2:	e778      	b.n	8000cc6 <__udivmoddi4+0xbe>
 8000dd4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dd8:	fa03 f406 	lsl.w	r4, r3, r6
 8000ddc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000de0:	431c      	orrs	r4, r3
 8000de2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000de6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dee:	fa21 f10c 	lsr.w	r1, r1, ip
 8000df2:	431f      	orrs	r7, r3
 8000df4:	0c3b      	lsrs	r3, r7, #16
 8000df6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dfa:	fa1f f884 	uxth.w	r8, r4
 8000dfe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e02:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e06:	fb09 fa08 	mul.w	sl, r9, r8
 8000e0a:	458a      	cmp	sl, r1
 8000e0c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e10:	fa00 f306 	lsl.w	r3, r0, r6
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x220>
 8000e16:	1861      	adds	r1, r4, r1
 8000e18:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e1c:	d248      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e1e:	458a      	cmp	sl, r1
 8000e20:	d946      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4421      	add	r1, r4
 8000e28:	eba1 010a 	sub.w	r1, r1, sl
 8000e2c:	b2bf      	uxth	r7, r7
 8000e2e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e32:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e36:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e3a:	fb00 f808 	mul.w	r8, r0, r8
 8000e3e:	45b8      	cmp	r8, r7
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x24a>
 8000e42:	19e7      	adds	r7, r4, r7
 8000e44:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e48:	d22e      	bcs.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e4a:	45b8      	cmp	r8, r7
 8000e4c:	d92c      	bls.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4427      	add	r7, r4
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	eba7 0708 	sub.w	r7, r7, r8
 8000e5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5e:	454f      	cmp	r7, r9
 8000e60:	46c6      	mov	lr, r8
 8000e62:	4649      	mov	r1, r9
 8000e64:	d31a      	bcc.n	8000e9c <__udivmoddi4+0x294>
 8000e66:	d017      	beq.n	8000e98 <__udivmoddi4+0x290>
 8000e68:	b15d      	cbz	r5, 8000e82 <__udivmoddi4+0x27a>
 8000e6a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e6e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e72:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e76:	40f2      	lsrs	r2, r6
 8000e78:	ea4c 0202 	orr.w	r2, ip, r2
 8000e7c:	40f7      	lsrs	r7, r6
 8000e7e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e82:	2600      	movs	r6, #0
 8000e84:	4631      	mov	r1, r6
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e70b      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e9      	b.n	8000c68 <__udivmoddi4+0x60>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6fd      	b.n	8000c94 <__udivmoddi4+0x8c>
 8000e98:	4543      	cmp	r3, r8
 8000e9a:	d2e5      	bcs.n	8000e68 <__udivmoddi4+0x260>
 8000e9c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ea0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7df      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e7d2      	b.n	8000e52 <__udivmoddi4+0x24a>
 8000eac:	4660      	mov	r0, ip
 8000eae:	e78d      	b.n	8000dcc <__udivmoddi4+0x1c4>
 8000eb0:	4681      	mov	r9, r0
 8000eb2:	e7b9      	b.n	8000e28 <__udivmoddi4+0x220>
 8000eb4:	4666      	mov	r6, ip
 8000eb6:	e775      	b.n	8000da4 <__udivmoddi4+0x19c>
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e74a      	b.n	8000d52 <__udivmoddi4+0x14a>
 8000ebc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec0:	4439      	add	r1, r7
 8000ec2:	e713      	b.n	8000cec <__udivmoddi4+0xe4>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	443c      	add	r4, r7
 8000ec8:	e724      	b.n	8000d14 <__udivmoddi4+0x10c>
 8000eca:	bf00      	nop

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	2120      	movs	r1, #32
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 fd4d 	bl	8001980 <SENSOR_IO_Read>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	f023 0304 	bic.w	r3, r3, #4
 8000ef0:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	f023 0303 	bic.w	r3, r3, #3
 8000f00:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f10:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8000f12:	88fb      	ldrh	r3, [r7, #6]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	7bfa      	ldrb	r2, [r7, #15]
 8000f18:	2120      	movs	r1, #32
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 fd16 	bl	800194c <SENSOR_IO_Write>
}
 8000f20:	bf00      	nop
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000f32:	2300      	movs	r3, #0
 8000f34:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8000f36:	f000 fcff 	bl	8001938 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	210f      	movs	r1, #15
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 fd1d 	bl	8001980 <SENSOR_IO_Read>
 8000f46:	4603      	mov	r3, r0
 8000f48:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8000f5e:	88fb      	ldrh	r3, [r7, #6]
 8000f60:	b2d8      	uxtb	r0, r3
 8000f62:	f107 020c 	add.w	r2, r7, #12
 8000f66:	2302      	movs	r3, #2
 8000f68:	21b0      	movs	r1, #176	; 0xb0
 8000f6a:	f000 fd27 	bl	80019bc <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8000f6e:	7b3b      	ldrb	r3, [r7, #12]
 8000f70:	085b      	lsrs	r3, r3, #1
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8000f76:	7b7b      	ldrb	r3, [r7, #13]
 8000f78:	085b      	lsrs	r3, r3, #1
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8000f7e:	88fb      	ldrh	r3, [r7, #6]
 8000f80:	b2d8      	uxtb	r0, r3
 8000f82:	f107 020c 	add.w	r2, r7, #12
 8000f86:	2302      	movs	r3, #2
 8000f88:	21b6      	movs	r1, #182	; 0xb6
 8000f8a:	f000 fd17 	bl	80019bc <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000f8e:	7b7b      	ldrb	r3, [r7, #13]
 8000f90:	021b      	lsls	r3, r3, #8
 8000f92:	b21a      	sxth	r2, r3
 8000f94:	7b3b      	ldrb	r3, [r7, #12]
 8000f96:	b21b      	sxth	r3, r3
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8000f9c:	88fb      	ldrh	r3, [r7, #6]
 8000f9e:	b2d8      	uxtb	r0, r3
 8000fa0:	f107 020c 	add.w	r2, r7, #12
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	21ba      	movs	r1, #186	; 0xba
 8000fa8:	f000 fd08 	bl	80019bc <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000fac:	7b7b      	ldrb	r3, [r7, #13]
 8000fae:	021b      	lsls	r3, r3, #8
 8000fb0:	b21a      	sxth	r2, r3
 8000fb2:	7b3b      	ldrb	r3, [r7, #12]
 8000fb4:	b21b      	sxth	r3, r3
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8000fba:	88fb      	ldrh	r3, [r7, #6]
 8000fbc:	b2d8      	uxtb	r0, r3
 8000fbe:	f107 020c 	add.w	r2, r7, #12
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	21a8      	movs	r1, #168	; 0xa8
 8000fc6:	f000 fcf9 	bl	80019bc <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000fca:	7b7b      	ldrb	r3, [r7, #13]
 8000fcc:	021b      	lsls	r3, r3, #8
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	7b3b      	ldrb	r3, [r7, #12]
 8000fd2:	b21b      	sxth	r3, r3
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8000fd8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000fdc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	ee07 3a90 	vmov	s15, r3
 8000fe6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fea:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000fee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	ee07 3a90 	vmov	s15, r3
 8000ff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ffc:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001000:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001004:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	ee07 3a90 	vmov	s15, r3
 800100e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001016:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800101a:	ee07 3a90 	vmov	s15, r3
 800101e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001022:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001026:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 800102a:	edd7 7a04 	vldr	s15, [r7, #16]
 800102e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001032:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001036:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800103a:	edd7 7a04 	vldr	s15, [r7, #16]
 800103e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001084 <HTS221_H_ReadHumidity+0x130>
 8001042:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104a:	dd01      	ble.n	8001050 <HTS221_H_ReadHumidity+0xfc>
 800104c:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <HTS221_H_ReadHumidity+0x134>)
 800104e:	e00a      	b.n	8001066 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8001050:	edd7 7a04 	vldr	s15, [r7, #16]
 8001054:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105c:	d502      	bpl.n	8001064 <HTS221_H_ReadHumidity+0x110>
 800105e:	f04f 0300 	mov.w	r3, #0
 8001062:	e000      	b.n	8001066 <HTS221_H_ReadHumidity+0x112>
 8001064:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8001066:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8001068:	edd7 7a04 	vldr	s15, [r7, #16]
 800106c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001070:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001074:	eef0 7a66 	vmov.f32	s15, s13
}
 8001078:	eeb0 0a67 	vmov.f32	s0, s15
 800107c:	3720      	adds	r7, #32
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	447a0000 	.word	0x447a0000
 8001088:	447a0000 	.word	0x447a0000

0800108c <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2120      	movs	r1, #32
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 fc6e 	bl	8001980 <SENSOR_IO_Read>
 80010a4:	4603      	mov	r3, r0
 80010a6:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	f023 0304 	bic.w	r3, r3, #4
 80010ae:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	f043 0304 	orr.w	r3, r3, #4
 80010b6:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	f023 0303 	bic.w	r3, r3, #3
 80010be:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010ce:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80010d0:	88fb      	ldrh	r3, [r7, #6]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	7bfa      	ldrb	r2, [r7, #15]
 80010d6:	2120      	movs	r1, #32
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 fc37 	bl	800194c <SENSOR_IO_Write>
}
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b088      	sub	sp, #32
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80010f0:	88fb      	ldrh	r3, [r7, #6]
 80010f2:	b2d8      	uxtb	r0, r3
 80010f4:	f107 0208 	add.w	r2, r7, #8
 80010f8:	2302      	movs	r3, #2
 80010fa:	21b2      	movs	r1, #178	; 0xb2
 80010fc:	f000 fc5e 	bl	80019bc <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001100:	88fb      	ldrh	r3, [r7, #6]
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2135      	movs	r1, #53	; 0x35
 8001106:	4618      	mov	r0, r3
 8001108:	f000 fc3a 	bl	8001980 <SENSOR_IO_Read>
 800110c:	4603      	mov	r3, r0
 800110e:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001110:	7ffb      	ldrb	r3, [r7, #31]
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	b21b      	sxth	r3, r3
 8001116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800111a:	b21a      	sxth	r2, r3
 800111c:	7a3b      	ldrb	r3, [r7, #8]
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001124:	7ffb      	ldrb	r3, [r7, #31]
 8001126:	019b      	lsls	r3, r3, #6
 8001128:	b21b      	sxth	r3, r3
 800112a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800112e:	b21a      	sxth	r2, r3
 8001130:	7a7b      	ldrb	r3, [r7, #9]
 8001132:	b21b      	sxth	r3, r3
 8001134:	4313      	orrs	r3, r2
 8001136:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001138:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800113c:	10db      	asrs	r3, r3, #3
 800113e:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8001140:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001144:	10db      	asrs	r3, r3, #3
 8001146:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001148:	88fb      	ldrh	r3, [r7, #6]
 800114a:	b2d8      	uxtb	r0, r3
 800114c:	f107 0208 	add.w	r2, r7, #8
 8001150:	2304      	movs	r3, #4
 8001152:	21bc      	movs	r1, #188	; 0xbc
 8001154:	f000 fc32 	bl	80019bc <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001158:	7a7b      	ldrb	r3, [r7, #9]
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	b21a      	sxth	r2, r3
 800115e:	7a3b      	ldrb	r3, [r7, #8]
 8001160:	b21b      	sxth	r3, r3
 8001162:	4313      	orrs	r3, r2
 8001164:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001166:	7afb      	ldrb	r3, [r7, #11]
 8001168:	021b      	lsls	r3, r3, #8
 800116a:	b21a      	sxth	r2, r3
 800116c:	7abb      	ldrb	r3, [r7, #10]
 800116e:	b21b      	sxth	r3, r3
 8001170:	4313      	orrs	r3, r2
 8001172:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	b2d8      	uxtb	r0, r3
 8001178:	f107 0208 	add.w	r2, r7, #8
 800117c:	2302      	movs	r3, #2
 800117e:	21aa      	movs	r1, #170	; 0xaa
 8001180:	f000 fc1c 	bl	80019bc <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001184:	7a7b      	ldrb	r3, [r7, #9]
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	b21a      	sxth	r2, r3
 800118a:	7a3b      	ldrb	r3, [r7, #8]
 800118c:	b21b      	sxth	r3, r3
 800118e:	4313      	orrs	r3, r2
 8001190:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001192:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001196:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	ee07 3a90 	vmov	s15, r3
 80011a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80011a8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	ee07 3a90 	vmov	s15, r3
 80011b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80011ba:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80011be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	ee07 3a90 	vmov	s15, r3
 80011c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80011d0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80011d4:	ee07 3a90 	vmov	s15, r3
 80011d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e0:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	ee07 3a90 	vmov	s15, r3
}
 80011ea:	eeb0 0a67 	vmov.f32	s0, s15
 80011ee:	3720      	adds	r7, #32
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	4618      	mov	r0, r3
 8001202:	f000 f87b 	bl	80012fc <LPS22HB_Init>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 800120e:	b580      	push	{r7, lr}
 8001210:	b084      	sub	sp, #16
 8001212:	af00      	add	r7, sp, #0
 8001214:	4603      	mov	r3, r0
 8001216:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001218:	2300      	movs	r3, #0
 800121a:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 800121c:	f000 fb8c 	bl	8001938 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	210f      	movs	r1, #15
 8001226:	4618      	mov	r0, r3
 8001228:	f000 fbaa 	bl	8001980 <SENSOR_IO_Read>
 800122c:	4603      	mov	r3, r0
 800122e:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8001230:	7bfb      	ldrb	r3, [r7, #15]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b087      	sub	sp, #28
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 800124a:	2300      	movs	r3, #0
 800124c:	74fb      	strb	r3, [r7, #19]
 800124e:	e013      	b.n	8001278 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8001250:	88fb      	ldrh	r3, [r7, #6]
 8001252:	b2da      	uxtb	r2, r3
 8001254:	7cfb      	ldrb	r3, [r7, #19]
 8001256:	3328      	adds	r3, #40	; 0x28
 8001258:	b2db      	uxtb	r3, r3
 800125a:	7cfc      	ldrb	r4, [r7, #19]
 800125c:	4619      	mov	r1, r3
 800125e:	4610      	mov	r0, r2
 8001260:	f000 fb8e 	bl	8001980 <SENSOR_IO_Read>
 8001264:	4603      	mov	r3, r0
 8001266:	461a      	mov	r2, r3
 8001268:	f107 0318 	add.w	r3, r7, #24
 800126c:	4423      	add	r3, r4
 800126e:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8001272:	7cfb      	ldrb	r3, [r7, #19]
 8001274:	3301      	adds	r3, #1
 8001276:	74fb      	strb	r3, [r7, #19]
 8001278:	7cfb      	ldrb	r3, [r7, #19]
 800127a:	2b02      	cmp	r3, #2
 800127c:	d9e8      	bls.n	8001250 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 800127e:	2300      	movs	r3, #0
 8001280:	74fb      	strb	r3, [r7, #19]
 8001282:	e010      	b.n	80012a6 <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8001284:	7cfb      	ldrb	r3, [r7, #19]
 8001286:	f107 0218 	add.w	r2, r7, #24
 800128a:	4413      	add	r3, r2
 800128c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001290:	461a      	mov	r2, r3
 8001292:	7cfb      	ldrb	r3, [r7, #19]
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	4313      	orrs	r3, r2
 800129e:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 80012a0:	7cfb      	ldrb	r3, [r7, #19]
 80012a2:	3301      	adds	r3, #1
 80012a4:	74fb      	strb	r3, [r7, #19]
 80012a6:	7cfb      	ldrb	r3, [r7, #19]
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d9eb      	bls.n	8001284 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80012bc:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2264      	movs	r2, #100	; 0x64
 80012c6:	fb02 f303 	mul.w	r3, r2, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	da01      	bge.n	80012d2 <LPS22HB_P_ReadPressure+0x96>
 80012ce:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80012d2:	131b      	asrs	r3, r3, #12
 80012d4:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	ee07 3a90 	vmov	s15, r3
 80012dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80012f8 <LPS22HB_P_ReadPressure+0xbc>
 80012e4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012e8:	eef0 7a66 	vmov.f32	s15, s13
}
 80012ec:	eeb0 0a67 	vmov.f32	s0, s15
 80012f0:	371c      	adds	r7, #28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd90      	pop	{r4, r7, pc}
 80012f6:	bf00      	nop
 80012f8:	42c80000 	.word	0x42c80000

080012fc <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8001306:	88fb      	ldrh	r3, [r7, #6]
 8001308:	b2db      	uxtb	r3, r3
 800130a:	211a      	movs	r1, #26
 800130c:	4618      	mov	r0, r3
 800130e:	f000 fb37 	bl	8001980 <SENSOR_IO_Read>
 8001312:	4603      	mov	r3, r0
 8001314:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	f023 0301 	bic.w	r3, r3, #1
 800131c:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	7bfa      	ldrb	r2, [r7, #15]
 800132c:	211a      	movs	r1, #26
 800132e:	4618      	mov	r0, r3
 8001330:	f000 fb0c 	bl	800194c <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8001334:	88fb      	ldrh	r3, [r7, #6]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2110      	movs	r1, #16
 800133a:	4618      	mov	r0, r3
 800133c:	f000 fb20 	bl	8001980 <SENSOR_IO_Read>
 8001340:	4603      	mov	r3, r0
 8001342:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800134a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001352:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	f023 0302 	bic.w	r3, r3, #2
 800135a:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 800135c:	7bfb      	ldrb	r3, [r7, #15]
 800135e:	f043 0302 	orr.w	r3, r3, #2
 8001362:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8001364:	88fb      	ldrh	r3, [r7, #6]
 8001366:	b2db      	uxtb	r3, r3
 8001368:	7bfa      	ldrb	r2, [r7, #15]
 800136a:	2110      	movs	r1, #16
 800136c:	4618      	mov	r0, r3
 800136e:	f000 faed 	bl	800194c <SENSOR_IO_Write>
}  
 8001372:	bf00      	nop
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001382:	f000 fe3c 	bl	8001ffe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001386:	f000 f879 	bl	800147c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800138a:	f000 f97b 	bl	8001684 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800138e:	f000 f92d 	bl	80015ec <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001392:	f000 f8eb 	bl	800156c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
	BSP_HSENSOR_Init();
 8001396:	f000 fb2f 	bl	80019f8 <BSP_HSENSOR_Init>
	BSP_PSENSOR_Init();
 800139a:	f000 fb5b 	bl	8001a54 <BSP_PSENSOR_Init>
	BSP_TSENSOR_Init();
 800139e:	f000 fb87 	bl	8001ab0 <BSP_TSENSOR_Init>

		int humidity_val, pressure_val, temp_val = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
		//		else
		//		{
		//			button_pressed = 0;
		//		}

		if (wave_mode == 0){
 80013a6:	4b2e      	ldr	r3, [pc, #184]	; (8001460 <main+0xe4>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d11a      	bne.n	80013e4 <main+0x68>
			humidity_val = (int)BSP_HSENSOR_ReadHumidity();
 80013ae:	f000 fb43 	bl	8001a38 <BSP_HSENSOR_ReadHumidity>
 80013b2:	eef0 7a40 	vmov.f32	s15, s0
 80013b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ba:	ee17 3a90 	vmov	r3, s15
 80013be:	607b      	str	r3, [r7, #4]
			length = sprintf(buffer, "Humidity: %d\r\n", humidity_val);
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	4928      	ldr	r1, [pc, #160]	; (8001464 <main+0xe8>)
 80013c4:	4828      	ldr	r0, [pc, #160]	; (8001468 <main+0xec>)
 80013c6:	f005 f9f5 	bl	80067b4 <siprintf>
 80013ca:	4603      	mov	r3, r0
 80013cc:	4a27      	ldr	r2, [pc, #156]	; (800146c <main+0xf0>)
 80013ce:	6013      	str	r3, [r2, #0]
			//			//printf("%s, %d", buffer, length);
			HAL_UART_Transmit(&huart1, (uint8_t*)buffer, length, HAL_MAX_DELAY);
 80013d0:	4b26      	ldr	r3, [pc, #152]	; (800146c <main+0xf0>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013da:	4923      	ldr	r1, [pc, #140]	; (8001468 <main+0xec>)
 80013dc:	4824      	ldr	r0, [pc, #144]	; (8001470 <main+0xf4>)
 80013de:	f003 ff6d 	bl	80052bc <HAL_UART_Transmit>
 80013e2:	e7e0      	b.n	80013a6 <main+0x2a>

		}
		else if (wave_mode == 1) {
 80013e4:	4b1e      	ldr	r3, [pc, #120]	; (8001460 <main+0xe4>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d11a      	bne.n	8001422 <main+0xa6>
			temp_val = BSP_TSENSOR_ReadTemp();
 80013ec:	f000 fb7c 	bl	8001ae8 <BSP_TSENSOR_ReadTemp>
 80013f0:	eef0 7a40 	vmov.f32	s15, s0
 80013f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013f8:	ee17 3a90 	vmov	r3, s15
 80013fc:	60fb      	str	r3, [r7, #12]
			length = sprintf(buffer, "Temperature: %d\r\n", temp_val);
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	491c      	ldr	r1, [pc, #112]	; (8001474 <main+0xf8>)
 8001402:	4819      	ldr	r0, [pc, #100]	; (8001468 <main+0xec>)
 8001404:	f005 f9d6 	bl	80067b4 <siprintf>
 8001408:	4603      	mov	r3, r0
 800140a:	4a18      	ldr	r2, [pc, #96]	; (800146c <main+0xf0>)
 800140c:	6013      	str	r3, [r2, #0]
			//printf("%s, %d", buffer, length);
			HAL_UART_Transmit(&huart1, (uint8_t*)buffer, length, HAL_MAX_DELAY);
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <main+0xf0>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	b29a      	uxth	r2, r3
 8001414:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001418:	4913      	ldr	r1, [pc, #76]	; (8001468 <main+0xec>)
 800141a:	4815      	ldr	r0, [pc, #84]	; (8001470 <main+0xf4>)
 800141c:	f003 ff4e 	bl	80052bc <HAL_UART_Transmit>
 8001420:	e7c1      	b.n	80013a6 <main+0x2a>
			//			length = sprintf(buffer, "Gyro acceleration: %.2f\r\n", gyro_val);
			//			//printf("%s, %d", buffer, length);
			//			HAL_UART_Transmit(&huart1, (uint8_t*)buffer, length, HAL_MAX_DELAY);

		}
		else if (wave_mode == 2) {
 8001422:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <main+0xe4>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b02      	cmp	r3, #2
 8001428:	d1bd      	bne.n	80013a6 <main+0x2a>

			pressure_val = BSP_PSENSOR_ReadPressure();
 800142a:	f000 fb33 	bl	8001a94 <BSP_PSENSOR_ReadPressure>
 800142e:	eef0 7a40 	vmov.f32	s15, s0
 8001432:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001436:	ee17 3a90 	vmov	r3, s15
 800143a:	60bb      	str	r3, [r7, #8]
			length = sprintf(buffer, "Pressure: %d\r\n", pressure_val);
 800143c:	68ba      	ldr	r2, [r7, #8]
 800143e:	490e      	ldr	r1, [pc, #56]	; (8001478 <main+0xfc>)
 8001440:	4809      	ldr	r0, [pc, #36]	; (8001468 <main+0xec>)
 8001442:	f005 f9b7 	bl	80067b4 <siprintf>
 8001446:	4603      	mov	r3, r0
 8001448:	4a08      	ldr	r2, [pc, #32]	; (800146c <main+0xf0>)
 800144a:	6013      	str	r3, [r2, #0]
			//printf("%s, %d", buffer, length);
			HAL_UART_Transmit(&huart1, (uint8_t*)buffer, length, HAL_MAX_DELAY);
 800144c:	4b07      	ldr	r3, [pc, #28]	; (800146c <main+0xf0>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	b29a      	uxth	r2, r3
 8001452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001456:	4904      	ldr	r1, [pc, #16]	; (8001468 <main+0xec>)
 8001458:	4805      	ldr	r0, [pc, #20]	; (8001470 <main+0xf4>)
 800145a:	f003 ff2f 	bl	80052bc <HAL_UART_Transmit>
		if (wave_mode == 0){
 800145e:	e7a2      	b.n	80013a6 <main+0x2a>
 8001460:	20000224 	.word	0x20000224
 8001464:	08008c08 	.word	0x08008c08
 8001468:	2000031c 	.word	0x2000031c
 800146c:	20000220 	.word	0x20000220
 8001470:	2000028c 	.word	0x2000028c
 8001474:	08008c18 	.word	0x08008c18
 8001478:	08008c2c 	.word	0x08008c2c

0800147c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b0bc      	sub	sp, #240	; 0xf0
 8001480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001482:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001486:	2244      	movs	r2, #68	; 0x44
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f004 fd20 	bl	8005ed0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001490:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	2294      	movs	r2, #148	; 0x94
 80014a4:	2100      	movs	r1, #0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f004 fd12 	bl	8005ed0 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80014ac:	2000      	movs	r0, #0
 80014ae:	f001 ff1d 	bl	80032ec <HAL_PWREx_ControlVoltageScaling>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <SystemClock_Config+0x40>
  {
    Error_Handler();
 80014b8:	f000 f948 	bl	800174c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80014bc:	2310      	movs	r3, #16
 80014be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014c2:	2301      	movs	r3, #1
 80014c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80014ce:	2360      	movs	r3, #96	; 0x60
 80014d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014d4:	2302      	movs	r3, #2
 80014d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80014da:	2301      	movs	r3, #1
 80014dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014e0:	2301      	movs	r3, #1
 80014e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 60;
 80014e6:	233c      	movs	r3, #60	; 0x3c
 80014e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014ec:	2302      	movs	r3, #2
 80014ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014f2:	2302      	movs	r3, #2
 80014f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014f8:	2302      	movs	r3, #2
 80014fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001502:	4618      	mov	r0, r3
 8001504:	f001 ff96 	bl	8003434 <HAL_RCC_OscConfig>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800150e:	f000 f91d 	bl	800174c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001512:	230f      	movs	r3, #15
 8001514:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001518:	2303      	movs	r3, #3
 800151a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800151e:	2300      	movs	r3, #0
 8001520:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001524:	2300      	movs	r3, #0
 8001526:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800152a:	2300      	movs	r3, #0
 800152c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001530:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001534:	2105      	movs	r1, #5
 8001536:	4618      	mov	r0, r3
 8001538:	f002 fba2 	bl	8003c80 <HAL_RCC_ClockConfig>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001542:	f000 f903 	bl	800174c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C2;
 8001546:	2381      	movs	r3, #129	; 0x81
 8001548:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800154a:	2300      	movs	r3, #0
 800154c:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800154e:	2300      	movs	r3, #0
 8001550:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	4618      	mov	r0, r3
 8001556:	f002 fe77 	bl	8004248 <HAL_RCCEx_PeriphCLKConfig>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001560:	f000 f8f4 	bl	800174c <Error_Handler>
  }
}
 8001564:	bf00      	nop
 8001566:	37f0      	adds	r7, #240	; 0xf0
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001570:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <MX_I2C2_Init+0x74>)
 8001572:	4a1c      	ldr	r2, [pc, #112]	; (80015e4 <MX_I2C2_Init+0x78>)
 8001574:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8001576:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <MX_I2C2_Init+0x74>)
 8001578:	4a1b      	ldr	r2, [pc, #108]	; (80015e8 <MX_I2C2_Init+0x7c>)
 800157a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800157c:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <MX_I2C2_Init+0x74>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001582:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <MX_I2C2_Init+0x74>)
 8001584:	2201      	movs	r2, #1
 8001586:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001588:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <MX_I2C2_Init+0x74>)
 800158a:	2200      	movs	r2, #0
 800158c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800158e:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <MX_I2C2_Init+0x74>)
 8001590:	2200      	movs	r2, #0
 8001592:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <MX_I2C2_Init+0x74>)
 8001596:	2200      	movs	r2, #0
 8001598:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800159a:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <MX_I2C2_Init+0x74>)
 800159c:	2200      	movs	r2, #0
 800159e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <MX_I2C2_Init+0x74>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015a6:	480e      	ldr	r0, [pc, #56]	; (80015e0 <MX_I2C2_Init+0x74>)
 80015a8:	f001 f8e0 	bl	800276c <HAL_I2C_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80015b2:	f000 f8cb 	bl	800174c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015b6:	2100      	movs	r1, #0
 80015b8:	4809      	ldr	r0, [pc, #36]	; (80015e0 <MX_I2C2_Init+0x74>)
 80015ba:	f001 fddf 	bl	800317c <HAL_I2CEx_ConfigAnalogFilter>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80015c4:	f000 f8c2 	bl	800174c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80015c8:	2100      	movs	r1, #0
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <MX_I2C2_Init+0x74>)
 80015cc:	f001 fe21 	bl	8003212 <HAL_I2CEx_ConfigDigitalFilter>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80015d6:	f000 f8b9 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000240 	.word	0x20000240
 80015e4:	40005800 	.word	0x40005800
 80015e8:	307075b1 	.word	0x307075b1

080015ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015f0:	4b22      	ldr	r3, [pc, #136]	; (800167c <MX_USART1_UART_Init+0x90>)
 80015f2:	4a23      	ldr	r2, [pc, #140]	; (8001680 <MX_USART1_UART_Init+0x94>)
 80015f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015f6:	4b21      	ldr	r3, [pc, #132]	; (800167c <MX_USART1_UART_Init+0x90>)
 80015f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015fe:	4b1f      	ldr	r3, [pc, #124]	; (800167c <MX_USART1_UART_Init+0x90>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001604:	4b1d      	ldr	r3, [pc, #116]	; (800167c <MX_USART1_UART_Init+0x90>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800160a:	4b1c      	ldr	r3, [pc, #112]	; (800167c <MX_USART1_UART_Init+0x90>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001610:	4b1a      	ldr	r3, [pc, #104]	; (800167c <MX_USART1_UART_Init+0x90>)
 8001612:	220c      	movs	r2, #12
 8001614:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001616:	4b19      	ldr	r3, [pc, #100]	; (800167c <MX_USART1_UART_Init+0x90>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800161c:	4b17      	ldr	r3, [pc, #92]	; (800167c <MX_USART1_UART_Init+0x90>)
 800161e:	2200      	movs	r2, #0
 8001620:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001622:	4b16      	ldr	r3, [pc, #88]	; (800167c <MX_USART1_UART_Init+0x90>)
 8001624:	2200      	movs	r2, #0
 8001626:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <MX_USART1_UART_Init+0x90>)
 800162a:	2200      	movs	r2, #0
 800162c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800162e:	4b13      	ldr	r3, [pc, #76]	; (800167c <MX_USART1_UART_Init+0x90>)
 8001630:	2200      	movs	r2, #0
 8001632:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001634:	4811      	ldr	r0, [pc, #68]	; (800167c <MX_USART1_UART_Init+0x90>)
 8001636:	f003 fdf1 	bl	800521c <HAL_UART_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001640:	f000 f884 	bl	800174c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001644:	2100      	movs	r1, #0
 8001646:	480d      	ldr	r0, [pc, #52]	; (800167c <MX_USART1_UART_Init+0x90>)
 8001648:	f004 fb40 	bl	8005ccc <HAL_UARTEx_SetTxFifoThreshold>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001652:	f000 f87b 	bl	800174c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001656:	2100      	movs	r1, #0
 8001658:	4808      	ldr	r0, [pc, #32]	; (800167c <MX_USART1_UART_Init+0x90>)
 800165a:	f004 fb75 	bl	8005d48 <HAL_UARTEx_SetRxFifoThreshold>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001664:	f000 f872 	bl	800174c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001668:	4804      	ldr	r0, [pc, #16]	; (800167c <MX_USART1_UART_Init+0x90>)
 800166a:	f004 faf6 	bl	8005c5a <HAL_UARTEx_DisableFifoMode>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001674:	f000 f86a 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	2000028c 	.word	0x2000028c
 8001680:	40013800 	.word	0x40013800

08001684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b088      	sub	sp, #32
 8001688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168a:	f107 030c 	add.w	r3, r7, #12
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]
 8001698:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800169a:	4b1f      	ldr	r3, [pc, #124]	; (8001718 <MX_GPIO_Init+0x94>)
 800169c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169e:	4a1e      	ldr	r2, [pc, #120]	; (8001718 <MX_GPIO_Init+0x94>)
 80016a0:	f043 0304 	orr.w	r3, r3, #4
 80016a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a6:	4b1c      	ldr	r3, [pc, #112]	; (8001718 <MX_GPIO_Init+0x94>)
 80016a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b2:	4b19      	ldr	r3, [pc, #100]	; (8001718 <MX_GPIO_Init+0x94>)
 80016b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b6:	4a18      	ldr	r2, [pc, #96]	; (8001718 <MX_GPIO_Init+0x94>)
 80016b8:	f043 0302 	orr.w	r3, r3, #2
 80016bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016be:	4b16      	ldr	r3, [pc, #88]	; (8001718 <MX_GPIO_Init+0x94>)
 80016c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80016ca:	2200      	movs	r2, #0
 80016cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016d0:	4812      	ldr	r0, [pc, #72]	; (800171c <MX_GPIO_Init+0x98>)
 80016d2:	f001 f833 	bl	800273c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016dc:	4b10      	ldr	r3, [pc, #64]	; (8001720 <MX_GPIO_Init+0x9c>)
 80016de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e4:	f107 030c 	add.w	r3, r7, #12
 80016e8:	4619      	mov	r1, r3
 80016ea:	480e      	ldr	r0, [pc, #56]	; (8001724 <MX_GPIO_Init+0xa0>)
 80016ec:	f000 fda2 	bl	8002234 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80016f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f6:	2301      	movs	r3, #1
 80016f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2300      	movs	r3, #0
 8001700:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001702:	f107 030c 	add.w	r3, r7, #12
 8001706:	4619      	mov	r1, r3
 8001708:	4804      	ldr	r0, [pc, #16]	; (800171c <MX_GPIO_Init+0x98>)
 800170a:	f000 fd93 	bl	8002234 <HAL_GPIO_Init>

}
 800170e:	bf00      	nop
 8001710:	3720      	adds	r7, #32
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40021000 	.word	0x40021000
 800171c:	48000400 	.word	0x48000400
 8001720:	10210000 	.word	0x10210000
 8001724:	48000800 	.word	0x48000800

08001728 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a04      	ldr	r2, [pc, #16]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d101      	bne.n	800173e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800173a:	f000 fc79 	bl	8002030 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40001000 	.word	0x40001000

0800174c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001750:	b672      	cpsid	i
}
 8001752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001754:	e7fe      	b.n	8001754 <Error_Handler+0x8>
	...

08001758 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	; 0x28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001760:	4b27      	ldr	r3, [pc, #156]	; (8001800 <I2Cx_MspInit+0xa8>)
 8001762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001764:	4a26      	ldr	r2, [pc, #152]	; (8001800 <I2Cx_MspInit+0xa8>)
 8001766:	f043 0302 	orr.w	r3, r3, #2
 800176a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800176c:	4b24      	ldr	r3, [pc, #144]	; (8001800 <I2Cx_MspInit+0xa8>)
 800176e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001778:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800177c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800177e:	2312      	movs	r3, #18
 8001780:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001782:	2301      	movs	r3, #1
 8001784:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001786:	2303      	movs	r3, #3
 8001788:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800178a:	2304      	movs	r3, #4
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800178e:	f107 0314 	add.w	r3, r7, #20
 8001792:	4619      	mov	r1, r3
 8001794:	481b      	ldr	r0, [pc, #108]	; (8001804 <I2Cx_MspInit+0xac>)
 8001796:	f000 fd4d 	bl	8002234 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	4619      	mov	r1, r3
 80017a0:	4818      	ldr	r0, [pc, #96]	; (8001804 <I2Cx_MspInit+0xac>)
 80017a2:	f000 fd47 	bl	8002234 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80017a6:	4b16      	ldr	r3, [pc, #88]	; (8001800 <I2Cx_MspInit+0xa8>)
 80017a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017aa:	4a15      	ldr	r2, [pc, #84]	; (8001800 <I2Cx_MspInit+0xa8>)
 80017ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017b0:	6593      	str	r3, [r2, #88]	; 0x58
 80017b2:	4b13      	ldr	r3, [pc, #76]	; (8001800 <I2Cx_MspInit+0xa8>)
 80017b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80017be:	4b10      	ldr	r3, [pc, #64]	; (8001800 <I2Cx_MspInit+0xa8>)
 80017c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c2:	4a0f      	ldr	r2, [pc, #60]	; (8001800 <I2Cx_MspInit+0xa8>)
 80017c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017c8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80017ca:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <I2Cx_MspInit+0xa8>)
 80017cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ce:	4a0c      	ldr	r2, [pc, #48]	; (8001800 <I2Cx_MspInit+0xa8>)
 80017d0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80017d4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	210f      	movs	r1, #15
 80017da:	2021      	movs	r0, #33	; 0x21
 80017dc:	f000 fd00 	bl	80021e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80017e0:	2021      	movs	r0, #33	; 0x21
 80017e2:	f000 fd19 	bl	8002218 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80017e6:	2200      	movs	r2, #0
 80017e8:	210f      	movs	r1, #15
 80017ea:	2022      	movs	r0, #34	; 0x22
 80017ec:	f000 fcf8 	bl	80021e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80017f0:	2022      	movs	r0, #34	; 0x22
 80017f2:	f000 fd11 	bl	8002218 <HAL_NVIC_EnableIRQ>
}
 80017f6:	bf00      	nop
 80017f8:	3728      	adds	r7, #40	; 0x28
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40021000 	.word	0x40021000
 8001804:	48000400 	.word	0x48000400

08001808 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a12      	ldr	r2, [pc, #72]	; (800185c <I2Cx_Init+0x54>)
 8001814:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a11      	ldr	r2, [pc, #68]	; (8001860 <I2Cx_Init+0x58>)
 800181a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff ff89 	bl	8001758 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 ff90 	bl	800276c <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800184c:	2100      	movs	r1, #0
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f001 fc94 	bl	800317c <HAL_I2CEx_ConfigAnalogFilter>
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40005800 	.word	0x40005800
 8001860:	00702681 	.word	0x00702681

08001864 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	; 0x28
 8001868:	af04      	add	r7, sp, #16
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	4608      	mov	r0, r1
 800186e:	4611      	mov	r1, r2
 8001870:	461a      	mov	r2, r3
 8001872:	4603      	mov	r3, r0
 8001874:	72fb      	strb	r3, [r7, #11]
 8001876:	460b      	mov	r3, r1
 8001878:	813b      	strh	r3, [r7, #8]
 800187a:	4613      	mov	r3, r2
 800187c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800187e:	2300      	movs	r3, #0
 8001880:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001882:	7afb      	ldrb	r3, [r7, #11]
 8001884:	b299      	uxth	r1, r3
 8001886:	88f8      	ldrh	r0, [r7, #6]
 8001888:	893a      	ldrh	r2, [r7, #8]
 800188a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188e:	9302      	str	r3, [sp, #8]
 8001890:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001892:	9301      	str	r3, [sp, #4]
 8001894:	6a3b      	ldr	r3, [r7, #32]
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	4603      	mov	r3, r0
 800189a:	68f8      	ldr	r0, [r7, #12]
 800189c:	f001 f938 	bl	8002b10 <HAL_I2C_Mem_Read>
 80018a0:	4603      	mov	r3, r0
 80018a2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80018a4:	7dfb      	ldrb	r3, [r7, #23]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d004      	beq.n	80018b4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 80018aa:	7afb      	ldrb	r3, [r7, #11]
 80018ac:	4619      	mov	r1, r3
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f000 f832 	bl	8001918 <I2Cx_Error>
  }
  return status;
 80018b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b08a      	sub	sp, #40	; 0x28
 80018c2:	af04      	add	r7, sp, #16
 80018c4:	60f8      	str	r0, [r7, #12]
 80018c6:	4608      	mov	r0, r1
 80018c8:	4611      	mov	r1, r2
 80018ca:	461a      	mov	r2, r3
 80018cc:	4603      	mov	r3, r0
 80018ce:	72fb      	strb	r3, [r7, #11]
 80018d0:	460b      	mov	r3, r1
 80018d2:	813b      	strh	r3, [r7, #8]
 80018d4:	4613      	mov	r3, r2
 80018d6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80018d8:	2300      	movs	r3, #0
 80018da:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80018dc:	7afb      	ldrb	r3, [r7, #11]
 80018de:	b299      	uxth	r1, r3
 80018e0:	88f8      	ldrh	r0, [r7, #6]
 80018e2:	893a      	ldrh	r2, [r7, #8]
 80018e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e8:	9302      	str	r3, [sp, #8]
 80018ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018ec:	9301      	str	r3, [sp, #4]
 80018ee:	6a3b      	ldr	r3, [r7, #32]
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	4603      	mov	r3, r0
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f000 fff7 	bl	80028e8 <HAL_I2C_Mem_Write>
 80018fa:	4603      	mov	r3, r0
 80018fc:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80018fe:	7dfb      	ldrb	r3, [r7, #23]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d004      	beq.n	800190e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001904:	7afb      	ldrb	r3, [r7, #11]
 8001906:	4619      	mov	r1, r3
 8001908:	68f8      	ldr	r0, [r7, #12]
 800190a:	f000 f805 	bl	8001918 <I2Cx_Error>
  }
  return status;
 800190e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f000 ffb0 	bl	800288a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff ff6c 	bl	8001808 <I2Cx_Init>
}
 8001930:	bf00      	nop
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800193c:	4802      	ldr	r0, [pc, #8]	; (8001948 <SENSOR_IO_Init+0x10>)
 800193e:	f7ff ff63 	bl	8001808 <I2Cx_Init>
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200003e0 	.word	0x200003e0

0800194c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af02      	add	r7, sp, #8
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
 8001956:	460b      	mov	r3, r1
 8001958:	71bb      	strb	r3, [r7, #6]
 800195a:	4613      	mov	r3, r2
 800195c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800195e:	79bb      	ldrb	r3, [r7, #6]
 8001960:	b29a      	uxth	r2, r3
 8001962:	79f9      	ldrb	r1, [r7, #7]
 8001964:	2301      	movs	r3, #1
 8001966:	9301      	str	r3, [sp, #4]
 8001968:	1d7b      	adds	r3, r7, #5
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	2301      	movs	r3, #1
 800196e:	4803      	ldr	r0, [pc, #12]	; (800197c <SENSOR_IO_Write+0x30>)
 8001970:	f7ff ffa5 	bl	80018be <I2Cx_WriteMultiple>
}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	200003e0 	.word	0x200003e0

08001980 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af02      	add	r7, sp, #8
 8001986:	4603      	mov	r3, r0
 8001988:	460a      	mov	r2, r1
 800198a:	71fb      	strb	r3, [r7, #7]
 800198c:	4613      	mov	r3, r2
 800198e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001994:	79bb      	ldrb	r3, [r7, #6]
 8001996:	b29a      	uxth	r2, r3
 8001998:	79f9      	ldrb	r1, [r7, #7]
 800199a:	2301      	movs	r3, #1
 800199c:	9301      	str	r3, [sp, #4]
 800199e:	f107 030f 	add.w	r3, r7, #15
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	2301      	movs	r3, #1
 80019a6:	4804      	ldr	r0, [pc, #16]	; (80019b8 <SENSOR_IO_Read+0x38>)
 80019a8:	f7ff ff5c 	bl	8001864 <I2Cx_ReadMultiple>

  return read_value;
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200003e0 	.word	0x200003e0

080019bc <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af02      	add	r7, sp, #8
 80019c2:	603a      	str	r2, [r7, #0]
 80019c4:	461a      	mov	r2, r3
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
 80019ca:	460b      	mov	r3, r1
 80019cc:	71bb      	strb	r3, [r7, #6]
 80019ce:	4613      	mov	r3, r2
 80019d0:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80019d2:	79bb      	ldrb	r3, [r7, #6]
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	79f9      	ldrb	r1, [r7, #7]
 80019d8:	88bb      	ldrh	r3, [r7, #4]
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	2301      	movs	r3, #1
 80019e2:	4804      	ldr	r0, [pc, #16]	; (80019f4 <SENSOR_IO_ReadMultiple+0x38>)
 80019e4:	f7ff ff3e 	bl	8001864 <I2Cx_ReadMultiple>
 80019e8:	4603      	mov	r3, r0
 80019ea:	b29b      	uxth	r3, r3
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	200003e0 	.word	0x200003e0

080019f8 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80019fe:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <BSP_HSENSOR_Init+0x38>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	20be      	movs	r0, #190	; 0xbe
 8001a04:	4798      	blx	r3
 8001a06:	4603      	mov	r3, r0
 8001a08:	2bbc      	cmp	r3, #188	; 0xbc
 8001a0a:	d002      	beq.n	8001a12 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	607b      	str	r3, [r7, #4]
 8001a10:	e009      	b.n	8001a26 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8001a12:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <BSP_HSENSOR_Init+0x3c>)
 8001a14:	4a06      	ldr	r2, [pc, #24]	; (8001a30 <BSP_HSENSOR_Init+0x38>)
 8001a16:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <BSP_HSENSOR_Init+0x3c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	20be      	movs	r0, #190	; 0xbe
 8001a20:	4798      	blx	r3
    ret = HSENSOR_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001a26:	687b      	ldr	r3, [r7, #4]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000000 	.word	0x20000000
 8001a34:	20000228 	.word	0x20000228

08001a38 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8001a3c:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <BSP_HSENSOR_ReadHumidity+0x18>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	20be      	movs	r0, #190	; 0xbe
 8001a44:	4798      	blx	r3
 8001a46:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000228 	.word	0x20000228

08001a54 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <BSP_PSENSOR_Init+0x38>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	20ba      	movs	r0, #186	; 0xba
 8001a60:	4798      	blx	r3
 8001a62:	4603      	mov	r3, r0
 8001a64:	2bb1      	cmp	r3, #177	; 0xb1
 8001a66:	d002      	beq.n	8001a6e <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	e009      	b.n	8001a82 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8001a6e:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <BSP_PSENSOR_Init+0x3c>)
 8001a70:	4a06      	ldr	r2, [pc, #24]	; (8001a8c <BSP_PSENSOR_Init+0x38>)
 8001a72:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <BSP_PSENSOR_Init+0x3c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	20ba      	movs	r0, #186	; 0xba
 8001a7c:	4798      	blx	r3
    ret = PSENSOR_OK;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001a82:	687b      	ldr	r3, [r7, #4]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	2000001c 	.word	0x2000001c
 8001a90:	2000022c 	.word	0x2000022c

08001a94 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8001a98:	4b04      	ldr	r3, [pc, #16]	; (8001aac <BSP_PSENSOR_ReadPressure+0x18>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	20ba      	movs	r0, #186	; 0xba
 8001aa0:	4798      	blx	r3
 8001aa2:	eef0 7a40 	vmov.f32	s15, s0
}
 8001aa6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	2000022c 	.word	0x2000022c

08001ab0 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <BSP_TSENSOR_Init+0x30>)
 8001abc:	4a09      	ldr	r2, [pc, #36]	; (8001ae4 <BSP_TSENSOR_Init+0x34>)
 8001abe:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8001ac0:	f7ff ff3a 	bl	8001938 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <BSP_TSENSOR_Init+0x30>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2100      	movs	r1, #0
 8001acc:	20be      	movs	r0, #190	; 0xbe
 8001ace:	4798      	blx	r3

  ret = TSENSOR_OK;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000230 	.word	0x20000230
 8001ae4:	2000000c 	.word	0x2000000c

08001ae8 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001aec:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <BSP_TSENSOR_ReadTemp+0x18>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	20be      	movs	r0, #190	; 0xbe
 8001af4:	4798      	blx	r3
 8001af6:	eef0 7a40 	vmov.f32	s15, s0
}
 8001afa:	eeb0 0a67 	vmov.f32	s0, s15
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000230 	.word	0x20000230

08001b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <HAL_MspInit+0x44>)
 8001b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b0e:	4a0e      	ldr	r2, [pc, #56]	; (8001b48 <HAL_MspInit+0x44>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6613      	str	r3, [r2, #96]	; 0x60
 8001b16:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <HAL_MspInit+0x44>)
 8001b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <HAL_MspInit+0x44>)
 8001b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b26:	4a08      	ldr	r2, [pc, #32]	; (8001b48 <HAL_MspInit+0x44>)
 8001b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_MspInit+0x44>)
 8001b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	40021000 	.word	0x40021000

08001b4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	; 0x28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a17      	ldr	r2, [pc, #92]	; (8001bc8 <HAL_I2C_MspInit+0x7c>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d128      	bne.n	8001bc0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6e:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <HAL_I2C_MspInit+0x80>)
 8001b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b72:	4a16      	ldr	r2, [pc, #88]	; (8001bcc <HAL_I2C_MspInit+0x80>)
 8001b74:	f043 0302 	orr.w	r3, r3, #2
 8001b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7a:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <HAL_I2C_MspInit+0x80>)
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b86:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b8c:	2312      	movs	r3, #18
 8001b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b90:	2301      	movs	r3, #1
 8001b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b94:	2303      	movs	r3, #3
 8001b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b98:	2304      	movs	r3, #4
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	480b      	ldr	r0, [pc, #44]	; (8001bd0 <HAL_I2C_MspInit+0x84>)
 8001ba4:	f000 fb46 	bl	8002234 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <HAL_I2C_MspInit+0x80>)
 8001baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bac:	4a07      	ldr	r2, [pc, #28]	; (8001bcc <HAL_I2C_MspInit+0x80>)
 8001bae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bb2:	6593      	str	r3, [r2, #88]	; 0x58
 8001bb4:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <HAL_I2C_MspInit+0x80>)
 8001bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001bc0:	bf00      	nop
 8001bc2:	3728      	adds	r7, #40	; 0x28
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40005800 	.word	0x40005800
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	48000400 	.word	0x48000400

08001bd4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0b      	ldr	r2, [pc, #44]	; (8001c10 <HAL_I2C_MspDeInit+0x3c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d10f      	bne.n	8001c06 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_I2C_MspDeInit+0x40>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <HAL_I2C_MspDeInit+0x40>)
 8001bec:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001bf0:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8001bf2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bf6:	4808      	ldr	r0, [pc, #32]	; (8001c18 <HAL_I2C_MspDeInit+0x44>)
 8001bf8:	f000 fcae 	bl	8002558 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8001bfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c00:	4805      	ldr	r0, [pc, #20]	; (8001c18 <HAL_I2C_MspDeInit+0x44>)
 8001c02:	f000 fca9 	bl	8002558 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40005800 	.word	0x40005800
 8001c14:	40021000 	.word	0x40021000
 8001c18:	48000400 	.word	0x48000400

08001c1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08a      	sub	sp, #40	; 0x28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a17      	ldr	r2, [pc, #92]	; (8001c98 <HAL_UART_MspInit+0x7c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d127      	bne.n	8001c8e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c3e:	4b17      	ldr	r3, [pc, #92]	; (8001c9c <HAL_UART_MspInit+0x80>)
 8001c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c42:	4a16      	ldr	r2, [pc, #88]	; (8001c9c <HAL_UART_MspInit+0x80>)
 8001c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c48:	6613      	str	r3, [r2, #96]	; 0x60
 8001c4a:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <HAL_UART_MspInit+0x80>)
 8001c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c56:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <HAL_UART_MspInit+0x80>)
 8001c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5a:	4a10      	ldr	r2, [pc, #64]	; (8001c9c <HAL_UART_MspInit+0x80>)
 8001c5c:	f043 0302 	orr.w	r3, r3, #2
 8001c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c62:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <HAL_UART_MspInit+0x80>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c6e:	23c0      	movs	r3, #192	; 0xc0
 8001c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c72:	2302      	movs	r3, #2
 8001c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c7e:	2307      	movs	r3, #7
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c82:	f107 0314 	add.w	r3, r7, #20
 8001c86:	4619      	mov	r1, r3
 8001c88:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <HAL_UART_MspInit+0x84>)
 8001c8a:	f000 fad3 	bl	8002234 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c8e:	bf00      	nop
 8001c90:	3728      	adds	r7, #40	; 0x28
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40013800 	.word	0x40013800
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	48000400 	.word	0x48000400

08001ca4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08c      	sub	sp, #48	; 0x30
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	2036      	movs	r0, #54	; 0x36
 8001cba:	f000 fa91 	bl	80021e0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cbe:	2036      	movs	r0, #54	; 0x36
 8001cc0:	f000 faaa 	bl	8002218 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001cc4:	4b1e      	ldr	r3, [pc, #120]	; (8001d40 <HAL_InitTick+0x9c>)
 8001cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc8:	4a1d      	ldr	r2, [pc, #116]	; (8001d40 <HAL_InitTick+0x9c>)
 8001cca:	f043 0310 	orr.w	r3, r3, #16
 8001cce:	6593      	str	r3, [r2, #88]	; 0x58
 8001cd0:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <HAL_InitTick+0x9c>)
 8001cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd4:	f003 0310 	and.w	r3, r3, #16
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cdc:	f107 0210 	add.w	r2, r7, #16
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	4611      	mov	r1, r2
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f002 f9ba 	bl	8004060 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001cec:	f002 f98c 	bl	8004008 <HAL_RCC_GetPCLK1Freq>
 8001cf0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf4:	4a13      	ldr	r2, [pc, #76]	; (8001d44 <HAL_InitTick+0xa0>)
 8001cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfa:	0c9b      	lsrs	r3, r3, #18
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d00:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <HAL_InitTick+0xa4>)
 8001d02:	4a12      	ldr	r2, [pc, #72]	; (8001d4c <HAL_InitTick+0xa8>)
 8001d04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d06:	4b10      	ldr	r3, [pc, #64]	; (8001d48 <HAL_InitTick+0xa4>)
 8001d08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d0c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d0e:	4a0e      	ldr	r2, [pc, #56]	; (8001d48 <HAL_InitTick+0xa4>)
 8001d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d12:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <HAL_InitTick+0xa4>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d1a:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <HAL_InitTick+0xa4>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001d20:	4809      	ldr	r0, [pc, #36]	; (8001d48 <HAL_InitTick+0xa4>)
 8001d22:	f002 ffa9 	bl	8004c78 <HAL_TIM_Base_Init>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d104      	bne.n	8001d36 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001d2c:	4806      	ldr	r0, [pc, #24]	; (8001d48 <HAL_InitTick+0xa4>)
 8001d2e:	f003 f805 	bl	8004d3c <HAL_TIM_Base_Start_IT>
 8001d32:	4603      	mov	r3, r0
 8001d34:	e000      	b.n	8001d38 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3730      	adds	r7, #48	; 0x30
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40021000 	.word	0x40021000
 8001d44:	431bde83 	.word	0x431bde83
 8001d48:	2000042c 	.word	0x2000042c
 8001d4c:	40001000 	.word	0x40001000

08001d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d54:	e7fe      	b.n	8001d54 <NMI_Handler+0x4>

08001d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d5a:	e7fe      	b.n	8001d5a <HardFault_Handler+0x4>

08001d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d60:	e7fe      	b.n	8001d60 <MemManage_Handler+0x4>

08001d62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d66:	e7fe      	b.n	8001d66 <BusFault_Handler+0x4>

08001d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d6c:	e7fe      	b.n	8001d6c <UsageFault_Handler+0x4>

08001d6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
	...

08001da8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001dac:	4802      	ldr	r0, [pc, #8]	; (8001db8 <TIM6_DAC_IRQHandler+0x10>)
 8001dae:	f003 f835 	bl	8004e1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	2000042c 	.word	0x2000042c

08001dbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
	return 1;
 8001dc0:	2301      	movs	r3, #1
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <_kill>:

int _kill(int pid, int sig)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001dd6:	f004 f843 	bl	8005e60 <__errno>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2216      	movs	r2, #22
 8001dde:	601a      	str	r2, [r3, #0]
	return -1;
 8001de0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <_exit>:

void _exit (int status)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001df4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff ffe7 	bl	8001dcc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001dfe:	e7fe      	b.n	8001dfe <_exit+0x12>

08001e00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	e00a      	b.n	8001e28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e12:	f3af 8000 	nop.w
 8001e16:	4601      	mov	r1, r0
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	1c5a      	adds	r2, r3, #1
 8001e1c:	60ba      	str	r2, [r7, #8]
 8001e1e:	b2ca      	uxtb	r2, r1
 8001e20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	3301      	adds	r3, #1
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	dbf0      	blt.n	8001e12 <_read+0x12>
	}

return len;
 8001e30:	687b      	ldr	r3, [r7, #4]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b086      	sub	sp, #24
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	e009      	b.n	8001e60 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	60ba      	str	r2, [r7, #8]
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	dbf1      	blt.n	8001e4c <_write+0x12>
	}
	return len;
 8001e68:	687b      	ldr	r3, [r7, #4]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <_close>:

int _close(int file)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
	return -1;
 8001e7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
 8001e92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e9a:	605a      	str	r2, [r3, #4]
	return 0;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <_isatty>:

int _isatty(int file)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
	return 1;
 8001eb2:	2301      	movs	r3, #1
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
	return 0;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
	...

08001edc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ee4:	4a14      	ldr	r2, [pc, #80]	; (8001f38 <_sbrk+0x5c>)
 8001ee6:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <_sbrk+0x60>)
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ef0:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <_sbrk+0x64>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d102      	bne.n	8001efe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ef8:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <_sbrk+0x64>)
 8001efa:	4a12      	ldr	r2, [pc, #72]	; (8001f44 <_sbrk+0x68>)
 8001efc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001efe:	4b10      	ldr	r3, [pc, #64]	; (8001f40 <_sbrk+0x64>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d207      	bcs.n	8001f1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f0c:	f003 ffa8 	bl	8005e60 <__errno>
 8001f10:	4603      	mov	r3, r0
 8001f12:	220c      	movs	r2, #12
 8001f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f1a:	e009      	b.n	8001f30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f1c:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <_sbrk+0x64>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f22:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <_sbrk+0x64>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	4a05      	ldr	r2, [pc, #20]	; (8001f40 <_sbrk+0x64>)
 8001f2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	200a0000 	.word	0x200a0000
 8001f3c:	00000400 	.word	0x00000400
 8001f40:	20000234 	.word	0x20000234
 8001f44:	20000490 	.word	0x20000490

08001f48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f4c:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <SystemInit+0x5c>)
 8001f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f52:	4a14      	ldr	r2, [pc, #80]	; (8001fa4 <SystemInit+0x5c>)
 8001f54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001f5c:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <SystemInit+0x60>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a11      	ldr	r2, [pc, #68]	; (8001fa8 <SystemInit+0x60>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001f68:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <SystemInit+0x60>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001f6e:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <SystemInit+0x60>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a0d      	ldr	r2, [pc, #52]	; (8001fa8 <SystemInit+0x60>)
 8001f74:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001f78:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001f7c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001f7e:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <SystemInit+0x60>)
 8001f80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f84:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f86:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <SystemInit+0x60>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a07      	ldr	r2, [pc, #28]	; (8001fa8 <SystemInit+0x60>)
 8001f8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f90:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001f92:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <SystemInit+0x60>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	619a      	str	r2, [r3, #24]
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000ed00 	.word	0xe000ed00
 8001fa8:	40021000 	.word	0x40021000

08001fac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fe4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fb0:	f7ff ffca 	bl	8001f48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001fb4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001fb6:	e003      	b.n	8001fc0 <LoopCopyDataInit>

08001fb8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001fba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001fbc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001fbe:	3104      	adds	r1, #4

08001fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001fc0:	480a      	ldr	r0, [pc, #40]	; (8001fec <LoopForever+0xa>)
	ldr	r3, =_edata
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001fc4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001fc6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001fc8:	d3f6      	bcc.n	8001fb8 <CopyDataInit>
	ldr	r2, =_sbss
 8001fca:	4a0a      	ldr	r2, [pc, #40]	; (8001ff4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001fcc:	e002      	b.n	8001fd4 <LoopFillZerobss>

08001fce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001fce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001fd0:	f842 3b04 	str.w	r3, [r2], #4

08001fd4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001fd4:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <LoopForever+0x16>)
	cmp	r2, r3
 8001fd6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001fd8:	d3f9      	bcc.n	8001fce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fda:	f003 ff47 	bl	8005e6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fde:	f7ff f9cd 	bl	800137c <main>

08001fe2 <LoopForever>:

LoopForever:
    b LoopForever
 8001fe2:	e7fe      	b.n	8001fe2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fe4:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001fe8:	0800909c 	.word	0x0800909c
	ldr	r0, =_sdata
 8001fec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001ff0:	20000204 	.word	0x20000204
	ldr	r2, =_sbss
 8001ff4:	20000204 	.word	0x20000204
	ldr	r3, = _ebss
 8001ff8:	2000048c 	.word	0x2000048c

08001ffc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ffc:	e7fe      	b.n	8001ffc <ADC1_IRQHandler>

08001ffe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002008:	2003      	movs	r0, #3
 800200a:	f000 f8de 	bl	80021ca <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800200e:	2000      	movs	r0, #0
 8002010:	f7ff fe48 	bl	8001ca4 <HAL_InitTick>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d002      	beq.n	8002020 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	71fb      	strb	r3, [r7, #7]
 800201e:	e001      	b.n	8002024 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002020:	f7ff fd70 	bl	8001b04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002024:	79fb      	ldrb	r3, [r7, #7]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <HAL_IncTick+0x20>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	461a      	mov	r2, r3
 800203a:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_IncTick+0x24>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4413      	add	r3, r2
 8002040:	4a04      	ldr	r2, [pc, #16]	; (8002054 <HAL_IncTick+0x24>)
 8002042:	6013      	str	r3, [r2, #0]
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	20000030 	.word	0x20000030
 8002054:	20000478 	.word	0x20000478

08002058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  return uwTick;
 800205c:	4b03      	ldr	r3, [pc, #12]	; (800206c <HAL_GetTick+0x14>)
 800205e:	681b      	ldr	r3, [r3, #0]
}
 8002060:	4618      	mov	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	20000478 	.word	0x20000478

08002070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002080:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800208c:	4013      	ands	r3, r2
 800208e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002098:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800209c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020a2:	4a04      	ldr	r2, [pc, #16]	; (80020b4 <__NVIC_SetPriorityGrouping+0x44>)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	60d3      	str	r3, [r2, #12]
}
 80020a8:	bf00      	nop
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020bc:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <__NVIC_GetPriorityGrouping+0x18>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	0a1b      	lsrs	r3, r3, #8
 80020c2:	f003 0307 	and.w	r3, r3, #7
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	db0b      	blt.n	80020fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	f003 021f 	and.w	r2, r3, #31
 80020ec:	4907      	ldr	r1, [pc, #28]	; (800210c <__NVIC_EnableIRQ+0x38>)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	095b      	lsrs	r3, r3, #5
 80020f4:	2001      	movs	r0, #1
 80020f6:	fa00 f202 	lsl.w	r2, r0, r2
 80020fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	e000e100 	.word	0xe000e100

08002110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	6039      	str	r1, [r7, #0]
 800211a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800211c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002120:	2b00      	cmp	r3, #0
 8002122:	db0a      	blt.n	800213a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	b2da      	uxtb	r2, r3
 8002128:	490c      	ldr	r1, [pc, #48]	; (800215c <__NVIC_SetPriority+0x4c>)
 800212a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212e:	0112      	lsls	r2, r2, #4
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	440b      	add	r3, r1
 8002134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002138:	e00a      	b.n	8002150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	b2da      	uxtb	r2, r3
 800213e:	4908      	ldr	r1, [pc, #32]	; (8002160 <__NVIC_SetPriority+0x50>)
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	3b04      	subs	r3, #4
 8002148:	0112      	lsls	r2, r2, #4
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	440b      	add	r3, r1
 800214e:	761a      	strb	r2, [r3, #24]
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	e000e100 	.word	0xe000e100
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002164:	b480      	push	{r7}
 8002166:	b089      	sub	sp, #36	; 0x24
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f1c3 0307 	rsb	r3, r3, #7
 800217e:	2b04      	cmp	r3, #4
 8002180:	bf28      	it	cs
 8002182:	2304      	movcs	r3, #4
 8002184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3304      	adds	r3, #4
 800218a:	2b06      	cmp	r3, #6
 800218c:	d902      	bls.n	8002194 <NVIC_EncodePriority+0x30>
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	3b03      	subs	r3, #3
 8002192:	e000      	b.n	8002196 <NVIC_EncodePriority+0x32>
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002198:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43da      	mvns	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	401a      	ands	r2, r3
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	fa01 f303 	lsl.w	r3, r1, r3
 80021b6:	43d9      	mvns	r1, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021bc:	4313      	orrs	r3, r2
         );
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3724      	adds	r7, #36	; 0x24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff ff4c 	bl	8002070 <__NVIC_SetPriorityGrouping>
}
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
 80021ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021f2:	f7ff ff61 	bl	80020b8 <__NVIC_GetPriorityGrouping>
 80021f6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	68b9      	ldr	r1, [r7, #8]
 80021fc:	6978      	ldr	r0, [r7, #20]
 80021fe:	f7ff ffb1 	bl	8002164 <NVIC_EncodePriority>
 8002202:	4602      	mov	r2, r0
 8002204:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002208:	4611      	mov	r1, r2
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff ff80 	bl	8002110 <__NVIC_SetPriority>
}
 8002210:	bf00      	nop
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff ff54 	bl	80020d4 <__NVIC_EnableIRQ>
}
 800222c:	bf00      	nop
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002234:	b480      	push	{r7}
 8002236:	b087      	sub	sp, #28
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002242:	e166      	b.n	8002512 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	2101      	movs	r1, #1
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	fa01 f303 	lsl.w	r3, r1, r3
 8002250:	4013      	ands	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 8158 	beq.w	800250c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d00b      	beq.n	800227c <HAL_GPIO_Init+0x48>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b02      	cmp	r3, #2
 800226a:	d007      	beq.n	800227c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002270:	2b11      	cmp	r3, #17
 8002272:	d003      	beq.n	800227c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2b12      	cmp	r3, #18
 800227a:	d130      	bne.n	80022de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	2203      	movs	r2, #3
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	4013      	ands	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	68da      	ldr	r2, [r3, #12]
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022b2:	2201      	movs	r2, #1
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4013      	ands	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	091b      	lsrs	r3, r3, #4
 80022c8:	f003 0201 	and.w	r2, r3, #1
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	2203      	movs	r2, #3
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43db      	mvns	r3, r3
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4013      	ands	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0xea>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b12      	cmp	r3, #18
 800231c:	d123      	bne.n	8002366 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	08da      	lsrs	r2, r3, #3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3208      	adds	r2, #8
 8002326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800232a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	220f      	movs	r2, #15
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43db      	mvns	r3, r3
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4013      	ands	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	691a      	ldr	r2, [r3, #16]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	08da      	lsrs	r2, r3, #3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3208      	adds	r2, #8
 8002360:	6939      	ldr	r1, [r7, #16]
 8002362:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	2203      	movs	r2, #3
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	4013      	ands	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 0203 	and.w	r2, r3, #3
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4313      	orrs	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 80b2 	beq.w	800250c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a8:	4b61      	ldr	r3, [pc, #388]	; (8002530 <HAL_GPIO_Init+0x2fc>)
 80023aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ac:	4a60      	ldr	r2, [pc, #384]	; (8002530 <HAL_GPIO_Init+0x2fc>)
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	6613      	str	r3, [r2, #96]	; 0x60
 80023b4:	4b5e      	ldr	r3, [pc, #376]	; (8002530 <HAL_GPIO_Init+0x2fc>)
 80023b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023c0:	4a5c      	ldr	r2, [pc, #368]	; (8002534 <HAL_GPIO_Init+0x300>)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	089b      	lsrs	r3, r3, #2
 80023c6:	3302      	adds	r3, #2
 80023c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	220f      	movs	r2, #15
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4013      	ands	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023ea:	d02b      	beq.n	8002444 <HAL_GPIO_Init+0x210>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a52      	ldr	r2, [pc, #328]	; (8002538 <HAL_GPIO_Init+0x304>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d025      	beq.n	8002440 <HAL_GPIO_Init+0x20c>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a51      	ldr	r2, [pc, #324]	; (800253c <HAL_GPIO_Init+0x308>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d01f      	beq.n	800243c <HAL_GPIO_Init+0x208>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a50      	ldr	r2, [pc, #320]	; (8002540 <HAL_GPIO_Init+0x30c>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d019      	beq.n	8002438 <HAL_GPIO_Init+0x204>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a4f      	ldr	r2, [pc, #316]	; (8002544 <HAL_GPIO_Init+0x310>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d013      	beq.n	8002434 <HAL_GPIO_Init+0x200>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a4e      	ldr	r2, [pc, #312]	; (8002548 <HAL_GPIO_Init+0x314>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d00d      	beq.n	8002430 <HAL_GPIO_Init+0x1fc>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a4d      	ldr	r2, [pc, #308]	; (800254c <HAL_GPIO_Init+0x318>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d007      	beq.n	800242c <HAL_GPIO_Init+0x1f8>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a4c      	ldr	r2, [pc, #304]	; (8002550 <HAL_GPIO_Init+0x31c>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d101      	bne.n	8002428 <HAL_GPIO_Init+0x1f4>
 8002424:	2307      	movs	r3, #7
 8002426:	e00e      	b.n	8002446 <HAL_GPIO_Init+0x212>
 8002428:	2308      	movs	r3, #8
 800242a:	e00c      	b.n	8002446 <HAL_GPIO_Init+0x212>
 800242c:	2306      	movs	r3, #6
 800242e:	e00a      	b.n	8002446 <HAL_GPIO_Init+0x212>
 8002430:	2305      	movs	r3, #5
 8002432:	e008      	b.n	8002446 <HAL_GPIO_Init+0x212>
 8002434:	2304      	movs	r3, #4
 8002436:	e006      	b.n	8002446 <HAL_GPIO_Init+0x212>
 8002438:	2303      	movs	r3, #3
 800243a:	e004      	b.n	8002446 <HAL_GPIO_Init+0x212>
 800243c:	2302      	movs	r3, #2
 800243e:	e002      	b.n	8002446 <HAL_GPIO_Init+0x212>
 8002440:	2301      	movs	r3, #1
 8002442:	e000      	b.n	8002446 <HAL_GPIO_Init+0x212>
 8002444:	2300      	movs	r3, #0
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	f002 0203 	and.w	r2, r2, #3
 800244c:	0092      	lsls	r2, r2, #2
 800244e:	4093      	lsls	r3, r2
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002456:	4937      	ldr	r1, [pc, #220]	; (8002534 <HAL_GPIO_Init+0x300>)
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	089b      	lsrs	r3, r3, #2
 800245c:	3302      	adds	r3, #2
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002464:	4b3b      	ldr	r3, [pc, #236]	; (8002554 <HAL_GPIO_Init+0x320>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	43db      	mvns	r3, r3
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4013      	ands	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002488:	4a32      	ldr	r2, [pc, #200]	; (8002554 <HAL_GPIO_Init+0x320>)
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800248e:	4b31      	ldr	r3, [pc, #196]	; (8002554 <HAL_GPIO_Init+0x320>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	43db      	mvns	r3, r3
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	4013      	ands	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024b2:	4a28      	ldr	r2, [pc, #160]	; (8002554 <HAL_GPIO_Init+0x320>)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024b8:	4b26      	ldr	r3, [pc, #152]	; (8002554 <HAL_GPIO_Init+0x320>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4013      	ands	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4313      	orrs	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024dc:	4a1d      	ldr	r2, [pc, #116]	; (8002554 <HAL_GPIO_Init+0x320>)
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024e2:	4b1c      	ldr	r3, [pc, #112]	; (8002554 <HAL_GPIO_Init+0x320>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	4013      	ands	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4313      	orrs	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002506:	4a13      	ldr	r2, [pc, #76]	; (8002554 <HAL_GPIO_Init+0x320>)
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	3301      	adds	r3, #1
 8002510:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	fa22 f303 	lsr.w	r3, r2, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	f47f ae91 	bne.w	8002244 <HAL_GPIO_Init+0x10>
  }
}
 8002522:	bf00      	nop
 8002524:	bf00      	nop
 8002526:	371c      	adds	r7, #28
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	40021000 	.word	0x40021000
 8002534:	40010000 	.word	0x40010000
 8002538:	48000400 	.word	0x48000400
 800253c:	48000800 	.word	0x48000800
 8002540:	48000c00 	.word	0x48000c00
 8002544:	48001000 	.word	0x48001000
 8002548:	48001400 	.word	0x48001400
 800254c:	48001800 	.word	0x48001800
 8002550:	48001c00 	.word	0x48001c00
 8002554:	40010400 	.word	0x40010400

08002558 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002558:	b480      	push	{r7}
 800255a:	b087      	sub	sp, #28
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002566:	e0c9      	b.n	80026fc <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002568:	2201      	movs	r2, #1
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	4013      	ands	r3, r2
 8002574:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 80bc 	beq.w	80026f6 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800257e:	4a66      	ldr	r2, [pc, #408]	; (8002718 <HAL_GPIO_DeInit+0x1c0>)
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	089b      	lsrs	r3, r3, #2
 8002584:	3302      	adds	r3, #2
 8002586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	220f      	movs	r2, #15
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	4013      	ands	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025a6:	d02b      	beq.n	8002600 <HAL_GPIO_DeInit+0xa8>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a5c      	ldr	r2, [pc, #368]	; (800271c <HAL_GPIO_DeInit+0x1c4>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d025      	beq.n	80025fc <HAL_GPIO_DeInit+0xa4>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a5b      	ldr	r2, [pc, #364]	; (8002720 <HAL_GPIO_DeInit+0x1c8>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d01f      	beq.n	80025f8 <HAL_GPIO_DeInit+0xa0>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a5a      	ldr	r2, [pc, #360]	; (8002724 <HAL_GPIO_DeInit+0x1cc>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d019      	beq.n	80025f4 <HAL_GPIO_DeInit+0x9c>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a59      	ldr	r2, [pc, #356]	; (8002728 <HAL_GPIO_DeInit+0x1d0>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d013      	beq.n	80025f0 <HAL_GPIO_DeInit+0x98>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a58      	ldr	r2, [pc, #352]	; (800272c <HAL_GPIO_DeInit+0x1d4>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d00d      	beq.n	80025ec <HAL_GPIO_DeInit+0x94>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a57      	ldr	r2, [pc, #348]	; (8002730 <HAL_GPIO_DeInit+0x1d8>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d007      	beq.n	80025e8 <HAL_GPIO_DeInit+0x90>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a56      	ldr	r2, [pc, #344]	; (8002734 <HAL_GPIO_DeInit+0x1dc>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d101      	bne.n	80025e4 <HAL_GPIO_DeInit+0x8c>
 80025e0:	2307      	movs	r3, #7
 80025e2:	e00e      	b.n	8002602 <HAL_GPIO_DeInit+0xaa>
 80025e4:	2308      	movs	r3, #8
 80025e6:	e00c      	b.n	8002602 <HAL_GPIO_DeInit+0xaa>
 80025e8:	2306      	movs	r3, #6
 80025ea:	e00a      	b.n	8002602 <HAL_GPIO_DeInit+0xaa>
 80025ec:	2305      	movs	r3, #5
 80025ee:	e008      	b.n	8002602 <HAL_GPIO_DeInit+0xaa>
 80025f0:	2304      	movs	r3, #4
 80025f2:	e006      	b.n	8002602 <HAL_GPIO_DeInit+0xaa>
 80025f4:	2303      	movs	r3, #3
 80025f6:	e004      	b.n	8002602 <HAL_GPIO_DeInit+0xaa>
 80025f8:	2302      	movs	r3, #2
 80025fa:	e002      	b.n	8002602 <HAL_GPIO_DeInit+0xaa>
 80025fc:	2301      	movs	r3, #1
 80025fe:	e000      	b.n	8002602 <HAL_GPIO_DeInit+0xaa>
 8002600:	2300      	movs	r3, #0
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	f002 0203 	and.w	r2, r2, #3
 8002608:	0092      	lsls	r2, r2, #2
 800260a:	4093      	lsls	r3, r2
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	429a      	cmp	r2, r3
 8002610:	d132      	bne.n	8002678 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002612:	4b49      	ldr	r3, [pc, #292]	; (8002738 <HAL_GPIO_DeInit+0x1e0>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	43db      	mvns	r3, r3
 800261a:	4947      	ldr	r1, [pc, #284]	; (8002738 <HAL_GPIO_DeInit+0x1e0>)
 800261c:	4013      	ands	r3, r2
 800261e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002620:	4b45      	ldr	r3, [pc, #276]	; (8002738 <HAL_GPIO_DeInit+0x1e0>)
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	43db      	mvns	r3, r3
 8002628:	4943      	ldr	r1, [pc, #268]	; (8002738 <HAL_GPIO_DeInit+0x1e0>)
 800262a:	4013      	ands	r3, r2
 800262c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800262e:	4b42      	ldr	r3, [pc, #264]	; (8002738 <HAL_GPIO_DeInit+0x1e0>)
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	43db      	mvns	r3, r3
 8002636:	4940      	ldr	r1, [pc, #256]	; (8002738 <HAL_GPIO_DeInit+0x1e0>)
 8002638:	4013      	ands	r3, r2
 800263a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800263c:	4b3e      	ldr	r3, [pc, #248]	; (8002738 <HAL_GPIO_DeInit+0x1e0>)
 800263e:	68da      	ldr	r2, [r3, #12]
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	43db      	mvns	r3, r3
 8002644:	493c      	ldr	r1, [pc, #240]	; (8002738 <HAL_GPIO_DeInit+0x1e0>)
 8002646:	4013      	ands	r3, r2
 8002648:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f003 0303 	and.w	r3, r3, #3
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	220f      	movs	r2, #15
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800265a:	4a2f      	ldr	r2, [pc, #188]	; (8002718 <HAL_GPIO_DeInit+0x1c0>)
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	089b      	lsrs	r3, r3, #2
 8002660:	3302      	adds	r3, #2
 8002662:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	43da      	mvns	r2, r3
 800266a:	482b      	ldr	r0, [pc, #172]	; (8002718 <HAL_GPIO_DeInit+0x1c0>)
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	089b      	lsrs	r3, r3, #2
 8002670:	400a      	ands	r2, r1
 8002672:	3302      	adds	r3, #2
 8002674:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	2103      	movs	r1, #3
 8002682:	fa01 f303 	lsl.w	r3, r1, r3
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	08da      	lsrs	r2, r3, #3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3208      	adds	r2, #8
 8002694:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	220f      	movs	r2, #15
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	08d2      	lsrs	r2, r2, #3
 80026ac:	4019      	ands	r1, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3208      	adds	r2, #8
 80026b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	2103      	movs	r1, #3
 80026c0:	fa01 f303 	lsl.w	r3, r1, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	401a      	ands	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	2101      	movs	r1, #1
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	fa01 f303 	lsl.w	r3, r1, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	401a      	ands	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	2103      	movs	r1, #3
 80026ea:	fa01 f303 	lsl.w	r3, r1, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	401a      	ands	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	3301      	adds	r3, #1
 80026fa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	fa22 f303 	lsr.w	r3, r2, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	f47f af2f 	bne.w	8002568 <HAL_GPIO_DeInit+0x10>
  }
}
 800270a:	bf00      	nop
 800270c:	bf00      	nop
 800270e:	371c      	adds	r7, #28
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	40010000 	.word	0x40010000
 800271c:	48000400 	.word	0x48000400
 8002720:	48000800 	.word	0x48000800
 8002724:	48000c00 	.word	0x48000c00
 8002728:	48001000 	.word	0x48001000
 800272c:	48001400 	.word	0x48001400
 8002730:	48001800 	.word	0x48001800
 8002734:	48001c00 	.word	0x48001c00
 8002738:	40010400 	.word	0x40010400

0800273c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	807b      	strh	r3, [r7, #2]
 8002748:	4613      	mov	r3, r2
 800274a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800274c:	787b      	ldrb	r3, [r7, #1]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002752:	887a      	ldrh	r2, [r7, #2]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002758:	e002      	b.n	8002760 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800275a:	887a      	ldrh	r2, [r7, #2]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e081      	b.n	8002882 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d106      	bne.n	8002798 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7ff f9da 	bl	8001b4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2224      	movs	r2, #36	; 0x24
 800279c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0201 	bic.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d107      	bne.n	80027e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689a      	ldr	r2, [r3, #8]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	e006      	b.n	80027f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80027f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d104      	bne.n	8002806 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002804:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002818:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68da      	ldr	r2, [r3, #12]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002828:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691a      	ldr	r2, [r3, #16]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	ea42 0103 	orr.w	r1, r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	021a      	lsls	r2, r3, #8
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	69d9      	ldr	r1, [r3, #28]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a1a      	ldr	r2, [r3, #32]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0201 	orr.w	r2, r2, #1
 8002862:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2220      	movs	r2, #32
 800286e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e021      	b.n	80028e0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2224      	movs	r2, #36	; 0x24
 80028a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 0201 	bic.w	r2, r2, #1
 80028b2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7ff f98d 	bl	8001bd4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b088      	sub	sp, #32
 80028ec:	af02      	add	r7, sp, #8
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	4608      	mov	r0, r1
 80028f2:	4611      	mov	r1, r2
 80028f4:	461a      	mov	r2, r3
 80028f6:	4603      	mov	r3, r0
 80028f8:	817b      	strh	r3, [r7, #10]
 80028fa:	460b      	mov	r3, r1
 80028fc:	813b      	strh	r3, [r7, #8]
 80028fe:	4613      	mov	r3, r2
 8002900:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b20      	cmp	r3, #32
 800290c:	f040 80f9 	bne.w	8002b02 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002910:	6a3b      	ldr	r3, [r7, #32]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <HAL_I2C_Mem_Write+0x34>
 8002916:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002918:	2b00      	cmp	r3, #0
 800291a:	d105      	bne.n	8002928 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002922:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0ed      	b.n	8002b04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800292e:	2b01      	cmp	r3, #1
 8002930:	d101      	bne.n	8002936 <HAL_I2C_Mem_Write+0x4e>
 8002932:	2302      	movs	r3, #2
 8002934:	e0e6      	b.n	8002b04 <HAL_I2C_Mem_Write+0x21c>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800293e:	f7ff fb8b 	bl	8002058 <HAL_GetTick>
 8002942:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	2319      	movs	r3, #25
 800294a:	2201      	movs	r2, #1
 800294c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 fac3 	bl	8002edc <I2C_WaitOnFlagUntilTimeout>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e0d1      	b.n	8002b04 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2221      	movs	r2, #33	; 0x21
 8002964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2240      	movs	r2, #64	; 0x40
 800296c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6a3a      	ldr	r2, [r7, #32]
 800297a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002980:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002988:	88f8      	ldrh	r0, [r7, #6]
 800298a:	893a      	ldrh	r2, [r7, #8]
 800298c:	8979      	ldrh	r1, [r7, #10]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	9301      	str	r3, [sp, #4]
 8002992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	4603      	mov	r3, r0
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 f9d3 	bl	8002d44 <I2C_RequestMemoryWrite>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d005      	beq.n	80029b0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e0a9      	b.n	8002b04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	2bff      	cmp	r3, #255	; 0xff
 80029b8:	d90e      	bls.n	80029d8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	22ff      	movs	r2, #255	; 0xff
 80029be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	8979      	ldrh	r1, [r7, #10]
 80029c8:	2300      	movs	r3, #0
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 fba5 	bl	8003120 <I2C_TransferConfig>
 80029d6:	e00f      	b.n	80029f8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029dc:	b29a      	uxth	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	8979      	ldrh	r1, [r7, #10]
 80029ea:	2300      	movs	r3, #0
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 fb94 	bl	8003120 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f000 faad 	bl	8002f5c <I2C_WaitOnTXISFlagUntilTimeout>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e07b      	b.n	8002b04 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a10:	781a      	ldrb	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	1c5a      	adds	r2, r3, #1
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d034      	beq.n	8002ab0 <HAL_I2C_Mem_Write+0x1c8>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d130      	bne.n	8002ab0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a54:	2200      	movs	r2, #0
 8002a56:	2180      	movs	r1, #128	; 0x80
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 fa3f 	bl	8002edc <I2C_WaitOnFlagUntilTimeout>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e04d      	b.n	8002b04 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	2bff      	cmp	r3, #255	; 0xff
 8002a70:	d90e      	bls.n	8002a90 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	22ff      	movs	r2, #255	; 0xff
 8002a76:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	8979      	ldrh	r1, [r7, #10]
 8002a80:	2300      	movs	r3, #0
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 fb49 	bl	8003120 <I2C_TransferConfig>
 8002a8e:	e00f      	b.n	8002ab0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	8979      	ldrh	r1, [r7, #10]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 fb38 	bl	8003120 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d19e      	bne.n	80029f8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 fa8c 	bl	8002fdc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e01a      	b.n	8002b04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6859      	ldr	r1, [r3, #4]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <HAL_I2C_Mem_Write+0x224>)
 8002ae2:	400b      	ands	r3, r1
 8002ae4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2220      	movs	r2, #32
 8002aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	e000      	b.n	8002b04 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002b02:	2302      	movs	r3, #2
  }
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	fe00e800 	.word	0xfe00e800

08002b10 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b088      	sub	sp, #32
 8002b14:	af02      	add	r7, sp, #8
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	4608      	mov	r0, r1
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4603      	mov	r3, r0
 8002b20:	817b      	strh	r3, [r7, #10]
 8002b22:	460b      	mov	r3, r1
 8002b24:	813b      	strh	r3, [r7, #8]
 8002b26:	4613      	mov	r3, r2
 8002b28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b20      	cmp	r3, #32
 8002b34:	f040 80fd 	bne.w	8002d32 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <HAL_I2C_Mem_Read+0x34>
 8002b3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d105      	bne.n	8002b50 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b4a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e0f1      	b.n	8002d34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d101      	bne.n	8002b5e <HAL_I2C_Mem_Read+0x4e>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	e0ea      	b.n	8002d34 <HAL_I2C_Mem_Read+0x224>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b66:	f7ff fa77 	bl	8002058 <HAL_GetTick>
 8002b6a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	2319      	movs	r3, #25
 8002b72:	2201      	movs	r2, #1
 8002b74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 f9af 	bl	8002edc <I2C_WaitOnFlagUntilTimeout>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e0d5      	b.n	8002d34 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2222      	movs	r2, #34	; 0x22
 8002b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2240      	movs	r2, #64	; 0x40
 8002b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6a3a      	ldr	r2, [r7, #32]
 8002ba2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ba8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bb0:	88f8      	ldrh	r0, [r7, #6]
 8002bb2:	893a      	ldrh	r2, [r7, #8]
 8002bb4:	8979      	ldrh	r1, [r7, #10]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	9301      	str	r3, [sp, #4]
 8002bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 f913 	bl	8002dec <I2C_RequestMemoryRead>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e0ad      	b.n	8002d34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	2bff      	cmp	r3, #255	; 0xff
 8002be0:	d90e      	bls.n	8002c00 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	22ff      	movs	r2, #255	; 0xff
 8002be6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	8979      	ldrh	r1, [r7, #10]
 8002bf0:	4b52      	ldr	r3, [pc, #328]	; (8002d3c <HAL_I2C_Mem_Read+0x22c>)
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 fa91 	bl	8003120 <I2C_TransferConfig>
 8002bfe:	e00f      	b.n	8002c20 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	8979      	ldrh	r1, [r7, #10]
 8002c12:	4b4a      	ldr	r3, [pc, #296]	; (8002d3c <HAL_I2C_Mem_Read+0x22c>)
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 fa80 	bl	8003120 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c26:	2200      	movs	r2, #0
 8002c28:	2104      	movs	r1, #4
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 f956 	bl	8002edc <I2C_WaitOnFlagUntilTimeout>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e07c      	b.n	8002d34 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	1c5a      	adds	r2, r3, #1
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d034      	beq.n	8002ce0 <HAL_I2C_Mem_Read+0x1d0>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d130      	bne.n	8002ce0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c84:	2200      	movs	r2, #0
 8002c86:	2180      	movs	r1, #128	; 0x80
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 f927 	bl	8002edc <I2C_WaitOnFlagUntilTimeout>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e04d      	b.n	8002d34 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	2bff      	cmp	r3, #255	; 0xff
 8002ca0:	d90e      	bls.n	8002cc0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	22ff      	movs	r2, #255	; 0xff
 8002ca6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	8979      	ldrh	r1, [r7, #10]
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 fa31 	bl	8003120 <I2C_TransferConfig>
 8002cbe:	e00f      	b.n	8002ce0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	8979      	ldrh	r1, [r7, #10]
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 fa20 	bl	8003120 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d19a      	bne.n	8002c20 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 f974 	bl	8002fdc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e01a      	b.n	8002d34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2220      	movs	r2, #32
 8002d04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6859      	ldr	r1, [r3, #4]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <HAL_I2C_Mem_Read+0x230>)
 8002d12:	400b      	ands	r3, r1
 8002d14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	e000      	b.n	8002d34 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002d32:	2302      	movs	r3, #2
  }
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	80002400 	.word	0x80002400
 8002d40:	fe00e800 	.word	0xfe00e800

08002d44 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af02      	add	r7, sp, #8
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	4608      	mov	r0, r1
 8002d4e:	4611      	mov	r1, r2
 8002d50:	461a      	mov	r2, r3
 8002d52:	4603      	mov	r3, r0
 8002d54:	817b      	strh	r3, [r7, #10]
 8002d56:	460b      	mov	r3, r1
 8002d58:	813b      	strh	r3, [r7, #8]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d5e:	88fb      	ldrh	r3, [r7, #6]
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	8979      	ldrh	r1, [r7, #10]
 8002d64:	4b20      	ldr	r3, [pc, #128]	; (8002de8 <I2C_RequestMemoryWrite+0xa4>)
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 f9d7 	bl	8003120 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d72:	69fa      	ldr	r2, [r7, #28]
 8002d74:	69b9      	ldr	r1, [r7, #24]
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 f8f0 	bl	8002f5c <I2C_WaitOnTXISFlagUntilTimeout>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e02c      	b.n	8002de0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d86:	88fb      	ldrh	r3, [r7, #6]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d105      	bne.n	8002d98 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d8c:	893b      	ldrh	r3, [r7, #8]
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	629a      	str	r2, [r3, #40]	; 0x28
 8002d96:	e015      	b.n	8002dc4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d98:	893b      	ldrh	r3, [r7, #8]
 8002d9a:	0a1b      	lsrs	r3, r3, #8
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002da6:	69fa      	ldr	r2, [r7, #28]
 8002da8:	69b9      	ldr	r1, [r7, #24]
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f000 f8d6 	bl	8002f5c <I2C_WaitOnTXISFlagUntilTimeout>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e012      	b.n	8002de0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002dba:	893b      	ldrh	r3, [r7, #8]
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2180      	movs	r1, #128	; 0x80
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 f884 	bl	8002edc <I2C_WaitOnFlagUntilTimeout>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e000      	b.n	8002de0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	80002000 	.word	0x80002000

08002dec <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af02      	add	r7, sp, #8
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	4608      	mov	r0, r1
 8002df6:	4611      	mov	r1, r2
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	817b      	strh	r3, [r7, #10]
 8002dfe:	460b      	mov	r3, r1
 8002e00:	813b      	strh	r3, [r7, #8]
 8002e02:	4613      	mov	r3, r2
 8002e04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002e06:	88fb      	ldrh	r3, [r7, #6]
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	8979      	ldrh	r1, [r7, #10]
 8002e0c:	4b20      	ldr	r3, [pc, #128]	; (8002e90 <I2C_RequestMemoryRead+0xa4>)
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	2300      	movs	r3, #0
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f984 	bl	8003120 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e18:	69fa      	ldr	r2, [r7, #28]
 8002e1a:	69b9      	ldr	r1, [r7, #24]
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 f89d 	bl	8002f5c <I2C_WaitOnTXISFlagUntilTimeout>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e02c      	b.n	8002e86 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e2c:	88fb      	ldrh	r3, [r7, #6]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d105      	bne.n	8002e3e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e32:	893b      	ldrh	r3, [r7, #8]
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	629a      	str	r2, [r3, #40]	; 0x28
 8002e3c:	e015      	b.n	8002e6a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e3e:	893b      	ldrh	r3, [r7, #8]
 8002e40:	0a1b      	lsrs	r3, r3, #8
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e4c:	69fa      	ldr	r2, [r7, #28]
 8002e4e:	69b9      	ldr	r1, [r7, #24]
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 f883 	bl	8002f5c <I2C_WaitOnTXISFlagUntilTimeout>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e012      	b.n	8002e86 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e60:	893b      	ldrh	r3, [r7, #8]
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	2200      	movs	r2, #0
 8002e72:	2140      	movs	r1, #64	; 0x40
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 f831 	bl	8002edc <I2C_WaitOnFlagUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e000      	b.n	8002e86 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	80002000 	.word	0x80002000

08002e94 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d103      	bne.n	8002eb2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d007      	beq.n	8002ed0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699a      	ldr	r2, [r3, #24]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0201 	orr.w	r2, r2, #1
 8002ece:	619a      	str	r2, [r3, #24]
  }
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	603b      	str	r3, [r7, #0]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eec:	e022      	b.n	8002f34 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ef4:	d01e      	beq.n	8002f34 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef6:	f7ff f8af 	bl	8002058 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d302      	bcc.n	8002f0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d113      	bne.n	8002f34 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f10:	f043 0220 	orr.w	r2, r3, #32
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e00f      	b.n	8002f54 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699a      	ldr	r2, [r3, #24]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	bf0c      	ite	eq
 8002f44:	2301      	moveq	r3, #1
 8002f46:	2300      	movne	r3, #0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	79fb      	ldrb	r3, [r7, #7]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d0cd      	beq.n	8002eee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f68:	e02c      	b.n	8002fc4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	68b9      	ldr	r1, [r7, #8]
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 f870 	bl	8003054 <I2C_IsAcknowledgeFailed>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e02a      	b.n	8002fd4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f84:	d01e      	beq.n	8002fc4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f86:	f7ff f867 	bl	8002058 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	68ba      	ldr	r2, [r7, #8]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d302      	bcc.n	8002f9c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d113      	bne.n	8002fc4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa0:	f043 0220 	orr.w	r2, r3, #32
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2220      	movs	r2, #32
 8002fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e007      	b.n	8002fd4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d1cb      	bne.n	8002f6a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fe8:	e028      	b.n	800303c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	68b9      	ldr	r1, [r7, #8]
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 f830 	bl	8003054 <I2C_IsAcknowledgeFailed>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e026      	b.n	800304c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ffe:	f7ff f82b 	bl	8002058 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	429a      	cmp	r2, r3
 800300c:	d302      	bcc.n	8003014 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d113      	bne.n	800303c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003018:	f043 0220 	orr.w	r2, r3, #32
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e007      	b.n	800304c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	f003 0320 	and.w	r3, r3, #32
 8003046:	2b20      	cmp	r3, #32
 8003048:	d1cf      	bne.n	8002fea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	f003 0310 	and.w	r3, r3, #16
 800306a:	2b10      	cmp	r3, #16
 800306c:	d151      	bne.n	8003112 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800306e:	e022      	b.n	80030b6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003076:	d01e      	beq.n	80030b6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003078:	f7fe ffee 	bl	8002058 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	429a      	cmp	r2, r3
 8003086:	d302      	bcc.n	800308e <I2C_IsAcknowledgeFailed+0x3a>
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d113      	bne.n	80030b6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003092:	f043 0220 	orr.w	r2, r3, #32
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2220      	movs	r2, #32
 800309e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e02e      	b.n	8003114 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	f003 0320 	and.w	r3, r3, #32
 80030c0:	2b20      	cmp	r3, #32
 80030c2:	d1d5      	bne.n	8003070 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2210      	movs	r2, #16
 80030ca:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2220      	movs	r2, #32
 80030d2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f7ff fedd 	bl	8002e94 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6859      	ldr	r1, [r3, #4]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	4b0d      	ldr	r3, [pc, #52]	; (800311c <I2C_IsAcknowledgeFailed+0xc8>)
 80030e6:	400b      	ands	r3, r1
 80030e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ee:	f043 0204 	orr.w	r2, r3, #4
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2220      	movs	r2, #32
 80030fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	fe00e800 	.word	0xfe00e800

08003120 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	607b      	str	r3, [r7, #4]
 800312a:	460b      	mov	r3, r1
 800312c:	817b      	strh	r3, [r7, #10]
 800312e:	4613      	mov	r3, r2
 8003130:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	0d5b      	lsrs	r3, r3, #21
 800313c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003140:	4b0d      	ldr	r3, [pc, #52]	; (8003178 <I2C_TransferConfig+0x58>)
 8003142:	430b      	orrs	r3, r1
 8003144:	43db      	mvns	r3, r3
 8003146:	ea02 0103 	and.w	r1, r2, r3
 800314a:	897b      	ldrh	r3, [r7, #10]
 800314c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003150:	7a7b      	ldrb	r3, [r7, #9]
 8003152:	041b      	lsls	r3, r3, #16
 8003154:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	431a      	orrs	r2, r3
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	431a      	orrs	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800316a:	bf00      	nop
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	03ff63ff 	.word	0x03ff63ff

0800317c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b20      	cmp	r3, #32
 8003190:	d138      	bne.n	8003204 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003198:	2b01      	cmp	r3, #1
 800319a:	d101      	bne.n	80031a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800319c:	2302      	movs	r3, #2
 800319e:	e032      	b.n	8003206 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2224      	movs	r2, #36	; 0x24
 80031ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0201 	bic.w	r2, r2, #1
 80031be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6819      	ldr	r1, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0201 	orr.w	r2, r2, #1
 80031ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2220      	movs	r2, #32
 80031f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003200:	2300      	movs	r3, #0
 8003202:	e000      	b.n	8003206 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003204:	2302      	movs	r3, #2
  }
}
 8003206:	4618      	mov	r0, r3
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003212:	b480      	push	{r7}
 8003214:	b085      	sub	sp, #20
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b20      	cmp	r3, #32
 8003226:	d139      	bne.n	800329c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003232:	2302      	movs	r3, #2
 8003234:	e033      	b.n	800329e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2224      	movs	r2, #36	; 0x24
 8003242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0201 	bic.w	r2, r2, #1
 8003254:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003264:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	021b      	lsls	r3, r3, #8
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	4313      	orrs	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0201 	orr.w	r2, r2, #1
 8003286:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2220      	movs	r2, #32
 800328c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	e000      	b.n	800329e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800329c:	2302      	movs	r3, #2
  }
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3714      	adds	r7, #20
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
	...

080032ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032b0:	4b0d      	ldr	r3, [pc, #52]	; (80032e8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032bc:	d102      	bne.n	80032c4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80032be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032c2:	e00b      	b.n	80032dc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80032c4:	4b08      	ldr	r3, [pc, #32]	; (80032e8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80032c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032d2:	d102      	bne.n	80032da <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80032d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032d8:	e000      	b.n	80032dc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80032da:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80032dc:	4618      	mov	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	40007000 	.word	0x40007000

080032ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d141      	bne.n	800337e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032fa:	4b4b      	ldr	r3, [pc, #300]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003306:	d131      	bne.n	800336c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003308:	4b47      	ldr	r3, [pc, #284]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800330a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800330e:	4a46      	ldr	r2, [pc, #280]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003314:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003318:	4b43      	ldr	r3, [pc, #268]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003320:	4a41      	ldr	r2, [pc, #260]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003322:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003326:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003328:	4b40      	ldr	r3, [pc, #256]	; (800342c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2232      	movs	r2, #50	; 0x32
 800332e:	fb02 f303 	mul.w	r3, r2, r3
 8003332:	4a3f      	ldr	r2, [pc, #252]	; (8003430 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003334:	fba2 2303 	umull	r2, r3, r2, r3
 8003338:	0c9b      	lsrs	r3, r3, #18
 800333a:	3301      	adds	r3, #1
 800333c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800333e:	e002      	b.n	8003346 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	3b01      	subs	r3, #1
 8003344:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003346:	4b38      	ldr	r3, [pc, #224]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800334e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003352:	d102      	bne.n	800335a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f2      	bne.n	8003340 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800335a:	4b33      	ldr	r3, [pc, #204]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003366:	d158      	bne.n	800341a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e057      	b.n	800341c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800336c:	4b2e      	ldr	r3, [pc, #184]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800336e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003372:	4a2d      	ldr	r2, [pc, #180]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003378:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800337c:	e04d      	b.n	800341a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003384:	d141      	bne.n	800340a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003386:	4b28      	ldr	r3, [pc, #160]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800338e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003392:	d131      	bne.n	80033f8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003394:	4b24      	ldr	r3, [pc, #144]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800339a:	4a23      	ldr	r2, [pc, #140]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800339c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033a4:	4b20      	ldr	r3, [pc, #128]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033ac:	4a1e      	ldr	r2, [pc, #120]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80033b4:	4b1d      	ldr	r3, [pc, #116]	; (800342c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2232      	movs	r2, #50	; 0x32
 80033ba:	fb02 f303 	mul.w	r3, r2, r3
 80033be:	4a1c      	ldr	r2, [pc, #112]	; (8003430 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033c0:	fba2 2303 	umull	r2, r3, r2, r3
 80033c4:	0c9b      	lsrs	r3, r3, #18
 80033c6:	3301      	adds	r3, #1
 80033c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033ca:	e002      	b.n	80033d2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033d2:	4b15      	ldr	r3, [pc, #84]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033de:	d102      	bne.n	80033e6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f2      	bne.n	80033cc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033e6:	4b10      	ldr	r3, [pc, #64]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033f2:	d112      	bne.n	800341a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e011      	b.n	800341c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033f8:	4b0b      	ldr	r3, [pc, #44]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033fe:	4a0a      	ldr	r2, [pc, #40]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003404:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003408:	e007      	b.n	800341a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800340a:	4b07      	ldr	r3, [pc, #28]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003412:	4a05      	ldr	r2, [pc, #20]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003414:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003418:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	40007000 	.word	0x40007000
 800342c:	20000028 	.word	0x20000028
 8003430:	431bde83 	.word	0x431bde83

08003434 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d102      	bne.n	8003448 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	f000 bc16 	b.w	8003c74 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003448:	4ba0      	ldr	r3, [pc, #640]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f003 030c 	and.w	r3, r3, #12
 8003450:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003452:	4b9e      	ldr	r3, [pc, #632]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0310 	and.w	r3, r3, #16
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 80e4 	beq.w	8003632 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d007      	beq.n	8003480 <HAL_RCC_OscConfig+0x4c>
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	2b0c      	cmp	r3, #12
 8003474:	f040 808b 	bne.w	800358e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	2b01      	cmp	r3, #1
 800347c:	f040 8087 	bne.w	800358e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003480:	4b92      	ldr	r3, [pc, #584]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d005      	beq.n	8003498 <HAL_RCC_OscConfig+0x64>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e3ed      	b.n	8003c74 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1a      	ldr	r2, [r3, #32]
 800349c:	4b8b      	ldr	r3, [pc, #556]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0308 	and.w	r3, r3, #8
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d004      	beq.n	80034b2 <HAL_RCC_OscConfig+0x7e>
 80034a8:	4b88      	ldr	r3, [pc, #544]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034b0:	e005      	b.n	80034be <HAL_RCC_OscConfig+0x8a>
 80034b2:	4b86      	ldr	r3, [pc, #536]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 80034b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034b8:	091b      	lsrs	r3, r3, #4
 80034ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034be:	4293      	cmp	r3, r2
 80034c0:	d223      	bcs.n	800350a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 fdfc 	bl	80040c4 <RCC_SetFlashLatencyFromMSIRange>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e3ce      	b.n	8003c74 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034d6:	4b7d      	ldr	r3, [pc, #500]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a7c      	ldr	r2, [pc, #496]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 80034dc:	f043 0308 	orr.w	r3, r3, #8
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	4b7a      	ldr	r3, [pc, #488]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	4977      	ldr	r1, [pc, #476]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034f4:	4b75      	ldr	r3, [pc, #468]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	69db      	ldr	r3, [r3, #28]
 8003500:	021b      	lsls	r3, r3, #8
 8003502:	4972      	ldr	r1, [pc, #456]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 8003504:	4313      	orrs	r3, r2
 8003506:	604b      	str	r3, [r1, #4]
 8003508:	e025      	b.n	8003556 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800350a:	4b70      	ldr	r3, [pc, #448]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a6f      	ldr	r2, [pc, #444]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 8003510:	f043 0308 	orr.w	r3, r3, #8
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	4b6d      	ldr	r3, [pc, #436]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	496a      	ldr	r1, [pc, #424]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 8003524:	4313      	orrs	r3, r2
 8003526:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003528:	4b68      	ldr	r3, [pc, #416]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	021b      	lsls	r3, r3, #8
 8003536:	4965      	ldr	r1, [pc, #404]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 8003538:	4313      	orrs	r3, r2
 800353a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d109      	bne.n	8003556 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	4618      	mov	r0, r3
 8003548:	f000 fdbc 	bl	80040c4 <RCC_SetFlashLatencyFromMSIRange>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e38e      	b.n	8003c74 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003556:	f000 fcbf 	bl	8003ed8 <HAL_RCC_GetSysClockFreq>
 800355a:	4602      	mov	r2, r0
 800355c:	4b5b      	ldr	r3, [pc, #364]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	091b      	lsrs	r3, r3, #4
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	495a      	ldr	r1, [pc, #360]	; (80036d0 <HAL_RCC_OscConfig+0x29c>)
 8003568:	5ccb      	ldrb	r3, [r1, r3]
 800356a:	f003 031f 	and.w	r3, r3, #31
 800356e:	fa22 f303 	lsr.w	r3, r2, r3
 8003572:	4a58      	ldr	r2, [pc, #352]	; (80036d4 <HAL_RCC_OscConfig+0x2a0>)
 8003574:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003576:	4b58      	ldr	r3, [pc, #352]	; (80036d8 <HAL_RCC_OscConfig+0x2a4>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f7fe fb92 	bl	8001ca4 <HAL_InitTick>
 8003580:	4603      	mov	r3, r0
 8003582:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003584:	7bfb      	ldrb	r3, [r7, #15]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d052      	beq.n	8003630 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800358a:	7bfb      	ldrb	r3, [r7, #15]
 800358c:	e372      	b.n	8003c74 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d032      	beq.n	80035fc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003596:	4b4d      	ldr	r3, [pc, #308]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a4c      	ldr	r2, [pc, #304]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035a2:	f7fe fd59 	bl	8002058 <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035aa:	f7fe fd55 	bl	8002058 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e35b      	b.n	8003c74 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035bc:	4b43      	ldr	r3, [pc, #268]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0f0      	beq.n	80035aa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035c8:	4b40      	ldr	r3, [pc, #256]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a3f      	ldr	r2, [pc, #252]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 80035ce:	f043 0308 	orr.w	r3, r3, #8
 80035d2:	6013      	str	r3, [r2, #0]
 80035d4:	4b3d      	ldr	r3, [pc, #244]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	493a      	ldr	r1, [pc, #232]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035e6:	4b39      	ldr	r3, [pc, #228]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	021b      	lsls	r3, r3, #8
 80035f4:	4935      	ldr	r1, [pc, #212]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	604b      	str	r3, [r1, #4]
 80035fa:	e01a      	b.n	8003632 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80035fc:	4b33      	ldr	r3, [pc, #204]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a32      	ldr	r2, [pc, #200]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 8003602:	f023 0301 	bic.w	r3, r3, #1
 8003606:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003608:	f7fe fd26 	bl	8002058 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003610:	f7fe fd22 	bl	8002058 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e328      	b.n	8003c74 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003622:	4b2a      	ldr	r3, [pc, #168]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f0      	bne.n	8003610 <HAL_RCC_OscConfig+0x1dc>
 800362e:	e000      	b.n	8003632 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003630:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d073      	beq.n	8003726 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	2b08      	cmp	r3, #8
 8003642:	d005      	beq.n	8003650 <HAL_RCC_OscConfig+0x21c>
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	2b0c      	cmp	r3, #12
 8003648:	d10e      	bne.n	8003668 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2b03      	cmp	r3, #3
 800364e:	d10b      	bne.n	8003668 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003650:	4b1e      	ldr	r3, [pc, #120]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d063      	beq.n	8003724 <HAL_RCC_OscConfig+0x2f0>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d15f      	bne.n	8003724 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e305      	b.n	8003c74 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003670:	d106      	bne.n	8003680 <HAL_RCC_OscConfig+0x24c>
 8003672:	4b16      	ldr	r3, [pc, #88]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a15      	ldr	r2, [pc, #84]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 8003678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	e01d      	b.n	80036bc <HAL_RCC_OscConfig+0x288>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003688:	d10c      	bne.n	80036a4 <HAL_RCC_OscConfig+0x270>
 800368a:	4b10      	ldr	r3, [pc, #64]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a0f      	ldr	r2, [pc, #60]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 8003690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	4b0d      	ldr	r3, [pc, #52]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a0c      	ldr	r2, [pc, #48]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 800369c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a0:	6013      	str	r3, [r2, #0]
 80036a2:	e00b      	b.n	80036bc <HAL_RCC_OscConfig+0x288>
 80036a4:	4b09      	ldr	r3, [pc, #36]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a08      	ldr	r2, [pc, #32]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 80036aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ae:	6013      	str	r3, [r2, #0]
 80036b0:	4b06      	ldr	r3, [pc, #24]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a05      	ldr	r2, [pc, #20]	; (80036cc <HAL_RCC_OscConfig+0x298>)
 80036b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d01b      	beq.n	80036fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c4:	f7fe fcc8 	bl	8002058 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036ca:	e010      	b.n	80036ee <HAL_RCC_OscConfig+0x2ba>
 80036cc:	40021000 	.word	0x40021000
 80036d0:	08008c3c 	.word	0x08008c3c
 80036d4:	20000028 	.word	0x20000028
 80036d8:	2000002c 	.word	0x2000002c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036dc:	f7fe fcbc 	bl	8002058 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b64      	cmp	r3, #100	; 0x64
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e2c2      	b.n	8003c74 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036ee:	4baf      	ldr	r3, [pc, #700]	; (80039ac <HAL_RCC_OscConfig+0x578>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0f0      	beq.n	80036dc <HAL_RCC_OscConfig+0x2a8>
 80036fa:	e014      	b.n	8003726 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fc:	f7fe fcac 	bl	8002058 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003704:	f7fe fca8 	bl	8002058 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b64      	cmp	r3, #100	; 0x64
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e2ae      	b.n	8003c74 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003716:	4ba5      	ldr	r3, [pc, #660]	; (80039ac <HAL_RCC_OscConfig+0x578>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f0      	bne.n	8003704 <HAL_RCC_OscConfig+0x2d0>
 8003722:	e000      	b.n	8003726 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d060      	beq.n	80037f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	2b04      	cmp	r3, #4
 8003736:	d005      	beq.n	8003744 <HAL_RCC_OscConfig+0x310>
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	2b0c      	cmp	r3, #12
 800373c:	d119      	bne.n	8003772 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2b02      	cmp	r3, #2
 8003742:	d116      	bne.n	8003772 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003744:	4b99      	ldr	r3, [pc, #612]	; (80039ac <HAL_RCC_OscConfig+0x578>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <HAL_RCC_OscConfig+0x328>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e28b      	b.n	8003c74 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800375c:	4b93      	ldr	r3, [pc, #588]	; (80039ac <HAL_RCC_OscConfig+0x578>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	061b      	lsls	r3, r3, #24
 800376a:	4990      	ldr	r1, [pc, #576]	; (80039ac <HAL_RCC_OscConfig+0x578>)
 800376c:	4313      	orrs	r3, r2
 800376e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003770:	e040      	b.n	80037f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d023      	beq.n	80037c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800377a:	4b8c      	ldr	r3, [pc, #560]	; (80039ac <HAL_RCC_OscConfig+0x578>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a8b      	ldr	r2, [pc, #556]	; (80039ac <HAL_RCC_OscConfig+0x578>)
 8003780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003786:	f7fe fc67 	bl	8002058 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800378e:	f7fe fc63 	bl	8002058 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e269      	b.n	8003c74 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037a0:	4b82      	ldr	r3, [pc, #520]	; (80039ac <HAL_RCC_OscConfig+0x578>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0f0      	beq.n	800378e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ac:	4b7f      	ldr	r3, [pc, #508]	; (80039ac <HAL_RCC_OscConfig+0x578>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	061b      	lsls	r3, r3, #24
 80037ba:	497c      	ldr	r1, [pc, #496]	; (80039ac <HAL_RCC_OscConfig+0x578>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	604b      	str	r3, [r1, #4]
 80037c0:	e018      	b.n	80037f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037c2:	4b7a      	ldr	r3, [pc, #488]	; (80039ac <HAL_RCC_OscConfig+0x578>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a79      	ldr	r2, [pc, #484]	; (80039ac <HAL_RCC_OscConfig+0x578>)
 80037c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ce:	f7fe fc43 	bl	8002058 <HAL_GetTick>
 80037d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037d4:	e008      	b.n	80037e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037d6:	f7fe fc3f 	bl	8002058 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e245      	b.n	8003c74 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037e8:	4b70      	ldr	r3, [pc, #448]	; (80039ac <HAL_RCC_OscConfig+0x578>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1f0      	bne.n	80037d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0308 	and.w	r3, r3, #8
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d03c      	beq.n	800387a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d01c      	beq.n	8003842 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003808:	4b68      	ldr	r3, [pc, #416]	; (80039ac <HAL_RCC_OscConfig+0x578>)
 800380a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800380e:	4a67      	ldr	r2, [pc, #412]	; (80039ac <HAL_RCC_OscConfig+0x578>)
 8003810:	f043 0301 	orr.w	r3, r3, #1
 8003814:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003818:	f7fe fc1e 	bl	8002058 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003820:	f7fe fc1a 	bl	8002058 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e220      	b.n	8003c74 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003832:	4b5e      	ldr	r3, [pc, #376]	; (80039ac <HAL_RCC_OscConfig+0x578>)
 8003834:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0ef      	beq.n	8003820 <HAL_RCC_OscConfig+0x3ec>
 8003840:	e01b      	b.n	800387a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003842:	4b5a      	ldr	r3, [pc, #360]	; (80039ac <HAL_RCC_OscConfig+0x578>)
 8003844:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003848:	4a58      	ldr	r2, [pc, #352]	; (80039ac <HAL_RCC_OscConfig+0x578>)
 800384a:	f023 0301 	bic.w	r3, r3, #1
 800384e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003852:	f7fe fc01 	bl	8002058 <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800385a:	f7fe fbfd 	bl	8002058 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e203      	b.n	8003c74 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800386c:	4b4f      	ldr	r3, [pc, #316]	; (80039ac <HAL_RCC_OscConfig+0x578>)
 800386e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1ef      	bne.n	800385a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0304 	and.w	r3, r3, #4
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 80a6 	beq.w	80039d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003888:	2300      	movs	r3, #0
 800388a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800388c:	4b47      	ldr	r3, [pc, #284]	; (80039ac <HAL_RCC_OscConfig+0x578>)
 800388e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10d      	bne.n	80038b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003898:	4b44      	ldr	r3, [pc, #272]	; (80039ac <HAL_RCC_OscConfig+0x578>)
 800389a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389c:	4a43      	ldr	r2, [pc, #268]	; (80039ac <HAL_RCC_OscConfig+0x578>)
 800389e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038a2:	6593      	str	r3, [r2, #88]	; 0x58
 80038a4:	4b41      	ldr	r3, [pc, #260]	; (80039ac <HAL_RCC_OscConfig+0x578>)
 80038a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038b0:	2301      	movs	r3, #1
 80038b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038b4:	4b3e      	ldr	r3, [pc, #248]	; (80039b0 <HAL_RCC_OscConfig+0x57c>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d118      	bne.n	80038f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038c0:	4b3b      	ldr	r3, [pc, #236]	; (80039b0 <HAL_RCC_OscConfig+0x57c>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a3a      	ldr	r2, [pc, #232]	; (80039b0 <HAL_RCC_OscConfig+0x57c>)
 80038c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038cc:	f7fe fbc4 	bl	8002058 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d4:	f7fe fbc0 	bl	8002058 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e1c6      	b.n	8003c74 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038e6:	4b32      	ldr	r3, [pc, #200]	; (80039b0 <HAL_RCC_OscConfig+0x57c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0f0      	beq.n	80038d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d108      	bne.n	800390c <HAL_RCC_OscConfig+0x4d8>
 80038fa:	4b2c      	ldr	r3, [pc, #176]	; (80039ac <HAL_RCC_OscConfig+0x578>)
 80038fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003900:	4a2a      	ldr	r2, [pc, #168]	; (80039ac <HAL_RCC_OscConfig+0x578>)
 8003902:	f043 0301 	orr.w	r3, r3, #1
 8003906:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800390a:	e024      	b.n	8003956 <HAL_RCC_OscConfig+0x522>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	2b05      	cmp	r3, #5
 8003912:	d110      	bne.n	8003936 <HAL_RCC_OscConfig+0x502>
 8003914:	4b25      	ldr	r3, [pc, #148]	; (80039ac <HAL_RCC_OscConfig+0x578>)
 8003916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391a:	4a24      	ldr	r2, [pc, #144]	; (80039ac <HAL_RCC_OscConfig+0x578>)
 800391c:	f043 0304 	orr.w	r3, r3, #4
 8003920:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003924:	4b21      	ldr	r3, [pc, #132]	; (80039ac <HAL_RCC_OscConfig+0x578>)
 8003926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392a:	4a20      	ldr	r2, [pc, #128]	; (80039ac <HAL_RCC_OscConfig+0x578>)
 800392c:	f043 0301 	orr.w	r3, r3, #1
 8003930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003934:	e00f      	b.n	8003956 <HAL_RCC_OscConfig+0x522>
 8003936:	4b1d      	ldr	r3, [pc, #116]	; (80039ac <HAL_RCC_OscConfig+0x578>)
 8003938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393c:	4a1b      	ldr	r2, [pc, #108]	; (80039ac <HAL_RCC_OscConfig+0x578>)
 800393e:	f023 0301 	bic.w	r3, r3, #1
 8003942:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003946:	4b19      	ldr	r3, [pc, #100]	; (80039ac <HAL_RCC_OscConfig+0x578>)
 8003948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394c:	4a17      	ldr	r2, [pc, #92]	; (80039ac <HAL_RCC_OscConfig+0x578>)
 800394e:	f023 0304 	bic.w	r3, r3, #4
 8003952:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d016      	beq.n	800398c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395e:	f7fe fb7b 	bl	8002058 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003964:	e00a      	b.n	800397c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003966:	f7fe fb77 	bl	8002058 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	f241 3288 	movw	r2, #5000	; 0x1388
 8003974:	4293      	cmp	r3, r2
 8003976:	d901      	bls.n	800397c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e17b      	b.n	8003c74 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800397c:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <HAL_RCC_OscConfig+0x578>)
 800397e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0ed      	beq.n	8003966 <HAL_RCC_OscConfig+0x532>
 800398a:	e01a      	b.n	80039c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398c:	f7fe fb64 	bl	8002058 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003992:	e00f      	b.n	80039b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003994:	f7fe fb60 	bl	8002058 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d906      	bls.n	80039b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e164      	b.n	8003c74 <HAL_RCC_OscConfig+0x840>
 80039aa:	bf00      	nop
 80039ac:	40021000 	.word	0x40021000
 80039b0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039b4:	4ba8      	ldr	r3, [pc, #672]	; (8003c58 <HAL_RCC_OscConfig+0x824>)
 80039b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1e8      	bne.n	8003994 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039c2:	7ffb      	ldrb	r3, [r7, #31]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d105      	bne.n	80039d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039c8:	4ba3      	ldr	r3, [pc, #652]	; (8003c58 <HAL_RCC_OscConfig+0x824>)
 80039ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039cc:	4aa2      	ldr	r2, [pc, #648]	; (8003c58 <HAL_RCC_OscConfig+0x824>)
 80039ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0320 	and.w	r3, r3, #32
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d03c      	beq.n	8003a5a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d01c      	beq.n	8003a22 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039e8:	4b9b      	ldr	r3, [pc, #620]	; (8003c58 <HAL_RCC_OscConfig+0x824>)
 80039ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039ee:	4a9a      	ldr	r2, [pc, #616]	; (8003c58 <HAL_RCC_OscConfig+0x824>)
 80039f0:	f043 0301 	orr.w	r3, r3, #1
 80039f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f8:	f7fe fb2e 	bl	8002058 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a00:	f7fe fb2a 	bl	8002058 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e130      	b.n	8003c74 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a12:	4b91      	ldr	r3, [pc, #580]	; (8003c58 <HAL_RCC_OscConfig+0x824>)
 8003a14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0ef      	beq.n	8003a00 <HAL_RCC_OscConfig+0x5cc>
 8003a20:	e01b      	b.n	8003a5a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a22:	4b8d      	ldr	r3, [pc, #564]	; (8003c58 <HAL_RCC_OscConfig+0x824>)
 8003a24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a28:	4a8b      	ldr	r2, [pc, #556]	; (8003c58 <HAL_RCC_OscConfig+0x824>)
 8003a2a:	f023 0301 	bic.w	r3, r3, #1
 8003a2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a32:	f7fe fb11 	bl	8002058 <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a38:	e008      	b.n	8003a4c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a3a:	f7fe fb0d 	bl	8002058 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e113      	b.n	8003c74 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a4c:	4b82      	ldr	r3, [pc, #520]	; (8003c58 <HAL_RCC_OscConfig+0x824>)
 8003a4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1ef      	bne.n	8003a3a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 8107 	beq.w	8003c72 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	f040 80cb 	bne.w	8003c04 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a6e:	4b7a      	ldr	r3, [pc, #488]	; (8003c58 <HAL_RCC_OscConfig+0x824>)
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f003 0203 	and.w	r2, r3, #3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d12c      	bne.n	8003adc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d123      	bne.n	8003adc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a9e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d11b      	bne.n	8003adc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d113      	bne.n	8003adc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003abe:	085b      	lsrs	r3, r3, #1
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d109      	bne.n	8003adc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	085b      	lsrs	r3, r3, #1
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d06d      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	2b0c      	cmp	r3, #12
 8003ae0:	d068      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003ae2:	4b5d      	ldr	r3, [pc, #372]	; (8003c58 <HAL_RCC_OscConfig+0x824>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d105      	bne.n	8003afa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003aee:	4b5a      	ldr	r3, [pc, #360]	; (8003c58 <HAL_RCC_OscConfig+0x824>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e0ba      	b.n	8003c74 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003afe:	4b56      	ldr	r3, [pc, #344]	; (8003c58 <HAL_RCC_OscConfig+0x824>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a55      	ldr	r2, [pc, #340]	; (8003c58 <HAL_RCC_OscConfig+0x824>)
 8003b04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b08:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b0a:	f7fe faa5 	bl	8002058 <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b12:	f7fe faa1 	bl	8002058 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e0a7      	b.n	8003c74 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b24:	4b4c      	ldr	r3, [pc, #304]	; (8003c58 <HAL_RCC_OscConfig+0x824>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1f0      	bne.n	8003b12 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b30:	4b49      	ldr	r3, [pc, #292]	; (8003c58 <HAL_RCC_OscConfig+0x824>)
 8003b32:	68da      	ldr	r2, [r3, #12]
 8003b34:	4b49      	ldr	r3, [pc, #292]	; (8003c5c <HAL_RCC_OscConfig+0x828>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b40:	3a01      	subs	r2, #1
 8003b42:	0112      	lsls	r2, r2, #4
 8003b44:	4311      	orrs	r1, r2
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b4a:	0212      	lsls	r2, r2, #8
 8003b4c:	4311      	orrs	r1, r2
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b52:	0852      	lsrs	r2, r2, #1
 8003b54:	3a01      	subs	r2, #1
 8003b56:	0552      	lsls	r2, r2, #21
 8003b58:	4311      	orrs	r1, r2
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b5e:	0852      	lsrs	r2, r2, #1
 8003b60:	3a01      	subs	r2, #1
 8003b62:	0652      	lsls	r2, r2, #25
 8003b64:	4311      	orrs	r1, r2
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b6a:	06d2      	lsls	r2, r2, #27
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	493a      	ldr	r1, [pc, #232]	; (8003c58 <HAL_RCC_OscConfig+0x824>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b74:	4b38      	ldr	r3, [pc, #224]	; (8003c58 <HAL_RCC_OscConfig+0x824>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a37      	ldr	r2, [pc, #220]	; (8003c58 <HAL_RCC_OscConfig+0x824>)
 8003b7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b7e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b80:	4b35      	ldr	r3, [pc, #212]	; (8003c58 <HAL_RCC_OscConfig+0x824>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	4a34      	ldr	r2, [pc, #208]	; (8003c58 <HAL_RCC_OscConfig+0x824>)
 8003b86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b8a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b8c:	f7fe fa64 	bl	8002058 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b94:	f7fe fa60 	bl	8002058 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e066      	b.n	8003c74 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ba6:	4b2c      	ldr	r3, [pc, #176]	; (8003c58 <HAL_RCC_OscConfig+0x824>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0f0      	beq.n	8003b94 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bb2:	e05e      	b.n	8003c72 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e05d      	b.n	8003c74 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bb8:	4b27      	ldr	r3, [pc, #156]	; (8003c58 <HAL_RCC_OscConfig+0x824>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d156      	bne.n	8003c72 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003bc4:	4b24      	ldr	r3, [pc, #144]	; (8003c58 <HAL_RCC_OscConfig+0x824>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a23      	ldr	r2, [pc, #140]	; (8003c58 <HAL_RCC_OscConfig+0x824>)
 8003bca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bd0:	4b21      	ldr	r3, [pc, #132]	; (8003c58 <HAL_RCC_OscConfig+0x824>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	4a20      	ldr	r2, [pc, #128]	; (8003c58 <HAL_RCC_OscConfig+0x824>)
 8003bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bda:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bdc:	f7fe fa3c 	bl	8002058 <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be4:	f7fe fa38 	bl	8002058 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e03e      	b.n	8003c74 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bf6:	4b18      	ldr	r3, [pc, #96]	; (8003c58 <HAL_RCC_OscConfig+0x824>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0f0      	beq.n	8003be4 <HAL_RCC_OscConfig+0x7b0>
 8003c02:	e036      	b.n	8003c72 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	2b0c      	cmp	r3, #12
 8003c08:	d031      	beq.n	8003c6e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c0a:	4b13      	ldr	r3, [pc, #76]	; (8003c58 <HAL_RCC_OscConfig+0x824>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a12      	ldr	r2, [pc, #72]	; (8003c58 <HAL_RCC_OscConfig+0x824>)
 8003c10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c14:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003c16:	4b10      	ldr	r3, [pc, #64]	; (8003c58 <HAL_RCC_OscConfig+0x824>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d105      	bne.n	8003c2e <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003c22:	4b0d      	ldr	r3, [pc, #52]	; (8003c58 <HAL_RCC_OscConfig+0x824>)
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	4a0c      	ldr	r2, [pc, #48]	; (8003c58 <HAL_RCC_OscConfig+0x824>)
 8003c28:	f023 0303 	bic.w	r3, r3, #3
 8003c2c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003c2e:	4b0a      	ldr	r3, [pc, #40]	; (8003c58 <HAL_RCC_OscConfig+0x824>)
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	4a09      	ldr	r2, [pc, #36]	; (8003c58 <HAL_RCC_OscConfig+0x824>)
 8003c34:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c3c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3e:	f7fe fa0b 	bl	8002058 <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c44:	e00c      	b.n	8003c60 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c46:	f7fe fa07 	bl	8002058 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d905      	bls.n	8003c60 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e00d      	b.n	8003c74 <HAL_RCC_OscConfig+0x840>
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c60:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <HAL_RCC_OscConfig+0x848>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1ec      	bne.n	8003c46 <HAL_RCC_OscConfig+0x812>
 8003c6c:	e001      	b.n	8003c72 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e000      	b.n	8003c74 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3720      	adds	r7, #32
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40021000 	.word	0x40021000

08003c80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e10f      	b.n	8003eb8 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c98:	4b89      	ldr	r3, [pc, #548]	; (8003ec0 <HAL_RCC_ClockConfig+0x240>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 030f 	and.w	r3, r3, #15
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d910      	bls.n	8003cc8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca6:	4b86      	ldr	r3, [pc, #536]	; (8003ec0 <HAL_RCC_ClockConfig+0x240>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f023 020f 	bic.w	r2, r3, #15
 8003cae:	4984      	ldr	r1, [pc, #528]	; (8003ec0 <HAL_RCC_ClockConfig+0x240>)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb6:	4b82      	ldr	r3, [pc, #520]	; (8003ec0 <HAL_RCC_ClockConfig+0x240>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d001      	beq.n	8003cc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e0f7      	b.n	8003eb8 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 8089 	beq.w	8003de8 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b03      	cmp	r3, #3
 8003cdc:	d133      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cde:	4b79      	ldr	r3, [pc, #484]	; (8003ec4 <HAL_RCC_ClockConfig+0x244>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e0e4      	b.n	8003eb8 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003cee:	f000 fa43 	bl	8004178 <RCC_GetSysClockFreqFromPLLSource>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	4a74      	ldr	r2, [pc, #464]	; (8003ec8 <HAL_RCC_ClockConfig+0x248>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d955      	bls.n	8003da6 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003cfa:	4b72      	ldr	r3, [pc, #456]	; (8003ec4 <HAL_RCC_ClockConfig+0x244>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10a      	bne.n	8003d1c <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d06:	4b6f      	ldr	r3, [pc, #444]	; (8003ec4 <HAL_RCC_ClockConfig+0x244>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d0e:	4a6d      	ldr	r2, [pc, #436]	; (8003ec4 <HAL_RCC_ClockConfig+0x244>)
 8003d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d14:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003d16:	2380      	movs	r3, #128	; 0x80
 8003d18:	617b      	str	r3, [r7, #20]
 8003d1a:	e044      	b.n	8003da6 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d03e      	beq.n	8003da6 <HAL_RCC_ClockConfig+0x126>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d13a      	bne.n	8003da6 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d30:	4b64      	ldr	r3, [pc, #400]	; (8003ec4 <HAL_RCC_ClockConfig+0x244>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d38:	4a62      	ldr	r2, [pc, #392]	; (8003ec4 <HAL_RCC_ClockConfig+0x244>)
 8003d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d3e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003d40:	2380      	movs	r3, #128	; 0x80
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	e02f      	b.n	8003da6 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d107      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d4e:	4b5d      	ldr	r3, [pc, #372]	; (8003ec4 <HAL_RCC_ClockConfig+0x244>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d115      	bne.n	8003d86 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e0ac      	b.n	8003eb8 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d107      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d66:	4b57      	ldr	r3, [pc, #348]	; (8003ec4 <HAL_RCC_ClockConfig+0x244>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d109      	bne.n	8003d86 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e0a0      	b.n	8003eb8 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d76:	4b53      	ldr	r3, [pc, #332]	; (8003ec4 <HAL_RCC_ClockConfig+0x244>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e098      	b.n	8003eb8 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003d86:	f000 f8a7 	bl	8003ed8 <HAL_RCC_GetSysClockFreq>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	4a4e      	ldr	r2, [pc, #312]	; (8003ec8 <HAL_RCC_ClockConfig+0x248>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d909      	bls.n	8003da6 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d92:	4b4c      	ldr	r3, [pc, #304]	; (8003ec4 <HAL_RCC_ClockConfig+0x244>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d9a:	4a4a      	ldr	r2, [pc, #296]	; (8003ec4 <HAL_RCC_ClockConfig+0x244>)
 8003d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003da0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003da2:	2380      	movs	r3, #128	; 0x80
 8003da4:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003da6:	4b47      	ldr	r3, [pc, #284]	; (8003ec4 <HAL_RCC_ClockConfig+0x244>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f023 0203 	bic.w	r2, r3, #3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	4944      	ldr	r1, [pc, #272]	; (8003ec4 <HAL_RCC_ClockConfig+0x244>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003db8:	f7fe f94e 	bl	8002058 <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dbe:	e00a      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc0:	f7fe f94a 	bl	8002058 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e070      	b.n	8003eb8 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd6:	4b3b      	ldr	r3, [pc, #236]	; (8003ec4 <HAL_RCC_ClockConfig+0x244>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 020c 	and.w	r2, r3, #12
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d1eb      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d009      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003df4:	4b33      	ldr	r3, [pc, #204]	; (8003ec4 <HAL_RCC_ClockConfig+0x244>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	4930      	ldr	r1, [pc, #192]	; (8003ec4 <HAL_RCC_ClockConfig+0x244>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	608b      	str	r3, [r1, #8]
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	2b80      	cmp	r3, #128	; 0x80
 8003e0c:	d105      	bne.n	8003e1a <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003e0e:	4b2d      	ldr	r3, [pc, #180]	; (8003ec4 <HAL_RCC_ClockConfig+0x244>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	4a2c      	ldr	r2, [pc, #176]	; (8003ec4 <HAL_RCC_ClockConfig+0x244>)
 8003e14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e18:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e1a:	4b29      	ldr	r3, [pc, #164]	; (8003ec0 <HAL_RCC_ClockConfig+0x240>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 030f 	and.w	r3, r3, #15
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d210      	bcs.n	8003e4a <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e28:	4b25      	ldr	r3, [pc, #148]	; (8003ec0 <HAL_RCC_ClockConfig+0x240>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f023 020f 	bic.w	r2, r3, #15
 8003e30:	4923      	ldr	r1, [pc, #140]	; (8003ec0 <HAL_RCC_ClockConfig+0x240>)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e38:	4b21      	ldr	r3, [pc, #132]	; (8003ec0 <HAL_RCC_ClockConfig+0x240>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 030f 	and.w	r3, r3, #15
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d001      	beq.n	8003e4a <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e036      	b.n	8003eb8 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0304 	and.w	r3, r3, #4
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d008      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e56:	4b1b      	ldr	r3, [pc, #108]	; (8003ec4 <HAL_RCC_ClockConfig+0x244>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	4918      	ldr	r1, [pc, #96]	; (8003ec4 <HAL_RCC_ClockConfig+0x244>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0308 	and.w	r3, r3, #8
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d009      	beq.n	8003e88 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e74:	4b13      	ldr	r3, [pc, #76]	; (8003ec4 <HAL_RCC_ClockConfig+0x244>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	4910      	ldr	r1, [pc, #64]	; (8003ec4 <HAL_RCC_ClockConfig+0x244>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e88:	f000 f826 	bl	8003ed8 <HAL_RCC_GetSysClockFreq>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	4b0d      	ldr	r3, [pc, #52]	; (8003ec4 <HAL_RCC_ClockConfig+0x244>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	091b      	lsrs	r3, r3, #4
 8003e94:	f003 030f 	and.w	r3, r3, #15
 8003e98:	490c      	ldr	r1, [pc, #48]	; (8003ecc <HAL_RCC_ClockConfig+0x24c>)
 8003e9a:	5ccb      	ldrb	r3, [r1, r3]
 8003e9c:	f003 031f 	and.w	r3, r3, #31
 8003ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea4:	4a0a      	ldr	r2, [pc, #40]	; (8003ed0 <HAL_RCC_ClockConfig+0x250>)
 8003ea6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ea8:	4b0a      	ldr	r3, [pc, #40]	; (8003ed4 <HAL_RCC_ClockConfig+0x254>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7fd fef9 	bl	8001ca4 <HAL_InitTick>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	73fb      	strb	r3, [r7, #15]

  return status;
 8003eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3718      	adds	r7, #24
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40022000 	.word	0x40022000
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	04c4b400 	.word	0x04c4b400
 8003ecc:	08008c3c 	.word	0x08008c3c
 8003ed0:	20000028 	.word	0x20000028
 8003ed4:	2000002c 	.word	0x2000002c

08003ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b089      	sub	sp, #36	; 0x24
 8003edc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61fb      	str	r3, [r7, #28]
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ee6:	4b3e      	ldr	r3, [pc, #248]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 030c 	and.w	r3, r3, #12
 8003eee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ef0:	4b3b      	ldr	r3, [pc, #236]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f003 0303 	and.w	r3, r3, #3
 8003ef8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d005      	beq.n	8003f0c <HAL_RCC_GetSysClockFreq+0x34>
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	2b0c      	cmp	r3, #12
 8003f04:	d121      	bne.n	8003f4a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d11e      	bne.n	8003f4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f0c:	4b34      	ldr	r3, [pc, #208]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0308 	and.w	r3, r3, #8
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d107      	bne.n	8003f28 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f18:	4b31      	ldr	r3, [pc, #196]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f1e:	0a1b      	lsrs	r3, r3, #8
 8003f20:	f003 030f 	and.w	r3, r3, #15
 8003f24:	61fb      	str	r3, [r7, #28]
 8003f26:	e005      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f28:	4b2d      	ldr	r3, [pc, #180]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	091b      	lsrs	r3, r3, #4
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f34:	4a2b      	ldr	r2, [pc, #172]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f3c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10d      	bne.n	8003f60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f48:	e00a      	b.n	8003f60 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	2b04      	cmp	r3, #4
 8003f4e:	d102      	bne.n	8003f56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f50:	4b25      	ldr	r3, [pc, #148]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f52:	61bb      	str	r3, [r7, #24]
 8003f54:	e004      	b.n	8003f60 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	2b08      	cmp	r3, #8
 8003f5a:	d101      	bne.n	8003f60 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f5c:	4b23      	ldr	r3, [pc, #140]	; (8003fec <HAL_RCC_GetSysClockFreq+0x114>)
 8003f5e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	2b0c      	cmp	r3, #12
 8003f64:	d134      	bne.n	8003fd0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f66:	4b1e      	ldr	r3, [pc, #120]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d003      	beq.n	8003f7e <HAL_RCC_GetSysClockFreq+0xa6>
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	2b03      	cmp	r3, #3
 8003f7a:	d003      	beq.n	8003f84 <HAL_RCC_GetSysClockFreq+0xac>
 8003f7c:	e005      	b.n	8003f8a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f7e:	4b1a      	ldr	r3, [pc, #104]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f80:	617b      	str	r3, [r7, #20]
      break;
 8003f82:	e005      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f84:	4b19      	ldr	r3, [pc, #100]	; (8003fec <HAL_RCC_GetSysClockFreq+0x114>)
 8003f86:	617b      	str	r3, [r7, #20]
      break;
 8003f88:	e002      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	617b      	str	r3, [r7, #20]
      break;
 8003f8e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f90:	4b13      	ldr	r3, [pc, #76]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	091b      	lsrs	r3, r3, #4
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f9e:	4b10      	ldr	r3, [pc, #64]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	0a1b      	lsrs	r3, r3, #8
 8003fa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	fb02 f203 	mul.w	r2, r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fb6:	4b0a      	ldr	r3, [pc, #40]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	0e5b      	lsrs	r3, r3, #25
 8003fbc:	f003 0303 	and.w	r3, r3, #3
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003fd0:	69bb      	ldr	r3, [r7, #24]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3724      	adds	r7, #36	; 0x24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	08008c54 	.word	0x08008c54
 8003fe8:	00f42400 	.word	0x00f42400
 8003fec:	007a1200 	.word	0x007a1200

08003ff0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ff4:	4b03      	ldr	r3, [pc, #12]	; (8004004 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	20000028 	.word	0x20000028

08004008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800400c:	f7ff fff0 	bl	8003ff0 <HAL_RCC_GetHCLKFreq>
 8004010:	4602      	mov	r2, r0
 8004012:	4b06      	ldr	r3, [pc, #24]	; (800402c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	0a1b      	lsrs	r3, r3, #8
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	4904      	ldr	r1, [pc, #16]	; (8004030 <HAL_RCC_GetPCLK1Freq+0x28>)
 800401e:	5ccb      	ldrb	r3, [r1, r3]
 8004020:	f003 031f 	and.w	r3, r3, #31
 8004024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004028:	4618      	mov	r0, r3
 800402a:	bd80      	pop	{r7, pc}
 800402c:	40021000 	.word	0x40021000
 8004030:	08008c4c 	.word	0x08008c4c

08004034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004038:	f7ff ffda 	bl	8003ff0 <HAL_RCC_GetHCLKFreq>
 800403c:	4602      	mov	r2, r0
 800403e:	4b06      	ldr	r3, [pc, #24]	; (8004058 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	0adb      	lsrs	r3, r3, #11
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	4904      	ldr	r1, [pc, #16]	; (800405c <HAL_RCC_GetPCLK2Freq+0x28>)
 800404a:	5ccb      	ldrb	r3, [r1, r3]
 800404c:	f003 031f 	and.w	r3, r3, #31
 8004050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004054:	4618      	mov	r0, r3
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40021000 	.word	0x40021000
 800405c:	08008c4c 	.word	0x08008c4c

08004060 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	220f      	movs	r2, #15
 800406e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004070:	4b12      	ldr	r3, [pc, #72]	; (80040bc <HAL_RCC_GetClockConfig+0x5c>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f003 0203 	and.w	r2, r3, #3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800407c:	4b0f      	ldr	r3, [pc, #60]	; (80040bc <HAL_RCC_GetClockConfig+0x5c>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004088:	4b0c      	ldr	r3, [pc, #48]	; (80040bc <HAL_RCC_GetClockConfig+0x5c>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004094:	4b09      	ldr	r3, [pc, #36]	; (80040bc <HAL_RCC_GetClockConfig+0x5c>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	08db      	lsrs	r3, r3, #3
 800409a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80040a2:	4b07      	ldr	r3, [pc, #28]	; (80040c0 <HAL_RCC_GetClockConfig+0x60>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 020f 	and.w	r2, r3, #15
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	601a      	str	r2, [r3, #0]
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40021000 	.word	0x40021000
 80040c0:	40022000 	.word	0x40022000

080040c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80040cc:	2300      	movs	r3, #0
 80040ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80040d0:	4b27      	ldr	r3, [pc, #156]	; (8004170 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80040d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80040dc:	f7ff f8e6 	bl	80032ac <HAL_PWREx_GetVoltageRange>
 80040e0:	6178      	str	r0, [r7, #20]
 80040e2:	e014      	b.n	800410e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040e4:	4b22      	ldr	r3, [pc, #136]	; (8004170 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80040e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e8:	4a21      	ldr	r2, [pc, #132]	; (8004170 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80040ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ee:	6593      	str	r3, [r2, #88]	; 0x58
 80040f0:	4b1f      	ldr	r3, [pc, #124]	; (8004170 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80040f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80040fc:	f7ff f8d6 	bl	80032ac <HAL_PWREx_GetVoltageRange>
 8004100:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004102:	4b1b      	ldr	r3, [pc, #108]	; (8004170 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004106:	4a1a      	ldr	r2, [pc, #104]	; (8004170 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800410c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004114:	d10b      	bne.n	800412e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b80      	cmp	r3, #128	; 0x80
 800411a:	d913      	bls.n	8004144 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2ba0      	cmp	r3, #160	; 0xa0
 8004120:	d902      	bls.n	8004128 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004122:	2302      	movs	r3, #2
 8004124:	613b      	str	r3, [r7, #16]
 8004126:	e00d      	b.n	8004144 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004128:	2301      	movs	r3, #1
 800412a:	613b      	str	r3, [r7, #16]
 800412c:	e00a      	b.n	8004144 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b7f      	cmp	r3, #127	; 0x7f
 8004132:	d902      	bls.n	800413a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004134:	2302      	movs	r3, #2
 8004136:	613b      	str	r3, [r7, #16]
 8004138:	e004      	b.n	8004144 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b70      	cmp	r3, #112	; 0x70
 800413e:	d101      	bne.n	8004144 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004140:	2301      	movs	r3, #1
 8004142:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004144:	4b0b      	ldr	r3, [pc, #44]	; (8004174 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f023 020f 	bic.w	r2, r3, #15
 800414c:	4909      	ldr	r1, [pc, #36]	; (8004174 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004154:	4b07      	ldr	r3, [pc, #28]	; (8004174 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 030f 	and.w	r3, r3, #15
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	429a      	cmp	r2, r3
 8004160:	d001      	beq.n	8004166 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e000      	b.n	8004168 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3718      	adds	r7, #24
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40021000 	.word	0x40021000
 8004174:	40022000 	.word	0x40022000

08004178 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004178:	b480      	push	{r7}
 800417a:	b087      	sub	sp, #28
 800417c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800417e:	2300      	movs	r3, #0
 8004180:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8004182:	4b2d      	ldr	r3, [pc, #180]	; (8004238 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	2b01      	cmp	r3, #1
 800418c:	d118      	bne.n	80041c0 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800418e:	4b2a      	ldr	r3, [pc, #168]	; (8004238 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0308 	and.w	r3, r3, #8
 8004196:	2b00      	cmp	r3, #0
 8004198:	d107      	bne.n	80041aa <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800419a:	4b27      	ldr	r3, [pc, #156]	; (8004238 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800419c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041a0:	0a1b      	lsrs	r3, r3, #8
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	e005      	b.n	80041b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041aa:	4b23      	ldr	r3, [pc, #140]	; (8004238 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	091b      	lsrs	r3, r3, #4
 80041b0:	f003 030f 	and.w	r3, r3, #15
 80041b4:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80041b6:	4a21      	ldr	r2, [pc, #132]	; (800423c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041be:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041c0:	4b1d      	ldr	r3, [pc, #116]	; (8004238 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f003 0303 	and.w	r3, r3, #3
 80041c8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d003      	beq.n	80041d8 <RCC_GetSysClockFreqFromPLLSource+0x60>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	d003      	beq.n	80041de <RCC_GetSysClockFreqFromPLLSource+0x66>
 80041d6:	e005      	b.n	80041e4 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80041d8:	4b19      	ldr	r3, [pc, #100]	; (8004240 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80041da:	613b      	str	r3, [r7, #16]
    break;
 80041dc:	e005      	b.n	80041ea <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80041de:	4b19      	ldr	r3, [pc, #100]	; (8004244 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80041e0:	613b      	str	r3, [r7, #16]
    break;
 80041e2:	e002      	b.n	80041ea <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	613b      	str	r3, [r7, #16]
    break;
 80041e8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041ea:	4b13      	ldr	r3, [pc, #76]	; (8004238 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	091b      	lsrs	r3, r3, #4
 80041f0:	f003 030f 	and.w	r3, r3, #15
 80041f4:	3301      	adds	r3, #1
 80041f6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80041f8:	4b0f      	ldr	r3, [pc, #60]	; (8004238 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	0a1b      	lsrs	r3, r3, #8
 80041fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	fb02 f203 	mul.w	r2, r2, r3
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	fbb2 f3f3 	udiv	r3, r2, r3
 800420e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004210:	4b09      	ldr	r3, [pc, #36]	; (8004238 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	0e5b      	lsrs	r3, r3, #25
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	3301      	adds	r3, #1
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	fbb2 f3f3 	udiv	r3, r2, r3
 8004228:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800422a:	683b      	ldr	r3, [r7, #0]
}
 800422c:	4618      	mov	r0, r3
 800422e:	371c      	adds	r7, #28
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	40021000 	.word	0x40021000
 800423c:	08008c54 	.word	0x08008c54
 8004240:	00f42400 	.word	0x00f42400
 8004244:	007a1200 	.word	0x007a1200

08004248 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004250:	2300      	movs	r3, #0
 8004252:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004254:	2300      	movs	r3, #0
 8004256:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004260:	2b00      	cmp	r3, #0
 8004262:	d040      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004268:	2b80      	cmp	r3, #128	; 0x80
 800426a:	d02a      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800426c:	2b80      	cmp	r3, #128	; 0x80
 800426e:	d825      	bhi.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004270:	2b60      	cmp	r3, #96	; 0x60
 8004272:	d026      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004274:	2b60      	cmp	r3, #96	; 0x60
 8004276:	d821      	bhi.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004278:	2b40      	cmp	r3, #64	; 0x40
 800427a:	d006      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800427c:	2b40      	cmp	r3, #64	; 0x40
 800427e:	d81d      	bhi.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004280:	2b00      	cmp	r3, #0
 8004282:	d009      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004284:	2b20      	cmp	r3, #32
 8004286:	d010      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004288:	e018      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800428a:	4b89      	ldr	r3, [pc, #548]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	4a88      	ldr	r2, [pc, #544]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004294:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004296:	e015      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3304      	adds	r3, #4
 800429c:	2100      	movs	r1, #0
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 fb02 	bl	80048a8 <RCCEx_PLLSAI1_Config>
 80042a4:	4603      	mov	r3, r0
 80042a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042a8:	e00c      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	3320      	adds	r3, #32
 80042ae:	2100      	movs	r1, #0
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 fbed 	bl	8004a90 <RCCEx_PLLSAI2_Config>
 80042b6:	4603      	mov	r3, r0
 80042b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042ba:	e003      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	74fb      	strb	r3, [r7, #19]
      break;
 80042c0:	e000      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80042c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042c4:	7cfb      	ldrb	r3, [r7, #19]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10b      	bne.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042ca:	4b79      	ldr	r3, [pc, #484]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042d0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042d8:	4975      	ldr	r1, [pc, #468]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80042e0:	e001      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e2:	7cfb      	ldrb	r3, [r7, #19]
 80042e4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d047      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042fa:	d030      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80042fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004300:	d82a      	bhi.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004302:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004306:	d02a      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004308:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800430c:	d824      	bhi.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800430e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004312:	d008      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004318:	d81e      	bhi.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00a      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800431e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004322:	d010      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004324:	e018      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004326:	4b62      	ldr	r3, [pc, #392]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	4a61      	ldr	r2, [pc, #388]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800432c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004330:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004332:	e015      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3304      	adds	r3, #4
 8004338:	2100      	movs	r1, #0
 800433a:	4618      	mov	r0, r3
 800433c:	f000 fab4 	bl	80048a8 <RCCEx_PLLSAI1_Config>
 8004340:	4603      	mov	r3, r0
 8004342:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004344:	e00c      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	3320      	adds	r3, #32
 800434a:	2100      	movs	r1, #0
 800434c:	4618      	mov	r0, r3
 800434e:	f000 fb9f 	bl	8004a90 <RCCEx_PLLSAI2_Config>
 8004352:	4603      	mov	r3, r0
 8004354:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004356:	e003      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	74fb      	strb	r3, [r7, #19]
      break;
 800435c:	e000      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800435e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004360:	7cfb      	ldrb	r3, [r7, #19]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10b      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004366:	4b52      	ldr	r3, [pc, #328]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004368:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800436c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004374:	494e      	ldr	r1, [pc, #312]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800437c:	e001      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800437e:	7cfb      	ldrb	r3, [r7, #19]
 8004380:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438a:	2b00      	cmp	r3, #0
 800438c:	f000 809f 	beq.w	80044ce <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004390:	2300      	movs	r3, #0
 8004392:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004394:	4b46      	ldr	r3, [pc, #280]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80043a0:	2301      	movs	r3, #1
 80043a2:	e000      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80043a4:	2300      	movs	r3, #0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00d      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043aa:	4b41      	ldr	r3, [pc, #260]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ae:	4a40      	ldr	r2, [pc, #256]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043b4:	6593      	str	r3, [r2, #88]	; 0x58
 80043b6:	4b3e      	ldr	r3, [pc, #248]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043be:	60bb      	str	r3, [r7, #8]
 80043c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043c2:	2301      	movs	r3, #1
 80043c4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043c6:	4b3b      	ldr	r3, [pc, #236]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a3a      	ldr	r2, [pc, #232]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80043cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043d2:	f7fd fe41 	bl	8002058 <HAL_GetTick>
 80043d6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043d8:	e009      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043da:	f7fd fe3d 	bl	8002058 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d902      	bls.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	74fb      	strb	r3, [r7, #19]
        break;
 80043ec:	e005      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043ee:	4b31      	ldr	r3, [pc, #196]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0ef      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80043fa:	7cfb      	ldrb	r3, [r7, #19]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d15b      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004400:	4b2b      	ldr	r3, [pc, #172]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800440a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d01f      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	429a      	cmp	r2, r3
 800441c:	d019      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800441e:	4b24      	ldr	r3, [pc, #144]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004428:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800442a:	4b21      	ldr	r3, [pc, #132]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800442c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004430:	4a1f      	ldr	r2, [pc, #124]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004436:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800443a:	4b1d      	ldr	r3, [pc, #116]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800443c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004440:	4a1b      	ldr	r2, [pc, #108]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004446:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800444a:	4a19      	ldr	r2, [pc, #100]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d016      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445c:	f7fd fdfc 	bl	8002058 <HAL_GetTick>
 8004460:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004462:	e00b      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004464:	f7fd fdf8 	bl	8002058 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004472:	4293      	cmp	r3, r2
 8004474:	d902      	bls.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	74fb      	strb	r3, [r7, #19]
            break;
 800447a:	e006      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800447c:	4b0c      	ldr	r3, [pc, #48]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0ec      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800448a:	7cfb      	ldrb	r3, [r7, #19]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10c      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004490:	4b07      	ldr	r3, [pc, #28]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004496:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a0:	4903      	ldr	r1, [pc, #12]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80044a8:	e008      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044aa:	7cfb      	ldrb	r3, [r7, #19]
 80044ac:	74bb      	strb	r3, [r7, #18]
 80044ae:	e005      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x274>
 80044b0:	40021000 	.word	0x40021000
 80044b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b8:	7cfb      	ldrb	r3, [r7, #19]
 80044ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044bc:	7c7b      	ldrb	r3, [r7, #17]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d105      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044c2:	4ba0      	ldr	r3, [pc, #640]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c6:	4a9f      	ldr	r2, [pc, #636]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044da:	4b9a      	ldr	r3, [pc, #616]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e0:	f023 0203 	bic.w	r2, r3, #3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e8:	4996      	ldr	r1, [pc, #600]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00a      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044fc:	4b91      	ldr	r3, [pc, #580]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004502:	f023 020c 	bic.w	r2, r3, #12
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	498e      	ldr	r1, [pc, #568]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800450c:	4313      	orrs	r3, r2
 800450e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0304 	and.w	r3, r3, #4
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00a      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800451e:	4b89      	ldr	r3, [pc, #548]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004524:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452c:	4985      	ldr	r1, [pc, #532]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800452e:	4313      	orrs	r3, r2
 8004530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0308 	and.w	r3, r3, #8
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00a      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004540:	4b80      	ldr	r3, [pc, #512]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004546:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800454e:	497d      	ldr	r1, [pc, #500]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004550:	4313      	orrs	r3, r2
 8004552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0310 	and.w	r3, r3, #16
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004562:	4b78      	ldr	r3, [pc, #480]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004568:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004570:	4974      	ldr	r1, [pc, #464]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004572:	4313      	orrs	r3, r2
 8004574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0320 	and.w	r3, r3, #32
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00a      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004584:	4b6f      	ldr	r3, [pc, #444]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004592:	496c      	ldr	r1, [pc, #432]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004594:	4313      	orrs	r3, r2
 8004596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045a6:	4b67      	ldr	r3, [pc, #412]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045b4:	4963      	ldr	r1, [pc, #396]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00a      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045c8:	4b5e      	ldr	r3, [pc, #376]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045d6:	495b      	ldr	r1, [pc, #364]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00a      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045ea:	4b56      	ldr	r3, [pc, #344]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f8:	4952      	ldr	r1, [pc, #328]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00a      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800460c:	4b4d      	ldr	r3, [pc, #308]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800460e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004612:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461a:	494a      	ldr	r1, [pc, #296]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800461c:	4313      	orrs	r3, r2
 800461e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800462e:	4b45      	ldr	r3, [pc, #276]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004634:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800463c:	4941      	ldr	r1, [pc, #260]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800463e:	4313      	orrs	r3, r2
 8004640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00a      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004650:	4b3c      	ldr	r3, [pc, #240]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004652:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004656:	f023 0203 	bic.w	r2, r3, #3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800465e:	4939      	ldr	r1, [pc, #228]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004660:	4313      	orrs	r3, r2
 8004662:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d028      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004672:	4b34      	ldr	r3, [pc, #208]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004678:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004680:	4930      	ldr	r1, [pc, #192]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004682:	4313      	orrs	r3, r2
 8004684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800468c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004690:	d106      	bne.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004692:	4b2c      	ldr	r3, [pc, #176]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	4a2b      	ldr	r2, [pc, #172]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004698:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800469c:	60d3      	str	r3, [r2, #12]
 800469e:	e011      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046a8:	d10c      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	3304      	adds	r3, #4
 80046ae:	2101      	movs	r1, #1
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 f8f9 	bl	80048a8 <RCCEx_PLLSAI1_Config>
 80046b6:	4603      	mov	r3, r0
 80046b8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046ba:	7cfb      	ldrb	r3, [r7, #19]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80046c0:	7cfb      	ldrb	r3, [r7, #19]
 80046c2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d04d      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046d8:	d108      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80046da:	4b1a      	ldr	r3, [pc, #104]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046e0:	4a18      	ldr	r2, [pc, #96]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046e6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80046ea:	e012      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80046ec:	4b15      	ldr	r3, [pc, #84]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046f2:	4a14      	ldr	r2, [pc, #80]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046f8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80046fc:	4b11      	ldr	r3, [pc, #68]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004702:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800470a:	490e      	ldr	r1, [pc, #56]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800470c:	4313      	orrs	r3, r2
 800470e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004716:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800471a:	d106      	bne.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800471c:	4b09      	ldr	r3, [pc, #36]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	4a08      	ldr	r2, [pc, #32]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004722:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004726:	60d3      	str	r3, [r2, #12]
 8004728:	e020      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800472e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004732:	d109      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004734:	4b03      	ldr	r3, [pc, #12]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	4a02      	ldr	r2, [pc, #8]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800473a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800473e:	60d3      	str	r3, [r2, #12]
 8004740:	e014      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004742:	bf00      	nop
 8004744:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800474c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004750:	d10c      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	3304      	adds	r3, #4
 8004756:	2101      	movs	r1, #1
 8004758:	4618      	mov	r0, r3
 800475a:	f000 f8a5 	bl	80048a8 <RCCEx_PLLSAI1_Config>
 800475e:	4603      	mov	r3, r0
 8004760:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004762:	7cfb      	ldrb	r3, [r7, #19]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004768:	7cfb      	ldrb	r3, [r7, #19]
 800476a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d028      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004778:	4b4a      	ldr	r3, [pc, #296]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800477a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004786:	4947      	ldr	r1, [pc, #284]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004788:	4313      	orrs	r3, r2
 800478a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004792:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004796:	d106      	bne.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004798:	4b42      	ldr	r3, [pc, #264]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	4a41      	ldr	r2, [pc, #260]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800479e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047a2:	60d3      	str	r3, [r2, #12]
 80047a4:	e011      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047ae:	d10c      	bne.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3304      	adds	r3, #4
 80047b4:	2101      	movs	r1, #1
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 f876 	bl	80048a8 <RCCEx_PLLSAI1_Config>
 80047bc:	4603      	mov	r3, r0
 80047be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047c0:	7cfb      	ldrb	r3, [r7, #19]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80047c6:	7cfb      	ldrb	r3, [r7, #19]
 80047c8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d01e      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047d6:	4b33      	ldr	r3, [pc, #204]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047dc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047e6:	492f      	ldr	r1, [pc, #188]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047f8:	d10c      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	3304      	adds	r3, #4
 80047fe:	2102      	movs	r1, #2
 8004800:	4618      	mov	r0, r3
 8004802:	f000 f851 	bl	80048a8 <RCCEx_PLLSAI1_Config>
 8004806:	4603      	mov	r3, r0
 8004808:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800480a:	7cfb      	ldrb	r3, [r7, #19]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004810:	7cfb      	ldrb	r3, [r7, #19]
 8004812:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00b      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004820:	4b20      	ldr	r3, [pc, #128]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004822:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004826:	f023 0204 	bic.w	r2, r3, #4
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004830:	491c      	ldr	r1, [pc, #112]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004832:	4313      	orrs	r3, r2
 8004834:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00b      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004844:	4b17      	ldr	r3, [pc, #92]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004846:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800484a:	f023 0218 	bic.w	r2, r3, #24
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004854:	4913      	ldr	r1, [pc, #76]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004856:	4313      	orrs	r3, r2
 8004858:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d017      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004868:	4b0e      	ldr	r3, [pc, #56]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800486a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800486e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004878:	490a      	ldr	r1, [pc, #40]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800487a:	4313      	orrs	r3, r2
 800487c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004886:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800488a:	d105      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800488c:	4b05      	ldr	r3, [pc, #20]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	4a04      	ldr	r2, [pc, #16]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004892:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004896:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004898:	7cbb      	ldrb	r3, [r7, #18]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3718      	adds	r7, #24
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40021000 	.word	0x40021000

080048a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048b2:	2300      	movs	r3, #0
 80048b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048b6:	4b72      	ldr	r3, [pc, #456]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	f003 0303 	and.w	r3, r3, #3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00e      	beq.n	80048e0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80048c2:	4b6f      	ldr	r3, [pc, #444]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f003 0203 	and.w	r2, r3, #3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d103      	bne.n	80048da <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
       ||
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d142      	bne.n	8004960 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	73fb      	strb	r3, [r7, #15]
 80048de:	e03f      	b.n	8004960 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b03      	cmp	r3, #3
 80048e6:	d018      	beq.n	800491a <RCCEx_PLLSAI1_Config+0x72>
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d825      	bhi.n	8004938 <RCCEx_PLLSAI1_Config+0x90>
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d002      	beq.n	80048f6 <RCCEx_PLLSAI1_Config+0x4e>
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d009      	beq.n	8004908 <RCCEx_PLLSAI1_Config+0x60>
 80048f4:	e020      	b.n	8004938 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048f6:	4b62      	ldr	r3, [pc, #392]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d11d      	bne.n	800493e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004906:	e01a      	b.n	800493e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004908:	4b5d      	ldr	r3, [pc, #372]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1d8>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004910:	2b00      	cmp	r3, #0
 8004912:	d116      	bne.n	8004942 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004918:	e013      	b.n	8004942 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800491a:	4b59      	ldr	r3, [pc, #356]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1d8>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10f      	bne.n	8004946 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004926:	4b56      	ldr	r3, [pc, #344]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d109      	bne.n	8004946 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004936:	e006      	b.n	8004946 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	73fb      	strb	r3, [r7, #15]
      break;
 800493c:	e004      	b.n	8004948 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800493e:	bf00      	nop
 8004940:	e002      	b.n	8004948 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004942:	bf00      	nop
 8004944:	e000      	b.n	8004948 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004946:	bf00      	nop
    }

    if(status == HAL_OK)
 8004948:	7bfb      	ldrb	r3, [r7, #15]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d108      	bne.n	8004960 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800494e:	4b4c      	ldr	r3, [pc, #304]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f023 0203 	bic.w	r2, r3, #3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4949      	ldr	r1, [pc, #292]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1d8>)
 800495c:	4313      	orrs	r3, r2
 800495e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004960:	7bfb      	ldrb	r3, [r7, #15]
 8004962:	2b00      	cmp	r3, #0
 8004964:	f040 8086 	bne.w	8004a74 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004968:	4b45      	ldr	r3, [pc, #276]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1d8>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a44      	ldr	r2, [pc, #272]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1d8>)
 800496e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004972:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004974:	f7fd fb70 	bl	8002058 <HAL_GetTick>
 8004978:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800497a:	e009      	b.n	8004990 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800497c:	f7fd fb6c 	bl	8002058 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d902      	bls.n	8004990 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	73fb      	strb	r3, [r7, #15]
        break;
 800498e:	e005      	b.n	800499c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004990:	4b3b      	ldr	r3, [pc, #236]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1ef      	bne.n	800497c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800499c:	7bfb      	ldrb	r3, [r7, #15]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d168      	bne.n	8004a74 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d113      	bne.n	80049d0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049a8:	4b35      	ldr	r3, [pc, #212]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049aa:	691a      	ldr	r2, [r3, #16]
 80049ac:	4b35      	ldr	r3, [pc, #212]	; (8004a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049ae:	4013      	ands	r3, r2
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	6892      	ldr	r2, [r2, #8]
 80049b4:	0211      	lsls	r1, r2, #8
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	68d2      	ldr	r2, [r2, #12]
 80049ba:	06d2      	lsls	r2, r2, #27
 80049bc:	4311      	orrs	r1, r2
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	6852      	ldr	r2, [r2, #4]
 80049c2:	3a01      	subs	r2, #1
 80049c4:	0112      	lsls	r2, r2, #4
 80049c6:	430a      	orrs	r2, r1
 80049c8:	492d      	ldr	r1, [pc, #180]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	610b      	str	r3, [r1, #16]
 80049ce:	e02d      	b.n	8004a2c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d115      	bne.n	8004a02 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049d6:	4b2a      	ldr	r3, [pc, #168]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049d8:	691a      	ldr	r2, [r3, #16]
 80049da:	4b2b      	ldr	r3, [pc, #172]	; (8004a88 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049dc:	4013      	ands	r3, r2
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	6892      	ldr	r2, [r2, #8]
 80049e2:	0211      	lsls	r1, r2, #8
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	6912      	ldr	r2, [r2, #16]
 80049e8:	0852      	lsrs	r2, r2, #1
 80049ea:	3a01      	subs	r2, #1
 80049ec:	0552      	lsls	r2, r2, #21
 80049ee:	4311      	orrs	r1, r2
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	6852      	ldr	r2, [r2, #4]
 80049f4:	3a01      	subs	r2, #1
 80049f6:	0112      	lsls	r2, r2, #4
 80049f8:	430a      	orrs	r2, r1
 80049fa:	4921      	ldr	r1, [pc, #132]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	610b      	str	r3, [r1, #16]
 8004a00:	e014      	b.n	8004a2c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a02:	4b1f      	ldr	r3, [pc, #124]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a04:	691a      	ldr	r2, [r3, #16]
 8004a06:	4b21      	ldr	r3, [pc, #132]	; (8004a8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a08:	4013      	ands	r3, r2
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6892      	ldr	r2, [r2, #8]
 8004a0e:	0211      	lsls	r1, r2, #8
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6952      	ldr	r2, [r2, #20]
 8004a14:	0852      	lsrs	r2, r2, #1
 8004a16:	3a01      	subs	r2, #1
 8004a18:	0652      	lsls	r2, r2, #25
 8004a1a:	4311      	orrs	r1, r2
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	6852      	ldr	r2, [r2, #4]
 8004a20:	3a01      	subs	r2, #1
 8004a22:	0112      	lsls	r2, r2, #4
 8004a24:	430a      	orrs	r2, r1
 8004a26:	4916      	ldr	r1, [pc, #88]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a2c:	4b14      	ldr	r3, [pc, #80]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a13      	ldr	r2, [pc, #76]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a38:	f7fd fb0e 	bl	8002058 <HAL_GetTick>
 8004a3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a3e:	e009      	b.n	8004a54 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a40:	f7fd fb0a 	bl	8002058 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d902      	bls.n	8004a54 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	73fb      	strb	r3, [r7, #15]
          break;
 8004a52:	e005      	b.n	8004a60 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a54:	4b0a      	ldr	r3, [pc, #40]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d0ef      	beq.n	8004a40 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004a60:	7bfb      	ldrb	r3, [r7, #15]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d106      	bne.n	8004a74 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a66:	4b06      	ldr	r3, [pc, #24]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a68:	691a      	ldr	r2, [r3, #16]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	4904      	ldr	r1, [pc, #16]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	40021000 	.word	0x40021000
 8004a84:	07ff800f 	.word	0x07ff800f
 8004a88:	ff9f800f 	.word	0xff9f800f
 8004a8c:	f9ff800f 	.word	0xf9ff800f

08004a90 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a9e:	4b72      	ldr	r3, [pc, #456]	; (8004c68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00e      	beq.n	8004ac8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004aaa:	4b6f      	ldr	r3, [pc, #444]	; (8004c68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f003 0203 	and.w	r2, r3, #3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d103      	bne.n	8004ac2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
       ||
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d142      	bne.n	8004b48 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	73fb      	strb	r3, [r7, #15]
 8004ac6:	e03f      	b.n	8004b48 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b03      	cmp	r3, #3
 8004ace:	d018      	beq.n	8004b02 <RCCEx_PLLSAI2_Config+0x72>
 8004ad0:	2b03      	cmp	r3, #3
 8004ad2:	d825      	bhi.n	8004b20 <RCCEx_PLLSAI2_Config+0x90>
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d002      	beq.n	8004ade <RCCEx_PLLSAI2_Config+0x4e>
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d009      	beq.n	8004af0 <RCCEx_PLLSAI2_Config+0x60>
 8004adc:	e020      	b.n	8004b20 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ade:	4b62      	ldr	r3, [pc, #392]	; (8004c68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d11d      	bne.n	8004b26 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aee:	e01a      	b.n	8004b26 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004af0:	4b5d      	ldr	r3, [pc, #372]	; (8004c68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d116      	bne.n	8004b2a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b00:	e013      	b.n	8004b2a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b02:	4b59      	ldr	r3, [pc, #356]	; (8004c68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10f      	bne.n	8004b2e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b0e:	4b56      	ldr	r3, [pc, #344]	; (8004c68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d109      	bne.n	8004b2e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b1e:	e006      	b.n	8004b2e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	73fb      	strb	r3, [r7, #15]
      break;
 8004b24:	e004      	b.n	8004b30 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004b26:	bf00      	nop
 8004b28:	e002      	b.n	8004b30 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004b2a:	bf00      	nop
 8004b2c:	e000      	b.n	8004b30 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004b2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d108      	bne.n	8004b48 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004b36:	4b4c      	ldr	r3, [pc, #304]	; (8004c68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f023 0203 	bic.w	r2, r3, #3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4949      	ldr	r1, [pc, #292]	; (8004c68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004b48:	7bfb      	ldrb	r3, [r7, #15]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f040 8086 	bne.w	8004c5c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004b50:	4b45      	ldr	r3, [pc, #276]	; (8004c68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a44      	ldr	r2, [pc, #272]	; (8004c68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b5c:	f7fd fa7c 	bl	8002058 <HAL_GetTick>
 8004b60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b62:	e009      	b.n	8004b78 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b64:	f7fd fa78 	bl	8002058 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d902      	bls.n	8004b78 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	73fb      	strb	r3, [r7, #15]
        break;
 8004b76:	e005      	b.n	8004b84 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b78:	4b3b      	ldr	r3, [pc, #236]	; (8004c68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1ef      	bne.n	8004b64 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d168      	bne.n	8004c5c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d113      	bne.n	8004bb8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b90:	4b35      	ldr	r3, [pc, #212]	; (8004c68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b92:	695a      	ldr	r2, [r3, #20]
 8004b94:	4b35      	ldr	r3, [pc, #212]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1dc>)
 8004b96:	4013      	ands	r3, r2
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	6892      	ldr	r2, [r2, #8]
 8004b9c:	0211      	lsls	r1, r2, #8
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	68d2      	ldr	r2, [r2, #12]
 8004ba2:	06d2      	lsls	r2, r2, #27
 8004ba4:	4311      	orrs	r1, r2
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	6852      	ldr	r2, [r2, #4]
 8004baa:	3a01      	subs	r2, #1
 8004bac:	0112      	lsls	r2, r2, #4
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	492d      	ldr	r1, [pc, #180]	; (8004c68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	614b      	str	r3, [r1, #20]
 8004bb6:	e02d      	b.n	8004c14 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d115      	bne.n	8004bea <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004bbe:	4b2a      	ldr	r3, [pc, #168]	; (8004c68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bc0:	695a      	ldr	r2, [r3, #20]
 8004bc2:	4b2b      	ldr	r3, [pc, #172]	; (8004c70 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	6892      	ldr	r2, [r2, #8]
 8004bca:	0211      	lsls	r1, r2, #8
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	6912      	ldr	r2, [r2, #16]
 8004bd0:	0852      	lsrs	r2, r2, #1
 8004bd2:	3a01      	subs	r2, #1
 8004bd4:	0552      	lsls	r2, r2, #21
 8004bd6:	4311      	orrs	r1, r2
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6852      	ldr	r2, [r2, #4]
 8004bdc:	3a01      	subs	r2, #1
 8004bde:	0112      	lsls	r2, r2, #4
 8004be0:	430a      	orrs	r2, r1
 8004be2:	4921      	ldr	r1, [pc, #132]	; (8004c68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	614b      	str	r3, [r1, #20]
 8004be8:	e014      	b.n	8004c14 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004bea:	4b1f      	ldr	r3, [pc, #124]	; (8004c68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bec:	695a      	ldr	r2, [r3, #20]
 8004bee:	4b21      	ldr	r3, [pc, #132]	; (8004c74 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	6892      	ldr	r2, [r2, #8]
 8004bf6:	0211      	lsls	r1, r2, #8
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6952      	ldr	r2, [r2, #20]
 8004bfc:	0852      	lsrs	r2, r2, #1
 8004bfe:	3a01      	subs	r2, #1
 8004c00:	0652      	lsls	r2, r2, #25
 8004c02:	4311      	orrs	r1, r2
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6852      	ldr	r2, [r2, #4]
 8004c08:	3a01      	subs	r2, #1
 8004c0a:	0112      	lsls	r2, r2, #4
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	4916      	ldr	r1, [pc, #88]	; (8004c68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004c14:	4b14      	ldr	r3, [pc, #80]	; (8004c68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a13      	ldr	r2, [pc, #76]	; (8004c68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c20:	f7fd fa1a 	bl	8002058 <HAL_GetTick>
 8004c24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c26:	e009      	b.n	8004c3c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c28:	f7fd fa16 	bl	8002058 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d902      	bls.n	8004c3c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	73fb      	strb	r3, [r7, #15]
          break;
 8004c3a:	e005      	b.n	8004c48 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c3c:	4b0a      	ldr	r3, [pc, #40]	; (8004c68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d0ef      	beq.n	8004c28 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d106      	bne.n	8004c5c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004c4e:	4b06      	ldr	r3, [pc, #24]	; (8004c68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c50:	695a      	ldr	r2, [r3, #20]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	4904      	ldr	r1, [pc, #16]	; (8004c68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	40021000 	.word	0x40021000
 8004c6c:	07ff800f 	.word	0x07ff800f
 8004c70:	ff9f800f 	.word	0xff9f800f
 8004c74:	f9ff800f 	.word	0xf9ff800f

08004c78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e049      	b.n	8004d1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d106      	bne.n	8004ca4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f841 	bl	8004d26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	4610      	mov	r0, r2
 8004cb8:	f000 f9f8 	bl	80050ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
	...

08004d3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d001      	beq.n	8004d54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e04f      	b.n	8004df4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0201 	orr.w	r2, r2, #1
 8004d6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a23      	ldr	r2, [pc, #140]	; (8004e00 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d01d      	beq.n	8004db2 <HAL_TIM_Base_Start_IT+0x76>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d7e:	d018      	beq.n	8004db2 <HAL_TIM_Base_Start_IT+0x76>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a1f      	ldr	r2, [pc, #124]	; (8004e04 <HAL_TIM_Base_Start_IT+0xc8>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d013      	beq.n	8004db2 <HAL_TIM_Base_Start_IT+0x76>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a1e      	ldr	r2, [pc, #120]	; (8004e08 <HAL_TIM_Base_Start_IT+0xcc>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d00e      	beq.n	8004db2 <HAL_TIM_Base_Start_IT+0x76>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a1c      	ldr	r2, [pc, #112]	; (8004e0c <HAL_TIM_Base_Start_IT+0xd0>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d009      	beq.n	8004db2 <HAL_TIM_Base_Start_IT+0x76>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a1b      	ldr	r2, [pc, #108]	; (8004e10 <HAL_TIM_Base_Start_IT+0xd4>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d004      	beq.n	8004db2 <HAL_TIM_Base_Start_IT+0x76>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a19      	ldr	r2, [pc, #100]	; (8004e14 <HAL_TIM_Base_Start_IT+0xd8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d115      	bne.n	8004dde <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	4b17      	ldr	r3, [pc, #92]	; (8004e18 <HAL_TIM_Base_Start_IT+0xdc>)
 8004dba:	4013      	ands	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2b06      	cmp	r3, #6
 8004dc2:	d015      	beq.n	8004df0 <HAL_TIM_Base_Start_IT+0xb4>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dca:	d011      	beq.n	8004df0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f042 0201 	orr.w	r2, r2, #1
 8004dda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ddc:	e008      	b.n	8004df0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f042 0201 	orr.w	r2, r2, #1
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	e000      	b.n	8004df2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	40012c00 	.word	0x40012c00
 8004e04:	40000400 	.word	0x40000400
 8004e08:	40000800 	.word	0x40000800
 8004e0c:	40000c00 	.word	0x40000c00
 8004e10:	40013400 	.word	0x40013400
 8004e14:	40014000 	.word	0x40014000
 8004e18:	00010007 	.word	0x00010007

08004e1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d122      	bne.n	8004e78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d11b      	bne.n	8004e78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f06f 0202 	mvn.w	r2, #2
 8004e48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	f003 0303 	and.w	r3, r3, #3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f905 	bl	800506e <HAL_TIM_IC_CaptureCallback>
 8004e64:	e005      	b.n	8004e72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f8f7 	bl	800505a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f908 	bl	8005082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	f003 0304 	and.w	r3, r3, #4
 8004e82:	2b04      	cmp	r3, #4
 8004e84:	d122      	bne.n	8004ecc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f003 0304 	and.w	r3, r3, #4
 8004e90:	2b04      	cmp	r3, #4
 8004e92:	d11b      	bne.n	8004ecc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f06f 0204 	mvn.w	r2, #4
 8004e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d003      	beq.n	8004eba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f8db 	bl	800506e <HAL_TIM_IC_CaptureCallback>
 8004eb8:	e005      	b.n	8004ec6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f8cd 	bl	800505a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f8de 	bl	8005082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	f003 0308 	and.w	r3, r3, #8
 8004ed6:	2b08      	cmp	r3, #8
 8004ed8:	d122      	bne.n	8004f20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f003 0308 	and.w	r3, r3, #8
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d11b      	bne.n	8004f20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f06f 0208 	mvn.w	r2, #8
 8004ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2204      	movs	r2, #4
 8004ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	f003 0303 	and.w	r3, r3, #3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f8b1 	bl	800506e <HAL_TIM_IC_CaptureCallback>
 8004f0c:	e005      	b.n	8004f1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f8a3 	bl	800505a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f8b4 	bl	8005082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	f003 0310 	and.w	r3, r3, #16
 8004f2a:	2b10      	cmp	r3, #16
 8004f2c:	d122      	bne.n	8004f74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f003 0310 	and.w	r3, r3, #16
 8004f38:	2b10      	cmp	r3, #16
 8004f3a:	d11b      	bne.n	8004f74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f06f 0210 	mvn.w	r2, #16
 8004f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2208      	movs	r2, #8
 8004f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f887 	bl	800506e <HAL_TIM_IC_CaptureCallback>
 8004f60:	e005      	b.n	8004f6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f879 	bl	800505a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 f88a 	bl	8005082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d10e      	bne.n	8004fa0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d107      	bne.n	8004fa0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f06f 0201 	mvn.w	r2, #1
 8004f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7fc fbc4 	bl	8001728 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004faa:	2b80      	cmp	r3, #128	; 0x80
 8004fac:	d10e      	bne.n	8004fcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb8:	2b80      	cmp	r3, #128	; 0x80
 8004fba:	d107      	bne.n	8004fcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f914 	bl	80051f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fda:	d10e      	bne.n	8004ffa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe6:	2b80      	cmp	r3, #128	; 0x80
 8004fe8:	d107      	bne.n	8004ffa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f907 	bl	8005208 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005004:	2b40      	cmp	r3, #64	; 0x40
 8005006:	d10e      	bne.n	8005026 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005012:	2b40      	cmp	r3, #64	; 0x40
 8005014:	d107      	bne.n	8005026 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800501e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 f838 	bl	8005096 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f003 0320 	and.w	r3, r3, #32
 8005030:	2b20      	cmp	r3, #32
 8005032:	d10e      	bne.n	8005052 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	f003 0320 	and.w	r3, r3, #32
 800503e:	2b20      	cmp	r3, #32
 8005040:	d107      	bne.n	8005052 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f06f 0220 	mvn.w	r2, #32
 800504a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f8c7 	bl	80051e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005052:	bf00      	nop
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800505a:	b480      	push	{r7}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005062:	bf00      	nop
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800506e:	b480      	push	{r7}
 8005070:	b083      	sub	sp, #12
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005076:	bf00      	nop
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005096:	b480      	push	{r7}
 8005098:	b083      	sub	sp, #12
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800509e:	bf00      	nop
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
	...

080050ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a40      	ldr	r2, [pc, #256]	; (80051c0 <TIM_Base_SetConfig+0x114>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d013      	beq.n	80050ec <TIM_Base_SetConfig+0x40>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ca:	d00f      	beq.n	80050ec <TIM_Base_SetConfig+0x40>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a3d      	ldr	r2, [pc, #244]	; (80051c4 <TIM_Base_SetConfig+0x118>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d00b      	beq.n	80050ec <TIM_Base_SetConfig+0x40>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a3c      	ldr	r2, [pc, #240]	; (80051c8 <TIM_Base_SetConfig+0x11c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d007      	beq.n	80050ec <TIM_Base_SetConfig+0x40>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a3b      	ldr	r2, [pc, #236]	; (80051cc <TIM_Base_SetConfig+0x120>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d003      	beq.n	80050ec <TIM_Base_SetConfig+0x40>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a3a      	ldr	r2, [pc, #232]	; (80051d0 <TIM_Base_SetConfig+0x124>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d108      	bne.n	80050fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a2f      	ldr	r2, [pc, #188]	; (80051c0 <TIM_Base_SetConfig+0x114>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d01f      	beq.n	8005146 <TIM_Base_SetConfig+0x9a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800510c:	d01b      	beq.n	8005146 <TIM_Base_SetConfig+0x9a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a2c      	ldr	r2, [pc, #176]	; (80051c4 <TIM_Base_SetConfig+0x118>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d017      	beq.n	8005146 <TIM_Base_SetConfig+0x9a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a2b      	ldr	r2, [pc, #172]	; (80051c8 <TIM_Base_SetConfig+0x11c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d013      	beq.n	8005146 <TIM_Base_SetConfig+0x9a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a2a      	ldr	r2, [pc, #168]	; (80051cc <TIM_Base_SetConfig+0x120>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d00f      	beq.n	8005146 <TIM_Base_SetConfig+0x9a>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a29      	ldr	r2, [pc, #164]	; (80051d0 <TIM_Base_SetConfig+0x124>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d00b      	beq.n	8005146 <TIM_Base_SetConfig+0x9a>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a28      	ldr	r2, [pc, #160]	; (80051d4 <TIM_Base_SetConfig+0x128>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d007      	beq.n	8005146 <TIM_Base_SetConfig+0x9a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a27      	ldr	r2, [pc, #156]	; (80051d8 <TIM_Base_SetConfig+0x12c>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d003      	beq.n	8005146 <TIM_Base_SetConfig+0x9a>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a26      	ldr	r2, [pc, #152]	; (80051dc <TIM_Base_SetConfig+0x130>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d108      	bne.n	8005158 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800514c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	4313      	orrs	r3, r2
 8005156:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	4313      	orrs	r3, r2
 8005164:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a10      	ldr	r2, [pc, #64]	; (80051c0 <TIM_Base_SetConfig+0x114>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d00f      	beq.n	80051a4 <TIM_Base_SetConfig+0xf8>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a12      	ldr	r2, [pc, #72]	; (80051d0 <TIM_Base_SetConfig+0x124>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d00b      	beq.n	80051a4 <TIM_Base_SetConfig+0xf8>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a11      	ldr	r2, [pc, #68]	; (80051d4 <TIM_Base_SetConfig+0x128>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d007      	beq.n	80051a4 <TIM_Base_SetConfig+0xf8>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a10      	ldr	r2, [pc, #64]	; (80051d8 <TIM_Base_SetConfig+0x12c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d003      	beq.n	80051a4 <TIM_Base_SetConfig+0xf8>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a0f      	ldr	r2, [pc, #60]	; (80051dc <TIM_Base_SetConfig+0x130>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d103      	bne.n	80051ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	691a      	ldr	r2, [r3, #16]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	615a      	str	r2, [r3, #20]
}
 80051b2:	bf00      	nop
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	40012c00 	.word	0x40012c00
 80051c4:	40000400 	.word	0x40000400
 80051c8:	40000800 	.word	0x40000800
 80051cc:	40000c00 	.word	0x40000c00
 80051d0:	40013400 	.word	0x40013400
 80051d4:	40014000 	.word	0x40014000
 80051d8:	40014400 	.word	0x40014400
 80051dc:	40014800 	.word	0x40014800

080051e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e042      	b.n	80052b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005234:	2b00      	cmp	r3, #0
 8005236:	d106      	bne.n	8005246 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f7fc fceb 	bl	8001c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2224      	movs	r2, #36	; 0x24
 800524a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 0201 	bic.w	r2, r2, #1
 800525c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f8c4 	bl	80053ec <UART_SetConfig>
 8005264:	4603      	mov	r3, r0
 8005266:	2b01      	cmp	r3, #1
 8005268:	d101      	bne.n	800526e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e022      	b.n	80052b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005272:	2b00      	cmp	r3, #0
 8005274:	d002      	beq.n	800527c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fb82 	bl	8005980 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800528a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689a      	ldr	r2, [r3, #8]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800529a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0201 	orr.w	r2, r2, #1
 80052aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 fc09 	bl	8005ac4 <UART_CheckIdleState>
 80052b2:	4603      	mov	r3, r0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3708      	adds	r7, #8
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b08a      	sub	sp, #40	; 0x28
 80052c0:	af02      	add	r7, sp, #8
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	603b      	str	r3, [r7, #0]
 80052c8:	4613      	mov	r3, r2
 80052ca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052d2:	2b20      	cmp	r3, #32
 80052d4:	f040 8084 	bne.w	80053e0 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d002      	beq.n	80052e4 <HAL_UART_Transmit+0x28>
 80052de:	88fb      	ldrh	r3, [r7, #6]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e07c      	b.n	80053e2 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d101      	bne.n	80052f6 <HAL_UART_Transmit+0x3a>
 80052f2:	2302      	movs	r3, #2
 80052f4:	e075      	b.n	80053e2 <HAL_UART_Transmit+0x126>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2221      	movs	r2, #33	; 0x21
 800530a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800530e:	f7fc fea3 	bl	8002058 <HAL_GetTick>
 8005312:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	88fa      	ldrh	r2, [r7, #6]
 8005318:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	88fa      	ldrh	r2, [r7, #6]
 8005320:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800532c:	d108      	bne.n	8005340 <HAL_UART_Transmit+0x84>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d104      	bne.n	8005340 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005336:	2300      	movs	r3, #0
 8005338:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	61bb      	str	r3, [r7, #24]
 800533e:	e003      	b.n	8005348 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005344:	2300      	movs	r3, #0
 8005346:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005350:	e02d      	b.n	80053ae <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	2200      	movs	r2, #0
 800535a:	2180      	movs	r1, #128	; 0x80
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 fbfc 	bl	8005b5a <UART_WaitOnFlagUntilTimeout>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e03a      	b.n	80053e2 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10b      	bne.n	800538a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	881a      	ldrh	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800537e:	b292      	uxth	r2, r2
 8005380:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	3302      	adds	r3, #2
 8005386:	61bb      	str	r3, [r7, #24]
 8005388:	e008      	b.n	800539c <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	781a      	ldrb	r2, [r3, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	b292      	uxth	r2, r2
 8005394:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	3301      	adds	r3, #1
 800539a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	3b01      	subs	r3, #1
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1cb      	bne.n	8005352 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	2200      	movs	r2, #0
 80053c2:	2140      	movs	r1, #64	; 0x40
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f000 fbc8 	bl	8005b5a <UART_WaitOnFlagUntilTimeout>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e006      	b.n	80053e2 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2220      	movs	r2, #32
 80053d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80053dc:	2300      	movs	r3, #0
 80053de:	e000      	b.n	80053e2 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80053e0:	2302      	movs	r3, #2
  }
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3720      	adds	r7, #32
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
	...

080053ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053ec:	b5b0      	push	{r4, r5, r7, lr}
 80053ee:	b088      	sub	sp, #32
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053f4:	2300      	movs	r3, #0
 80053f6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	431a      	orrs	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	431a      	orrs	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	4313      	orrs	r3, r2
 800540e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	4bb1      	ldr	r3, [pc, #708]	; (80056dc <UART_SetConfig+0x2f0>)
 8005418:	4013      	ands	r3, r2
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	6812      	ldr	r2, [r2, #0]
 800541e:	69f9      	ldr	r1, [r7, #28]
 8005420:	430b      	orrs	r3, r1
 8005422:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68da      	ldr	r2, [r3, #12]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4aa6      	ldr	r2, [pc, #664]	; (80056e0 <UART_SetConfig+0x2f4>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d004      	beq.n	8005454 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	69fa      	ldr	r2, [r7, #28]
 8005450:	4313      	orrs	r3, r2
 8005452:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800545e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	6812      	ldr	r2, [r2, #0]
 8005466:	69f9      	ldr	r1, [r7, #28]
 8005468:	430b      	orrs	r3, r1
 800546a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005472:	f023 010f 	bic.w	r1, r3, #15
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a97      	ldr	r2, [pc, #604]	; (80056e4 <UART_SetConfig+0x2f8>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d120      	bne.n	80054ce <UART_SetConfig+0xe2>
 800548c:	4b96      	ldr	r3, [pc, #600]	; (80056e8 <UART_SetConfig+0x2fc>)
 800548e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005492:	f003 0303 	and.w	r3, r3, #3
 8005496:	2b03      	cmp	r3, #3
 8005498:	d816      	bhi.n	80054c8 <UART_SetConfig+0xdc>
 800549a:	a201      	add	r2, pc, #4	; (adr r2, 80054a0 <UART_SetConfig+0xb4>)
 800549c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a0:	080054b1 	.word	0x080054b1
 80054a4:	080054bd 	.word	0x080054bd
 80054a8:	080054b7 	.word	0x080054b7
 80054ac:	080054c3 	.word	0x080054c3
 80054b0:	2301      	movs	r3, #1
 80054b2:	76fb      	strb	r3, [r7, #27]
 80054b4:	e0e7      	b.n	8005686 <UART_SetConfig+0x29a>
 80054b6:	2302      	movs	r3, #2
 80054b8:	76fb      	strb	r3, [r7, #27]
 80054ba:	e0e4      	b.n	8005686 <UART_SetConfig+0x29a>
 80054bc:	2304      	movs	r3, #4
 80054be:	76fb      	strb	r3, [r7, #27]
 80054c0:	e0e1      	b.n	8005686 <UART_SetConfig+0x29a>
 80054c2:	2308      	movs	r3, #8
 80054c4:	76fb      	strb	r3, [r7, #27]
 80054c6:	e0de      	b.n	8005686 <UART_SetConfig+0x29a>
 80054c8:	2310      	movs	r3, #16
 80054ca:	76fb      	strb	r3, [r7, #27]
 80054cc:	e0db      	b.n	8005686 <UART_SetConfig+0x29a>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a86      	ldr	r2, [pc, #536]	; (80056ec <UART_SetConfig+0x300>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d132      	bne.n	800553e <UART_SetConfig+0x152>
 80054d8:	4b83      	ldr	r3, [pc, #524]	; (80056e8 <UART_SetConfig+0x2fc>)
 80054da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054de:	f003 030c 	and.w	r3, r3, #12
 80054e2:	2b0c      	cmp	r3, #12
 80054e4:	d828      	bhi.n	8005538 <UART_SetConfig+0x14c>
 80054e6:	a201      	add	r2, pc, #4	; (adr r2, 80054ec <UART_SetConfig+0x100>)
 80054e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ec:	08005521 	.word	0x08005521
 80054f0:	08005539 	.word	0x08005539
 80054f4:	08005539 	.word	0x08005539
 80054f8:	08005539 	.word	0x08005539
 80054fc:	0800552d 	.word	0x0800552d
 8005500:	08005539 	.word	0x08005539
 8005504:	08005539 	.word	0x08005539
 8005508:	08005539 	.word	0x08005539
 800550c:	08005527 	.word	0x08005527
 8005510:	08005539 	.word	0x08005539
 8005514:	08005539 	.word	0x08005539
 8005518:	08005539 	.word	0x08005539
 800551c:	08005533 	.word	0x08005533
 8005520:	2300      	movs	r3, #0
 8005522:	76fb      	strb	r3, [r7, #27]
 8005524:	e0af      	b.n	8005686 <UART_SetConfig+0x29a>
 8005526:	2302      	movs	r3, #2
 8005528:	76fb      	strb	r3, [r7, #27]
 800552a:	e0ac      	b.n	8005686 <UART_SetConfig+0x29a>
 800552c:	2304      	movs	r3, #4
 800552e:	76fb      	strb	r3, [r7, #27]
 8005530:	e0a9      	b.n	8005686 <UART_SetConfig+0x29a>
 8005532:	2308      	movs	r3, #8
 8005534:	76fb      	strb	r3, [r7, #27]
 8005536:	e0a6      	b.n	8005686 <UART_SetConfig+0x29a>
 8005538:	2310      	movs	r3, #16
 800553a:	76fb      	strb	r3, [r7, #27]
 800553c:	e0a3      	b.n	8005686 <UART_SetConfig+0x29a>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a6b      	ldr	r2, [pc, #428]	; (80056f0 <UART_SetConfig+0x304>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d120      	bne.n	800558a <UART_SetConfig+0x19e>
 8005548:	4b67      	ldr	r3, [pc, #412]	; (80056e8 <UART_SetConfig+0x2fc>)
 800554a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005552:	2b30      	cmp	r3, #48	; 0x30
 8005554:	d013      	beq.n	800557e <UART_SetConfig+0x192>
 8005556:	2b30      	cmp	r3, #48	; 0x30
 8005558:	d814      	bhi.n	8005584 <UART_SetConfig+0x198>
 800555a:	2b20      	cmp	r3, #32
 800555c:	d009      	beq.n	8005572 <UART_SetConfig+0x186>
 800555e:	2b20      	cmp	r3, #32
 8005560:	d810      	bhi.n	8005584 <UART_SetConfig+0x198>
 8005562:	2b00      	cmp	r3, #0
 8005564:	d002      	beq.n	800556c <UART_SetConfig+0x180>
 8005566:	2b10      	cmp	r3, #16
 8005568:	d006      	beq.n	8005578 <UART_SetConfig+0x18c>
 800556a:	e00b      	b.n	8005584 <UART_SetConfig+0x198>
 800556c:	2300      	movs	r3, #0
 800556e:	76fb      	strb	r3, [r7, #27]
 8005570:	e089      	b.n	8005686 <UART_SetConfig+0x29a>
 8005572:	2302      	movs	r3, #2
 8005574:	76fb      	strb	r3, [r7, #27]
 8005576:	e086      	b.n	8005686 <UART_SetConfig+0x29a>
 8005578:	2304      	movs	r3, #4
 800557a:	76fb      	strb	r3, [r7, #27]
 800557c:	e083      	b.n	8005686 <UART_SetConfig+0x29a>
 800557e:	2308      	movs	r3, #8
 8005580:	76fb      	strb	r3, [r7, #27]
 8005582:	e080      	b.n	8005686 <UART_SetConfig+0x29a>
 8005584:	2310      	movs	r3, #16
 8005586:	76fb      	strb	r3, [r7, #27]
 8005588:	e07d      	b.n	8005686 <UART_SetConfig+0x29a>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a59      	ldr	r2, [pc, #356]	; (80056f4 <UART_SetConfig+0x308>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d120      	bne.n	80055d6 <UART_SetConfig+0x1ea>
 8005594:	4b54      	ldr	r3, [pc, #336]	; (80056e8 <UART_SetConfig+0x2fc>)
 8005596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800559e:	2bc0      	cmp	r3, #192	; 0xc0
 80055a0:	d013      	beq.n	80055ca <UART_SetConfig+0x1de>
 80055a2:	2bc0      	cmp	r3, #192	; 0xc0
 80055a4:	d814      	bhi.n	80055d0 <UART_SetConfig+0x1e4>
 80055a6:	2b80      	cmp	r3, #128	; 0x80
 80055a8:	d009      	beq.n	80055be <UART_SetConfig+0x1d2>
 80055aa:	2b80      	cmp	r3, #128	; 0x80
 80055ac:	d810      	bhi.n	80055d0 <UART_SetConfig+0x1e4>
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d002      	beq.n	80055b8 <UART_SetConfig+0x1cc>
 80055b2:	2b40      	cmp	r3, #64	; 0x40
 80055b4:	d006      	beq.n	80055c4 <UART_SetConfig+0x1d8>
 80055b6:	e00b      	b.n	80055d0 <UART_SetConfig+0x1e4>
 80055b8:	2300      	movs	r3, #0
 80055ba:	76fb      	strb	r3, [r7, #27]
 80055bc:	e063      	b.n	8005686 <UART_SetConfig+0x29a>
 80055be:	2302      	movs	r3, #2
 80055c0:	76fb      	strb	r3, [r7, #27]
 80055c2:	e060      	b.n	8005686 <UART_SetConfig+0x29a>
 80055c4:	2304      	movs	r3, #4
 80055c6:	76fb      	strb	r3, [r7, #27]
 80055c8:	e05d      	b.n	8005686 <UART_SetConfig+0x29a>
 80055ca:	2308      	movs	r3, #8
 80055cc:	76fb      	strb	r3, [r7, #27]
 80055ce:	e05a      	b.n	8005686 <UART_SetConfig+0x29a>
 80055d0:	2310      	movs	r3, #16
 80055d2:	76fb      	strb	r3, [r7, #27]
 80055d4:	e057      	b.n	8005686 <UART_SetConfig+0x29a>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a47      	ldr	r2, [pc, #284]	; (80056f8 <UART_SetConfig+0x30c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d125      	bne.n	800562c <UART_SetConfig+0x240>
 80055e0:	4b41      	ldr	r3, [pc, #260]	; (80056e8 <UART_SetConfig+0x2fc>)
 80055e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055ee:	d017      	beq.n	8005620 <UART_SetConfig+0x234>
 80055f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055f4:	d817      	bhi.n	8005626 <UART_SetConfig+0x23a>
 80055f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055fa:	d00b      	beq.n	8005614 <UART_SetConfig+0x228>
 80055fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005600:	d811      	bhi.n	8005626 <UART_SetConfig+0x23a>
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <UART_SetConfig+0x222>
 8005606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800560a:	d006      	beq.n	800561a <UART_SetConfig+0x22e>
 800560c:	e00b      	b.n	8005626 <UART_SetConfig+0x23a>
 800560e:	2300      	movs	r3, #0
 8005610:	76fb      	strb	r3, [r7, #27]
 8005612:	e038      	b.n	8005686 <UART_SetConfig+0x29a>
 8005614:	2302      	movs	r3, #2
 8005616:	76fb      	strb	r3, [r7, #27]
 8005618:	e035      	b.n	8005686 <UART_SetConfig+0x29a>
 800561a:	2304      	movs	r3, #4
 800561c:	76fb      	strb	r3, [r7, #27]
 800561e:	e032      	b.n	8005686 <UART_SetConfig+0x29a>
 8005620:	2308      	movs	r3, #8
 8005622:	76fb      	strb	r3, [r7, #27]
 8005624:	e02f      	b.n	8005686 <UART_SetConfig+0x29a>
 8005626:	2310      	movs	r3, #16
 8005628:	76fb      	strb	r3, [r7, #27]
 800562a:	e02c      	b.n	8005686 <UART_SetConfig+0x29a>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a2b      	ldr	r2, [pc, #172]	; (80056e0 <UART_SetConfig+0x2f4>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d125      	bne.n	8005682 <UART_SetConfig+0x296>
 8005636:	4b2c      	ldr	r3, [pc, #176]	; (80056e8 <UART_SetConfig+0x2fc>)
 8005638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005640:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005644:	d017      	beq.n	8005676 <UART_SetConfig+0x28a>
 8005646:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800564a:	d817      	bhi.n	800567c <UART_SetConfig+0x290>
 800564c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005650:	d00b      	beq.n	800566a <UART_SetConfig+0x27e>
 8005652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005656:	d811      	bhi.n	800567c <UART_SetConfig+0x290>
 8005658:	2b00      	cmp	r3, #0
 800565a:	d003      	beq.n	8005664 <UART_SetConfig+0x278>
 800565c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005660:	d006      	beq.n	8005670 <UART_SetConfig+0x284>
 8005662:	e00b      	b.n	800567c <UART_SetConfig+0x290>
 8005664:	2300      	movs	r3, #0
 8005666:	76fb      	strb	r3, [r7, #27]
 8005668:	e00d      	b.n	8005686 <UART_SetConfig+0x29a>
 800566a:	2302      	movs	r3, #2
 800566c:	76fb      	strb	r3, [r7, #27]
 800566e:	e00a      	b.n	8005686 <UART_SetConfig+0x29a>
 8005670:	2304      	movs	r3, #4
 8005672:	76fb      	strb	r3, [r7, #27]
 8005674:	e007      	b.n	8005686 <UART_SetConfig+0x29a>
 8005676:	2308      	movs	r3, #8
 8005678:	76fb      	strb	r3, [r7, #27]
 800567a:	e004      	b.n	8005686 <UART_SetConfig+0x29a>
 800567c:	2310      	movs	r3, #16
 800567e:	76fb      	strb	r3, [r7, #27]
 8005680:	e001      	b.n	8005686 <UART_SetConfig+0x29a>
 8005682:	2310      	movs	r3, #16
 8005684:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a15      	ldr	r2, [pc, #84]	; (80056e0 <UART_SetConfig+0x2f4>)
 800568c:	4293      	cmp	r3, r2
 800568e:	f040 809f 	bne.w	80057d0 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005692:	7efb      	ldrb	r3, [r7, #27]
 8005694:	2b08      	cmp	r3, #8
 8005696:	d837      	bhi.n	8005708 <UART_SetConfig+0x31c>
 8005698:	a201      	add	r2, pc, #4	; (adr r2, 80056a0 <UART_SetConfig+0x2b4>)
 800569a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569e:	bf00      	nop
 80056a0:	080056c5 	.word	0x080056c5
 80056a4:	08005709 	.word	0x08005709
 80056a8:	080056cd 	.word	0x080056cd
 80056ac:	08005709 	.word	0x08005709
 80056b0:	080056d3 	.word	0x080056d3
 80056b4:	08005709 	.word	0x08005709
 80056b8:	08005709 	.word	0x08005709
 80056bc:	08005709 	.word	0x08005709
 80056c0:	08005701 	.word	0x08005701
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056c4:	f7fe fca0 	bl	8004008 <HAL_RCC_GetPCLK1Freq>
 80056c8:	6178      	str	r0, [r7, #20]
        break;
 80056ca:	e022      	b.n	8005712 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056cc:	4b0b      	ldr	r3, [pc, #44]	; (80056fc <UART_SetConfig+0x310>)
 80056ce:	617b      	str	r3, [r7, #20]
        break;
 80056d0:	e01f      	b.n	8005712 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056d2:	f7fe fc01 	bl	8003ed8 <HAL_RCC_GetSysClockFreq>
 80056d6:	6178      	str	r0, [r7, #20]
        break;
 80056d8:	e01b      	b.n	8005712 <UART_SetConfig+0x326>
 80056da:	bf00      	nop
 80056dc:	cfff69f3 	.word	0xcfff69f3
 80056e0:	40008000 	.word	0x40008000
 80056e4:	40013800 	.word	0x40013800
 80056e8:	40021000 	.word	0x40021000
 80056ec:	40004400 	.word	0x40004400
 80056f0:	40004800 	.word	0x40004800
 80056f4:	40004c00 	.word	0x40004c00
 80056f8:	40005000 	.word	0x40005000
 80056fc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005700:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005704:	617b      	str	r3, [r7, #20]
        break;
 8005706:	e004      	b.n	8005712 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	76bb      	strb	r3, [r7, #26]
        break;
 8005710:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 811b 	beq.w	8005950 <UART_SetConfig+0x564>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571e:	4a96      	ldr	r2, [pc, #600]	; (8005978 <UART_SetConfig+0x58c>)
 8005720:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005724:	461a      	mov	r2, r3
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	fbb3 f3f2 	udiv	r3, r3, r2
 800572c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	4613      	mov	r3, r2
 8005734:	005b      	lsls	r3, r3, #1
 8005736:	4413      	add	r3, r2
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	429a      	cmp	r2, r3
 800573c:	d305      	bcc.n	800574a <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	429a      	cmp	r2, r3
 8005748:	d902      	bls.n	8005750 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	76bb      	strb	r3, [r7, #26]
 800574e:	e0ff      	b.n	8005950 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	4618      	mov	r0, r3
 8005754:	f04f 0100 	mov.w	r1, #0
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575c:	4a86      	ldr	r2, [pc, #536]	; (8005978 <UART_SetConfig+0x58c>)
 800575e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005762:	b29a      	uxth	r2, r3
 8005764:	f04f 0300 	mov.w	r3, #0
 8005768:	f7fb fa36 	bl	8000bd8 <__aeabi_uldivmod>
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	4610      	mov	r0, r2
 8005772:	4619      	mov	r1, r3
 8005774:	f04f 0200 	mov.w	r2, #0
 8005778:	f04f 0300 	mov.w	r3, #0
 800577c:	020b      	lsls	r3, r1, #8
 800577e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005782:	0202      	lsls	r2, r0, #8
 8005784:	6879      	ldr	r1, [r7, #4]
 8005786:	6849      	ldr	r1, [r1, #4]
 8005788:	0849      	lsrs	r1, r1, #1
 800578a:	4608      	mov	r0, r1
 800578c:	f04f 0100 	mov.w	r1, #0
 8005790:	1814      	adds	r4, r2, r0
 8005792:	eb43 0501 	adc.w	r5, r3, r1
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	461a      	mov	r2, r3
 800579c:	f04f 0300 	mov.w	r3, #0
 80057a0:	4620      	mov	r0, r4
 80057a2:	4629      	mov	r1, r5
 80057a4:	f7fb fa18 	bl	8000bd8 <__aeabi_uldivmod>
 80057a8:	4602      	mov	r2, r0
 80057aa:	460b      	mov	r3, r1
 80057ac:	4613      	mov	r3, r2
 80057ae:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057b6:	d308      	bcc.n	80057ca <UART_SetConfig+0x3de>
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057be:	d204      	bcs.n	80057ca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	60da      	str	r2, [r3, #12]
 80057c8:	e0c2      	b.n	8005950 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	76bb      	strb	r3, [r7, #26]
 80057ce:	e0bf      	b.n	8005950 <UART_SetConfig+0x564>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	69db      	ldr	r3, [r3, #28]
 80057d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057d8:	d165      	bne.n	80058a6 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 80057da:	7efb      	ldrb	r3, [r7, #27]
 80057dc:	2b08      	cmp	r3, #8
 80057de:	d828      	bhi.n	8005832 <UART_SetConfig+0x446>
 80057e0:	a201      	add	r2, pc, #4	; (adr r2, 80057e8 <UART_SetConfig+0x3fc>)
 80057e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e6:	bf00      	nop
 80057e8:	0800580d 	.word	0x0800580d
 80057ec:	08005815 	.word	0x08005815
 80057f0:	0800581d 	.word	0x0800581d
 80057f4:	08005833 	.word	0x08005833
 80057f8:	08005823 	.word	0x08005823
 80057fc:	08005833 	.word	0x08005833
 8005800:	08005833 	.word	0x08005833
 8005804:	08005833 	.word	0x08005833
 8005808:	0800582b 	.word	0x0800582b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800580c:	f7fe fbfc 	bl	8004008 <HAL_RCC_GetPCLK1Freq>
 8005810:	6178      	str	r0, [r7, #20]
        break;
 8005812:	e013      	b.n	800583c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005814:	f7fe fc0e 	bl	8004034 <HAL_RCC_GetPCLK2Freq>
 8005818:	6178      	str	r0, [r7, #20]
        break;
 800581a:	e00f      	b.n	800583c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800581c:	4b57      	ldr	r3, [pc, #348]	; (800597c <UART_SetConfig+0x590>)
 800581e:	617b      	str	r3, [r7, #20]
        break;
 8005820:	e00c      	b.n	800583c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005822:	f7fe fb59 	bl	8003ed8 <HAL_RCC_GetSysClockFreq>
 8005826:	6178      	str	r0, [r7, #20]
        break;
 8005828:	e008      	b.n	800583c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800582a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800582e:	617b      	str	r3, [r7, #20]
        break;
 8005830:	e004      	b.n	800583c <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8005832:	2300      	movs	r3, #0
 8005834:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	76bb      	strb	r3, [r7, #26]
        break;
 800583a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 8086 	beq.w	8005950 <UART_SetConfig+0x564>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005848:	4a4b      	ldr	r2, [pc, #300]	; (8005978 <UART_SetConfig+0x58c>)
 800584a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800584e:	461a      	mov	r2, r3
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	fbb3 f3f2 	udiv	r3, r3, r2
 8005856:	005a      	lsls	r2, r3, #1
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	085b      	lsrs	r3, r3, #1
 800585e:	441a      	add	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	fbb2 f3f3 	udiv	r3, r2, r3
 8005868:	b29b      	uxth	r3, r3
 800586a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	2b0f      	cmp	r3, #15
 8005870:	d916      	bls.n	80058a0 <UART_SetConfig+0x4b4>
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005878:	d212      	bcs.n	80058a0 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	b29b      	uxth	r3, r3
 800587e:	f023 030f 	bic.w	r3, r3, #15
 8005882:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	085b      	lsrs	r3, r3, #1
 8005888:	b29b      	uxth	r3, r3
 800588a:	f003 0307 	and.w	r3, r3, #7
 800588e:	b29a      	uxth	r2, r3
 8005890:	89fb      	ldrh	r3, [r7, #14]
 8005892:	4313      	orrs	r3, r2
 8005894:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	89fa      	ldrh	r2, [r7, #14]
 800589c:	60da      	str	r2, [r3, #12]
 800589e:	e057      	b.n	8005950 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	76bb      	strb	r3, [r7, #26]
 80058a4:	e054      	b.n	8005950 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058a6:	7efb      	ldrb	r3, [r7, #27]
 80058a8:	2b08      	cmp	r3, #8
 80058aa:	d828      	bhi.n	80058fe <UART_SetConfig+0x512>
 80058ac:	a201      	add	r2, pc, #4	; (adr r2, 80058b4 <UART_SetConfig+0x4c8>)
 80058ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b2:	bf00      	nop
 80058b4:	080058d9 	.word	0x080058d9
 80058b8:	080058e1 	.word	0x080058e1
 80058bc:	080058e9 	.word	0x080058e9
 80058c0:	080058ff 	.word	0x080058ff
 80058c4:	080058ef 	.word	0x080058ef
 80058c8:	080058ff 	.word	0x080058ff
 80058cc:	080058ff 	.word	0x080058ff
 80058d0:	080058ff 	.word	0x080058ff
 80058d4:	080058f7 	.word	0x080058f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058d8:	f7fe fb96 	bl	8004008 <HAL_RCC_GetPCLK1Freq>
 80058dc:	6178      	str	r0, [r7, #20]
        break;
 80058de:	e013      	b.n	8005908 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058e0:	f7fe fba8 	bl	8004034 <HAL_RCC_GetPCLK2Freq>
 80058e4:	6178      	str	r0, [r7, #20]
        break;
 80058e6:	e00f      	b.n	8005908 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058e8:	4b24      	ldr	r3, [pc, #144]	; (800597c <UART_SetConfig+0x590>)
 80058ea:	617b      	str	r3, [r7, #20]
        break;
 80058ec:	e00c      	b.n	8005908 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ee:	f7fe faf3 	bl	8003ed8 <HAL_RCC_GetSysClockFreq>
 80058f2:	6178      	str	r0, [r7, #20]
        break;
 80058f4:	e008      	b.n	8005908 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058fa:	617b      	str	r3, [r7, #20]
        break;
 80058fc:	e004      	b.n	8005908 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 80058fe:	2300      	movs	r3, #0
 8005900:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	76bb      	strb	r3, [r7, #26]
        break;
 8005906:	bf00      	nop
    }

    if (pclk != 0U)
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d020      	beq.n	8005950 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005912:	4a19      	ldr	r2, [pc, #100]	; (8005978 <UART_SetConfig+0x58c>)
 8005914:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005918:	461a      	mov	r2, r3
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	085b      	lsrs	r3, r3, #1
 8005926:	441a      	add	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005930:	b29b      	uxth	r3, r3
 8005932:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	2b0f      	cmp	r3, #15
 8005938:	d908      	bls.n	800594c <UART_SetConfig+0x560>
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005940:	d204      	bcs.n	800594c <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	60da      	str	r2, [r3, #12]
 800594a:	e001      	b.n	8005950 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800596c:	7ebb      	ldrb	r3, [r7, #26]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3720      	adds	r7, #32
 8005972:	46bd      	mov	sp, r7
 8005974:	bdb0      	pop	{r4, r5, r7, pc}
 8005976:	bf00      	nop
 8005978:	08008c84 	.word	0x08008c84
 800597c:	00f42400 	.word	0x00f42400

08005980 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00a      	beq.n	80059aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	430a      	orrs	r2, r1
 80059a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00a      	beq.n	80059cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	430a      	orrs	r2, r1
 80059ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d0:	f003 0304 	and.w	r3, r3, #4
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00a      	beq.n	80059ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f2:	f003 0308 	and.w	r3, r3, #8
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00a      	beq.n	8005a10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a14:	f003 0310 	and.w	r3, r3, #16
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00a      	beq.n	8005a32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a36:	f003 0320 	and.w	r3, r3, #32
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00a      	beq.n	8005a54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d01a      	beq.n	8005a96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a7e:	d10a      	bne.n	8005a96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	430a      	orrs	r2, r1
 8005a94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00a      	beq.n	8005ab8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	605a      	str	r2, [r3, #4]
  }
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af02      	add	r7, sp, #8
 8005aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ad4:	f7fc fac0 	bl	8002058 <HAL_GetTick>
 8005ad8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0308 	and.w	r3, r3, #8
 8005ae4:	2b08      	cmp	r3, #8
 8005ae6:	d10e      	bne.n	8005b06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ae8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005aec:	9300      	str	r3, [sp, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f82f 	bl	8005b5a <UART_WaitOnFlagUntilTimeout>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e025      	b.n	8005b52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0304 	and.w	r3, r3, #4
 8005b10:	2b04      	cmp	r3, #4
 8005b12:	d10e      	bne.n	8005b32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f819 	bl	8005b5a <UART_WaitOnFlagUntilTimeout>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e00f      	b.n	8005b52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2220      	movs	r2, #32
 8005b36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2220      	movs	r2, #32
 8005b3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b084      	sub	sp, #16
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	60f8      	str	r0, [r7, #12]
 8005b62:	60b9      	str	r1, [r7, #8]
 8005b64:	603b      	str	r3, [r7, #0]
 8005b66:	4613      	mov	r3, r2
 8005b68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b6a:	e062      	b.n	8005c32 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b72:	d05e      	beq.n	8005c32 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b74:	f7fc fa70 	bl	8002058 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d302      	bcc.n	8005b8a <UART_WaitOnFlagUntilTimeout+0x30>
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d11d      	bne.n	8005bc6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b98:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	689a      	ldr	r2, [r3, #8]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f022 0201 	bic.w	r2, r2, #1
 8005ba8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2220      	movs	r2, #32
 8005bae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e045      	b.n	8005c52 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0304 	and.w	r3, r3, #4
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d02e      	beq.n	8005c32 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005be2:	d126      	bne.n	8005c32 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005bfc:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	689a      	ldr	r2, [r3, #8]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0201 	bic.w	r2, r2, #1
 8005c0c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2220      	movs	r2, #32
 8005c12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2220      	movs	r2, #32
 8005c22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e00f      	b.n	8005c52 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	69da      	ldr	r2, [r3, #28]
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	bf0c      	ite	eq
 8005c42:	2301      	moveq	r3, #1
 8005c44:	2300      	movne	r3, #0
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	461a      	mov	r2, r3
 8005c4a:	79fb      	ldrb	r3, [r7, #7]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d08d      	beq.n	8005b6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b085      	sub	sp, #20
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d101      	bne.n	8005c70 <HAL_UARTEx_DisableFifoMode+0x16>
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	e027      	b.n	8005cc0 <HAL_UARTEx_DisableFifoMode+0x66>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2224      	movs	r2, #36	; 0x24
 8005c7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f022 0201 	bic.w	r2, r2, #1
 8005c96:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005c9e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3714      	adds	r7, #20
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d101      	bne.n	8005ce4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	e02d      	b.n	8005d40 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2224      	movs	r2, #36	; 0x24
 8005cf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f022 0201 	bic.w	r2, r2, #1
 8005d0a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 f84f 	bl	8005dc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2220      	movs	r2, #32
 8005d32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d101      	bne.n	8005d60 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	e02d      	b.n	8005dbc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2224      	movs	r2, #36	; 0x24
 8005d6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f022 0201 	bic.w	r2, r2, #1
 8005d86:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f811 	bl	8005dc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2220      	movs	r2, #32
 8005dae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d108      	bne.n	8005de6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005de4:	e031      	b.n	8005e4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005de6:	2308      	movs	r3, #8
 8005de8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005dea:	2308      	movs	r3, #8
 8005dec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	0e5b      	lsrs	r3, r3, #25
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	f003 0307 	and.w	r3, r3, #7
 8005dfc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	0f5b      	lsrs	r3, r3, #29
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	f003 0307 	and.w	r3, r3, #7
 8005e0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e0e:	7bbb      	ldrb	r3, [r7, #14]
 8005e10:	7b3a      	ldrb	r2, [r7, #12]
 8005e12:	4911      	ldr	r1, [pc, #68]	; (8005e58 <UARTEx_SetNbDataToProcess+0x94>)
 8005e14:	5c8a      	ldrb	r2, [r1, r2]
 8005e16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e1a:	7b3a      	ldrb	r2, [r7, #12]
 8005e1c:	490f      	ldr	r1, [pc, #60]	; (8005e5c <UARTEx_SetNbDataToProcess+0x98>)
 8005e1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e20:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
 8005e2e:	7b7a      	ldrb	r2, [r7, #13]
 8005e30:	4909      	ldr	r1, [pc, #36]	; (8005e58 <UARTEx_SetNbDataToProcess+0x94>)
 8005e32:	5c8a      	ldrb	r2, [r1, r2]
 8005e34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e38:	7b7a      	ldrb	r2, [r7, #13]
 8005e3a:	4908      	ldr	r1, [pc, #32]	; (8005e5c <UARTEx_SetNbDataToProcess+0x98>)
 8005e3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005e4a:	bf00      	nop
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	08008c9c 	.word	0x08008c9c
 8005e5c:	08008ca4 	.word	0x08008ca4

08005e60 <__errno>:
 8005e60:	4b01      	ldr	r3, [pc, #4]	; (8005e68 <__errno+0x8>)
 8005e62:	6818      	ldr	r0, [r3, #0]
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	20000034 	.word	0x20000034

08005e6c <__libc_init_array>:
 8005e6c:	b570      	push	{r4, r5, r6, lr}
 8005e6e:	4d0d      	ldr	r5, [pc, #52]	; (8005ea4 <__libc_init_array+0x38>)
 8005e70:	4c0d      	ldr	r4, [pc, #52]	; (8005ea8 <__libc_init_array+0x3c>)
 8005e72:	1b64      	subs	r4, r4, r5
 8005e74:	10a4      	asrs	r4, r4, #2
 8005e76:	2600      	movs	r6, #0
 8005e78:	42a6      	cmp	r6, r4
 8005e7a:	d109      	bne.n	8005e90 <__libc_init_array+0x24>
 8005e7c:	4d0b      	ldr	r5, [pc, #44]	; (8005eac <__libc_init_array+0x40>)
 8005e7e:	4c0c      	ldr	r4, [pc, #48]	; (8005eb0 <__libc_init_array+0x44>)
 8005e80:	f002 feb6 	bl	8008bf0 <_init>
 8005e84:	1b64      	subs	r4, r4, r5
 8005e86:	10a4      	asrs	r4, r4, #2
 8005e88:	2600      	movs	r6, #0
 8005e8a:	42a6      	cmp	r6, r4
 8005e8c:	d105      	bne.n	8005e9a <__libc_init_array+0x2e>
 8005e8e:	bd70      	pop	{r4, r5, r6, pc}
 8005e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e94:	4798      	blx	r3
 8005e96:	3601      	adds	r6, #1
 8005e98:	e7ee      	b.n	8005e78 <__libc_init_array+0xc>
 8005e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e9e:	4798      	blx	r3
 8005ea0:	3601      	adds	r6, #1
 8005ea2:	e7f2      	b.n	8005e8a <__libc_init_array+0x1e>
 8005ea4:	08009094 	.word	0x08009094
 8005ea8:	08009094 	.word	0x08009094
 8005eac:	08009094 	.word	0x08009094
 8005eb0:	08009098 	.word	0x08009098

08005eb4 <memcpy>:
 8005eb4:	440a      	add	r2, r1
 8005eb6:	4291      	cmp	r1, r2
 8005eb8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005ebc:	d100      	bne.n	8005ec0 <memcpy+0xc>
 8005ebe:	4770      	bx	lr
 8005ec0:	b510      	push	{r4, lr}
 8005ec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ec6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005eca:	4291      	cmp	r1, r2
 8005ecc:	d1f9      	bne.n	8005ec2 <memcpy+0xe>
 8005ece:	bd10      	pop	{r4, pc}

08005ed0 <memset>:
 8005ed0:	4402      	add	r2, r0
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d100      	bne.n	8005eda <memset+0xa>
 8005ed8:	4770      	bx	lr
 8005eda:	f803 1b01 	strb.w	r1, [r3], #1
 8005ede:	e7f9      	b.n	8005ed4 <memset+0x4>

08005ee0 <__cvt>:
 8005ee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ee4:	ec55 4b10 	vmov	r4, r5, d0
 8005ee8:	2d00      	cmp	r5, #0
 8005eea:	460e      	mov	r6, r1
 8005eec:	4619      	mov	r1, r3
 8005eee:	462b      	mov	r3, r5
 8005ef0:	bfbb      	ittet	lt
 8005ef2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005ef6:	461d      	movlt	r5, r3
 8005ef8:	2300      	movge	r3, #0
 8005efa:	232d      	movlt	r3, #45	; 0x2d
 8005efc:	700b      	strb	r3, [r1, #0]
 8005efe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f00:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005f04:	4691      	mov	r9, r2
 8005f06:	f023 0820 	bic.w	r8, r3, #32
 8005f0a:	bfbc      	itt	lt
 8005f0c:	4622      	movlt	r2, r4
 8005f0e:	4614      	movlt	r4, r2
 8005f10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f14:	d005      	beq.n	8005f22 <__cvt+0x42>
 8005f16:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005f1a:	d100      	bne.n	8005f1e <__cvt+0x3e>
 8005f1c:	3601      	adds	r6, #1
 8005f1e:	2102      	movs	r1, #2
 8005f20:	e000      	b.n	8005f24 <__cvt+0x44>
 8005f22:	2103      	movs	r1, #3
 8005f24:	ab03      	add	r3, sp, #12
 8005f26:	9301      	str	r3, [sp, #4]
 8005f28:	ab02      	add	r3, sp, #8
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	ec45 4b10 	vmov	d0, r4, r5
 8005f30:	4653      	mov	r3, sl
 8005f32:	4632      	mov	r2, r6
 8005f34:	f000 fcec 	bl	8006910 <_dtoa_r>
 8005f38:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005f3c:	4607      	mov	r7, r0
 8005f3e:	d102      	bne.n	8005f46 <__cvt+0x66>
 8005f40:	f019 0f01 	tst.w	r9, #1
 8005f44:	d022      	beq.n	8005f8c <__cvt+0xac>
 8005f46:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f4a:	eb07 0906 	add.w	r9, r7, r6
 8005f4e:	d110      	bne.n	8005f72 <__cvt+0x92>
 8005f50:	783b      	ldrb	r3, [r7, #0]
 8005f52:	2b30      	cmp	r3, #48	; 0x30
 8005f54:	d10a      	bne.n	8005f6c <__cvt+0x8c>
 8005f56:	2200      	movs	r2, #0
 8005f58:	2300      	movs	r3, #0
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	4629      	mov	r1, r5
 8005f5e:	f7fa fdcb 	bl	8000af8 <__aeabi_dcmpeq>
 8005f62:	b918      	cbnz	r0, 8005f6c <__cvt+0x8c>
 8005f64:	f1c6 0601 	rsb	r6, r6, #1
 8005f68:	f8ca 6000 	str.w	r6, [sl]
 8005f6c:	f8da 3000 	ldr.w	r3, [sl]
 8005f70:	4499      	add	r9, r3
 8005f72:	2200      	movs	r2, #0
 8005f74:	2300      	movs	r3, #0
 8005f76:	4620      	mov	r0, r4
 8005f78:	4629      	mov	r1, r5
 8005f7a:	f7fa fdbd 	bl	8000af8 <__aeabi_dcmpeq>
 8005f7e:	b108      	cbz	r0, 8005f84 <__cvt+0xa4>
 8005f80:	f8cd 900c 	str.w	r9, [sp, #12]
 8005f84:	2230      	movs	r2, #48	; 0x30
 8005f86:	9b03      	ldr	r3, [sp, #12]
 8005f88:	454b      	cmp	r3, r9
 8005f8a:	d307      	bcc.n	8005f9c <__cvt+0xbc>
 8005f8c:	9b03      	ldr	r3, [sp, #12]
 8005f8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f90:	1bdb      	subs	r3, r3, r7
 8005f92:	4638      	mov	r0, r7
 8005f94:	6013      	str	r3, [r2, #0]
 8005f96:	b004      	add	sp, #16
 8005f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f9c:	1c59      	adds	r1, r3, #1
 8005f9e:	9103      	str	r1, [sp, #12]
 8005fa0:	701a      	strb	r2, [r3, #0]
 8005fa2:	e7f0      	b.n	8005f86 <__cvt+0xa6>

08005fa4 <__exponent>:
 8005fa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2900      	cmp	r1, #0
 8005faa:	bfb8      	it	lt
 8005fac:	4249      	neglt	r1, r1
 8005fae:	f803 2b02 	strb.w	r2, [r3], #2
 8005fb2:	bfb4      	ite	lt
 8005fb4:	222d      	movlt	r2, #45	; 0x2d
 8005fb6:	222b      	movge	r2, #43	; 0x2b
 8005fb8:	2909      	cmp	r1, #9
 8005fba:	7042      	strb	r2, [r0, #1]
 8005fbc:	dd2a      	ble.n	8006014 <__exponent+0x70>
 8005fbe:	f10d 0407 	add.w	r4, sp, #7
 8005fc2:	46a4      	mov	ip, r4
 8005fc4:	270a      	movs	r7, #10
 8005fc6:	46a6      	mov	lr, r4
 8005fc8:	460a      	mov	r2, r1
 8005fca:	fb91 f6f7 	sdiv	r6, r1, r7
 8005fce:	fb07 1516 	mls	r5, r7, r6, r1
 8005fd2:	3530      	adds	r5, #48	; 0x30
 8005fd4:	2a63      	cmp	r2, #99	; 0x63
 8005fd6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005fda:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005fde:	4631      	mov	r1, r6
 8005fe0:	dcf1      	bgt.n	8005fc6 <__exponent+0x22>
 8005fe2:	3130      	adds	r1, #48	; 0x30
 8005fe4:	f1ae 0502 	sub.w	r5, lr, #2
 8005fe8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005fec:	1c44      	adds	r4, r0, #1
 8005fee:	4629      	mov	r1, r5
 8005ff0:	4561      	cmp	r1, ip
 8005ff2:	d30a      	bcc.n	800600a <__exponent+0x66>
 8005ff4:	f10d 0209 	add.w	r2, sp, #9
 8005ff8:	eba2 020e 	sub.w	r2, r2, lr
 8005ffc:	4565      	cmp	r5, ip
 8005ffe:	bf88      	it	hi
 8006000:	2200      	movhi	r2, #0
 8006002:	4413      	add	r3, r2
 8006004:	1a18      	subs	r0, r3, r0
 8006006:	b003      	add	sp, #12
 8006008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800600a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800600e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006012:	e7ed      	b.n	8005ff0 <__exponent+0x4c>
 8006014:	2330      	movs	r3, #48	; 0x30
 8006016:	3130      	adds	r1, #48	; 0x30
 8006018:	7083      	strb	r3, [r0, #2]
 800601a:	70c1      	strb	r1, [r0, #3]
 800601c:	1d03      	adds	r3, r0, #4
 800601e:	e7f1      	b.n	8006004 <__exponent+0x60>

08006020 <_printf_float>:
 8006020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006024:	ed2d 8b02 	vpush	{d8}
 8006028:	b08d      	sub	sp, #52	; 0x34
 800602a:	460c      	mov	r4, r1
 800602c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006030:	4616      	mov	r6, r2
 8006032:	461f      	mov	r7, r3
 8006034:	4605      	mov	r5, r0
 8006036:	f001 fa57 	bl	80074e8 <_localeconv_r>
 800603a:	f8d0 a000 	ldr.w	sl, [r0]
 800603e:	4650      	mov	r0, sl
 8006040:	f7fa f8de 	bl	8000200 <strlen>
 8006044:	2300      	movs	r3, #0
 8006046:	930a      	str	r3, [sp, #40]	; 0x28
 8006048:	6823      	ldr	r3, [r4, #0]
 800604a:	9305      	str	r3, [sp, #20]
 800604c:	f8d8 3000 	ldr.w	r3, [r8]
 8006050:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006054:	3307      	adds	r3, #7
 8006056:	f023 0307 	bic.w	r3, r3, #7
 800605a:	f103 0208 	add.w	r2, r3, #8
 800605e:	f8c8 2000 	str.w	r2, [r8]
 8006062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006066:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800606a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800606e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006072:	9307      	str	r3, [sp, #28]
 8006074:	f8cd 8018 	str.w	r8, [sp, #24]
 8006078:	ee08 0a10 	vmov	s16, r0
 800607c:	4b9f      	ldr	r3, [pc, #636]	; (80062fc <_printf_float+0x2dc>)
 800607e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006082:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006086:	f7fa fd69 	bl	8000b5c <__aeabi_dcmpun>
 800608a:	bb88      	cbnz	r0, 80060f0 <_printf_float+0xd0>
 800608c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006090:	4b9a      	ldr	r3, [pc, #616]	; (80062fc <_printf_float+0x2dc>)
 8006092:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006096:	f7fa fd43 	bl	8000b20 <__aeabi_dcmple>
 800609a:	bb48      	cbnz	r0, 80060f0 <_printf_float+0xd0>
 800609c:	2200      	movs	r2, #0
 800609e:	2300      	movs	r3, #0
 80060a0:	4640      	mov	r0, r8
 80060a2:	4649      	mov	r1, r9
 80060a4:	f7fa fd32 	bl	8000b0c <__aeabi_dcmplt>
 80060a8:	b110      	cbz	r0, 80060b0 <_printf_float+0x90>
 80060aa:	232d      	movs	r3, #45	; 0x2d
 80060ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060b0:	4b93      	ldr	r3, [pc, #588]	; (8006300 <_printf_float+0x2e0>)
 80060b2:	4894      	ldr	r0, [pc, #592]	; (8006304 <_printf_float+0x2e4>)
 80060b4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80060b8:	bf94      	ite	ls
 80060ba:	4698      	movls	r8, r3
 80060bc:	4680      	movhi	r8, r0
 80060be:	2303      	movs	r3, #3
 80060c0:	6123      	str	r3, [r4, #16]
 80060c2:	9b05      	ldr	r3, [sp, #20]
 80060c4:	f023 0204 	bic.w	r2, r3, #4
 80060c8:	6022      	str	r2, [r4, #0]
 80060ca:	f04f 0900 	mov.w	r9, #0
 80060ce:	9700      	str	r7, [sp, #0]
 80060d0:	4633      	mov	r3, r6
 80060d2:	aa0b      	add	r2, sp, #44	; 0x2c
 80060d4:	4621      	mov	r1, r4
 80060d6:	4628      	mov	r0, r5
 80060d8:	f000 f9d8 	bl	800648c <_printf_common>
 80060dc:	3001      	adds	r0, #1
 80060de:	f040 8090 	bne.w	8006202 <_printf_float+0x1e2>
 80060e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060e6:	b00d      	add	sp, #52	; 0x34
 80060e8:	ecbd 8b02 	vpop	{d8}
 80060ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f0:	4642      	mov	r2, r8
 80060f2:	464b      	mov	r3, r9
 80060f4:	4640      	mov	r0, r8
 80060f6:	4649      	mov	r1, r9
 80060f8:	f7fa fd30 	bl	8000b5c <__aeabi_dcmpun>
 80060fc:	b140      	cbz	r0, 8006110 <_printf_float+0xf0>
 80060fe:	464b      	mov	r3, r9
 8006100:	2b00      	cmp	r3, #0
 8006102:	bfbc      	itt	lt
 8006104:	232d      	movlt	r3, #45	; 0x2d
 8006106:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800610a:	487f      	ldr	r0, [pc, #508]	; (8006308 <_printf_float+0x2e8>)
 800610c:	4b7f      	ldr	r3, [pc, #508]	; (800630c <_printf_float+0x2ec>)
 800610e:	e7d1      	b.n	80060b4 <_printf_float+0x94>
 8006110:	6863      	ldr	r3, [r4, #4]
 8006112:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006116:	9206      	str	r2, [sp, #24]
 8006118:	1c5a      	adds	r2, r3, #1
 800611a:	d13f      	bne.n	800619c <_printf_float+0x17c>
 800611c:	2306      	movs	r3, #6
 800611e:	6063      	str	r3, [r4, #4]
 8006120:	9b05      	ldr	r3, [sp, #20]
 8006122:	6861      	ldr	r1, [r4, #4]
 8006124:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006128:	2300      	movs	r3, #0
 800612a:	9303      	str	r3, [sp, #12]
 800612c:	ab0a      	add	r3, sp, #40	; 0x28
 800612e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006132:	ab09      	add	r3, sp, #36	; 0x24
 8006134:	ec49 8b10 	vmov	d0, r8, r9
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	6022      	str	r2, [r4, #0]
 800613c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006140:	4628      	mov	r0, r5
 8006142:	f7ff fecd 	bl	8005ee0 <__cvt>
 8006146:	9b06      	ldr	r3, [sp, #24]
 8006148:	9909      	ldr	r1, [sp, #36]	; 0x24
 800614a:	2b47      	cmp	r3, #71	; 0x47
 800614c:	4680      	mov	r8, r0
 800614e:	d108      	bne.n	8006162 <_printf_float+0x142>
 8006150:	1cc8      	adds	r0, r1, #3
 8006152:	db02      	blt.n	800615a <_printf_float+0x13a>
 8006154:	6863      	ldr	r3, [r4, #4]
 8006156:	4299      	cmp	r1, r3
 8006158:	dd41      	ble.n	80061de <_printf_float+0x1be>
 800615a:	f1ab 0b02 	sub.w	fp, fp, #2
 800615e:	fa5f fb8b 	uxtb.w	fp, fp
 8006162:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006166:	d820      	bhi.n	80061aa <_printf_float+0x18a>
 8006168:	3901      	subs	r1, #1
 800616a:	465a      	mov	r2, fp
 800616c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006170:	9109      	str	r1, [sp, #36]	; 0x24
 8006172:	f7ff ff17 	bl	8005fa4 <__exponent>
 8006176:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006178:	1813      	adds	r3, r2, r0
 800617a:	2a01      	cmp	r2, #1
 800617c:	4681      	mov	r9, r0
 800617e:	6123      	str	r3, [r4, #16]
 8006180:	dc02      	bgt.n	8006188 <_printf_float+0x168>
 8006182:	6822      	ldr	r2, [r4, #0]
 8006184:	07d2      	lsls	r2, r2, #31
 8006186:	d501      	bpl.n	800618c <_printf_float+0x16c>
 8006188:	3301      	adds	r3, #1
 800618a:	6123      	str	r3, [r4, #16]
 800618c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006190:	2b00      	cmp	r3, #0
 8006192:	d09c      	beq.n	80060ce <_printf_float+0xae>
 8006194:	232d      	movs	r3, #45	; 0x2d
 8006196:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800619a:	e798      	b.n	80060ce <_printf_float+0xae>
 800619c:	9a06      	ldr	r2, [sp, #24]
 800619e:	2a47      	cmp	r2, #71	; 0x47
 80061a0:	d1be      	bne.n	8006120 <_printf_float+0x100>
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1bc      	bne.n	8006120 <_printf_float+0x100>
 80061a6:	2301      	movs	r3, #1
 80061a8:	e7b9      	b.n	800611e <_printf_float+0xfe>
 80061aa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80061ae:	d118      	bne.n	80061e2 <_printf_float+0x1c2>
 80061b0:	2900      	cmp	r1, #0
 80061b2:	6863      	ldr	r3, [r4, #4]
 80061b4:	dd0b      	ble.n	80061ce <_printf_float+0x1ae>
 80061b6:	6121      	str	r1, [r4, #16]
 80061b8:	b913      	cbnz	r3, 80061c0 <_printf_float+0x1a0>
 80061ba:	6822      	ldr	r2, [r4, #0]
 80061bc:	07d0      	lsls	r0, r2, #31
 80061be:	d502      	bpl.n	80061c6 <_printf_float+0x1a6>
 80061c0:	3301      	adds	r3, #1
 80061c2:	440b      	add	r3, r1
 80061c4:	6123      	str	r3, [r4, #16]
 80061c6:	65a1      	str	r1, [r4, #88]	; 0x58
 80061c8:	f04f 0900 	mov.w	r9, #0
 80061cc:	e7de      	b.n	800618c <_printf_float+0x16c>
 80061ce:	b913      	cbnz	r3, 80061d6 <_printf_float+0x1b6>
 80061d0:	6822      	ldr	r2, [r4, #0]
 80061d2:	07d2      	lsls	r2, r2, #31
 80061d4:	d501      	bpl.n	80061da <_printf_float+0x1ba>
 80061d6:	3302      	adds	r3, #2
 80061d8:	e7f4      	b.n	80061c4 <_printf_float+0x1a4>
 80061da:	2301      	movs	r3, #1
 80061dc:	e7f2      	b.n	80061c4 <_printf_float+0x1a4>
 80061de:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80061e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061e4:	4299      	cmp	r1, r3
 80061e6:	db05      	blt.n	80061f4 <_printf_float+0x1d4>
 80061e8:	6823      	ldr	r3, [r4, #0]
 80061ea:	6121      	str	r1, [r4, #16]
 80061ec:	07d8      	lsls	r0, r3, #31
 80061ee:	d5ea      	bpl.n	80061c6 <_printf_float+0x1a6>
 80061f0:	1c4b      	adds	r3, r1, #1
 80061f2:	e7e7      	b.n	80061c4 <_printf_float+0x1a4>
 80061f4:	2900      	cmp	r1, #0
 80061f6:	bfd4      	ite	le
 80061f8:	f1c1 0202 	rsble	r2, r1, #2
 80061fc:	2201      	movgt	r2, #1
 80061fe:	4413      	add	r3, r2
 8006200:	e7e0      	b.n	80061c4 <_printf_float+0x1a4>
 8006202:	6823      	ldr	r3, [r4, #0]
 8006204:	055a      	lsls	r2, r3, #21
 8006206:	d407      	bmi.n	8006218 <_printf_float+0x1f8>
 8006208:	6923      	ldr	r3, [r4, #16]
 800620a:	4642      	mov	r2, r8
 800620c:	4631      	mov	r1, r6
 800620e:	4628      	mov	r0, r5
 8006210:	47b8      	blx	r7
 8006212:	3001      	adds	r0, #1
 8006214:	d12c      	bne.n	8006270 <_printf_float+0x250>
 8006216:	e764      	b.n	80060e2 <_printf_float+0xc2>
 8006218:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800621c:	f240 80e0 	bls.w	80063e0 <_printf_float+0x3c0>
 8006220:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006224:	2200      	movs	r2, #0
 8006226:	2300      	movs	r3, #0
 8006228:	f7fa fc66 	bl	8000af8 <__aeabi_dcmpeq>
 800622c:	2800      	cmp	r0, #0
 800622e:	d034      	beq.n	800629a <_printf_float+0x27a>
 8006230:	4a37      	ldr	r2, [pc, #220]	; (8006310 <_printf_float+0x2f0>)
 8006232:	2301      	movs	r3, #1
 8006234:	4631      	mov	r1, r6
 8006236:	4628      	mov	r0, r5
 8006238:	47b8      	blx	r7
 800623a:	3001      	adds	r0, #1
 800623c:	f43f af51 	beq.w	80060e2 <_printf_float+0xc2>
 8006240:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006244:	429a      	cmp	r2, r3
 8006246:	db02      	blt.n	800624e <_printf_float+0x22e>
 8006248:	6823      	ldr	r3, [r4, #0]
 800624a:	07d8      	lsls	r0, r3, #31
 800624c:	d510      	bpl.n	8006270 <_printf_float+0x250>
 800624e:	ee18 3a10 	vmov	r3, s16
 8006252:	4652      	mov	r2, sl
 8006254:	4631      	mov	r1, r6
 8006256:	4628      	mov	r0, r5
 8006258:	47b8      	blx	r7
 800625a:	3001      	adds	r0, #1
 800625c:	f43f af41 	beq.w	80060e2 <_printf_float+0xc2>
 8006260:	f04f 0800 	mov.w	r8, #0
 8006264:	f104 091a 	add.w	r9, r4, #26
 8006268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800626a:	3b01      	subs	r3, #1
 800626c:	4543      	cmp	r3, r8
 800626e:	dc09      	bgt.n	8006284 <_printf_float+0x264>
 8006270:	6823      	ldr	r3, [r4, #0]
 8006272:	079b      	lsls	r3, r3, #30
 8006274:	f100 8105 	bmi.w	8006482 <_printf_float+0x462>
 8006278:	68e0      	ldr	r0, [r4, #12]
 800627a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800627c:	4298      	cmp	r0, r3
 800627e:	bfb8      	it	lt
 8006280:	4618      	movlt	r0, r3
 8006282:	e730      	b.n	80060e6 <_printf_float+0xc6>
 8006284:	2301      	movs	r3, #1
 8006286:	464a      	mov	r2, r9
 8006288:	4631      	mov	r1, r6
 800628a:	4628      	mov	r0, r5
 800628c:	47b8      	blx	r7
 800628e:	3001      	adds	r0, #1
 8006290:	f43f af27 	beq.w	80060e2 <_printf_float+0xc2>
 8006294:	f108 0801 	add.w	r8, r8, #1
 8006298:	e7e6      	b.n	8006268 <_printf_float+0x248>
 800629a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800629c:	2b00      	cmp	r3, #0
 800629e:	dc39      	bgt.n	8006314 <_printf_float+0x2f4>
 80062a0:	4a1b      	ldr	r2, [pc, #108]	; (8006310 <_printf_float+0x2f0>)
 80062a2:	2301      	movs	r3, #1
 80062a4:	4631      	mov	r1, r6
 80062a6:	4628      	mov	r0, r5
 80062a8:	47b8      	blx	r7
 80062aa:	3001      	adds	r0, #1
 80062ac:	f43f af19 	beq.w	80060e2 <_printf_float+0xc2>
 80062b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062b4:	4313      	orrs	r3, r2
 80062b6:	d102      	bne.n	80062be <_printf_float+0x29e>
 80062b8:	6823      	ldr	r3, [r4, #0]
 80062ba:	07d9      	lsls	r1, r3, #31
 80062bc:	d5d8      	bpl.n	8006270 <_printf_float+0x250>
 80062be:	ee18 3a10 	vmov	r3, s16
 80062c2:	4652      	mov	r2, sl
 80062c4:	4631      	mov	r1, r6
 80062c6:	4628      	mov	r0, r5
 80062c8:	47b8      	blx	r7
 80062ca:	3001      	adds	r0, #1
 80062cc:	f43f af09 	beq.w	80060e2 <_printf_float+0xc2>
 80062d0:	f04f 0900 	mov.w	r9, #0
 80062d4:	f104 0a1a 	add.w	sl, r4, #26
 80062d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062da:	425b      	negs	r3, r3
 80062dc:	454b      	cmp	r3, r9
 80062de:	dc01      	bgt.n	80062e4 <_printf_float+0x2c4>
 80062e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062e2:	e792      	b.n	800620a <_printf_float+0x1ea>
 80062e4:	2301      	movs	r3, #1
 80062e6:	4652      	mov	r2, sl
 80062e8:	4631      	mov	r1, r6
 80062ea:	4628      	mov	r0, r5
 80062ec:	47b8      	blx	r7
 80062ee:	3001      	adds	r0, #1
 80062f0:	f43f aef7 	beq.w	80060e2 <_printf_float+0xc2>
 80062f4:	f109 0901 	add.w	r9, r9, #1
 80062f8:	e7ee      	b.n	80062d8 <_printf_float+0x2b8>
 80062fa:	bf00      	nop
 80062fc:	7fefffff 	.word	0x7fefffff
 8006300:	08008cb0 	.word	0x08008cb0
 8006304:	08008cb4 	.word	0x08008cb4
 8006308:	08008cbc 	.word	0x08008cbc
 800630c:	08008cb8 	.word	0x08008cb8
 8006310:	08008cc0 	.word	0x08008cc0
 8006314:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006316:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006318:	429a      	cmp	r2, r3
 800631a:	bfa8      	it	ge
 800631c:	461a      	movge	r2, r3
 800631e:	2a00      	cmp	r2, #0
 8006320:	4691      	mov	r9, r2
 8006322:	dc37      	bgt.n	8006394 <_printf_float+0x374>
 8006324:	f04f 0b00 	mov.w	fp, #0
 8006328:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800632c:	f104 021a 	add.w	r2, r4, #26
 8006330:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006332:	9305      	str	r3, [sp, #20]
 8006334:	eba3 0309 	sub.w	r3, r3, r9
 8006338:	455b      	cmp	r3, fp
 800633a:	dc33      	bgt.n	80063a4 <_printf_float+0x384>
 800633c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006340:	429a      	cmp	r2, r3
 8006342:	db3b      	blt.n	80063bc <_printf_float+0x39c>
 8006344:	6823      	ldr	r3, [r4, #0]
 8006346:	07da      	lsls	r2, r3, #31
 8006348:	d438      	bmi.n	80063bc <_printf_float+0x39c>
 800634a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800634c:	9b05      	ldr	r3, [sp, #20]
 800634e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	eba2 0901 	sub.w	r9, r2, r1
 8006356:	4599      	cmp	r9, r3
 8006358:	bfa8      	it	ge
 800635a:	4699      	movge	r9, r3
 800635c:	f1b9 0f00 	cmp.w	r9, #0
 8006360:	dc35      	bgt.n	80063ce <_printf_float+0x3ae>
 8006362:	f04f 0800 	mov.w	r8, #0
 8006366:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800636a:	f104 0a1a 	add.w	sl, r4, #26
 800636e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006372:	1a9b      	subs	r3, r3, r2
 8006374:	eba3 0309 	sub.w	r3, r3, r9
 8006378:	4543      	cmp	r3, r8
 800637a:	f77f af79 	ble.w	8006270 <_printf_float+0x250>
 800637e:	2301      	movs	r3, #1
 8006380:	4652      	mov	r2, sl
 8006382:	4631      	mov	r1, r6
 8006384:	4628      	mov	r0, r5
 8006386:	47b8      	blx	r7
 8006388:	3001      	adds	r0, #1
 800638a:	f43f aeaa 	beq.w	80060e2 <_printf_float+0xc2>
 800638e:	f108 0801 	add.w	r8, r8, #1
 8006392:	e7ec      	b.n	800636e <_printf_float+0x34e>
 8006394:	4613      	mov	r3, r2
 8006396:	4631      	mov	r1, r6
 8006398:	4642      	mov	r2, r8
 800639a:	4628      	mov	r0, r5
 800639c:	47b8      	blx	r7
 800639e:	3001      	adds	r0, #1
 80063a0:	d1c0      	bne.n	8006324 <_printf_float+0x304>
 80063a2:	e69e      	b.n	80060e2 <_printf_float+0xc2>
 80063a4:	2301      	movs	r3, #1
 80063a6:	4631      	mov	r1, r6
 80063a8:	4628      	mov	r0, r5
 80063aa:	9205      	str	r2, [sp, #20]
 80063ac:	47b8      	blx	r7
 80063ae:	3001      	adds	r0, #1
 80063b0:	f43f ae97 	beq.w	80060e2 <_printf_float+0xc2>
 80063b4:	9a05      	ldr	r2, [sp, #20]
 80063b6:	f10b 0b01 	add.w	fp, fp, #1
 80063ba:	e7b9      	b.n	8006330 <_printf_float+0x310>
 80063bc:	ee18 3a10 	vmov	r3, s16
 80063c0:	4652      	mov	r2, sl
 80063c2:	4631      	mov	r1, r6
 80063c4:	4628      	mov	r0, r5
 80063c6:	47b8      	blx	r7
 80063c8:	3001      	adds	r0, #1
 80063ca:	d1be      	bne.n	800634a <_printf_float+0x32a>
 80063cc:	e689      	b.n	80060e2 <_printf_float+0xc2>
 80063ce:	9a05      	ldr	r2, [sp, #20]
 80063d0:	464b      	mov	r3, r9
 80063d2:	4442      	add	r2, r8
 80063d4:	4631      	mov	r1, r6
 80063d6:	4628      	mov	r0, r5
 80063d8:	47b8      	blx	r7
 80063da:	3001      	adds	r0, #1
 80063dc:	d1c1      	bne.n	8006362 <_printf_float+0x342>
 80063de:	e680      	b.n	80060e2 <_printf_float+0xc2>
 80063e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063e2:	2a01      	cmp	r2, #1
 80063e4:	dc01      	bgt.n	80063ea <_printf_float+0x3ca>
 80063e6:	07db      	lsls	r3, r3, #31
 80063e8:	d538      	bpl.n	800645c <_printf_float+0x43c>
 80063ea:	2301      	movs	r3, #1
 80063ec:	4642      	mov	r2, r8
 80063ee:	4631      	mov	r1, r6
 80063f0:	4628      	mov	r0, r5
 80063f2:	47b8      	blx	r7
 80063f4:	3001      	adds	r0, #1
 80063f6:	f43f ae74 	beq.w	80060e2 <_printf_float+0xc2>
 80063fa:	ee18 3a10 	vmov	r3, s16
 80063fe:	4652      	mov	r2, sl
 8006400:	4631      	mov	r1, r6
 8006402:	4628      	mov	r0, r5
 8006404:	47b8      	blx	r7
 8006406:	3001      	adds	r0, #1
 8006408:	f43f ae6b 	beq.w	80060e2 <_printf_float+0xc2>
 800640c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006410:	2200      	movs	r2, #0
 8006412:	2300      	movs	r3, #0
 8006414:	f7fa fb70 	bl	8000af8 <__aeabi_dcmpeq>
 8006418:	b9d8      	cbnz	r0, 8006452 <_printf_float+0x432>
 800641a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800641c:	f108 0201 	add.w	r2, r8, #1
 8006420:	3b01      	subs	r3, #1
 8006422:	4631      	mov	r1, r6
 8006424:	4628      	mov	r0, r5
 8006426:	47b8      	blx	r7
 8006428:	3001      	adds	r0, #1
 800642a:	d10e      	bne.n	800644a <_printf_float+0x42a>
 800642c:	e659      	b.n	80060e2 <_printf_float+0xc2>
 800642e:	2301      	movs	r3, #1
 8006430:	4652      	mov	r2, sl
 8006432:	4631      	mov	r1, r6
 8006434:	4628      	mov	r0, r5
 8006436:	47b8      	blx	r7
 8006438:	3001      	adds	r0, #1
 800643a:	f43f ae52 	beq.w	80060e2 <_printf_float+0xc2>
 800643e:	f108 0801 	add.w	r8, r8, #1
 8006442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006444:	3b01      	subs	r3, #1
 8006446:	4543      	cmp	r3, r8
 8006448:	dcf1      	bgt.n	800642e <_printf_float+0x40e>
 800644a:	464b      	mov	r3, r9
 800644c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006450:	e6dc      	b.n	800620c <_printf_float+0x1ec>
 8006452:	f04f 0800 	mov.w	r8, #0
 8006456:	f104 0a1a 	add.w	sl, r4, #26
 800645a:	e7f2      	b.n	8006442 <_printf_float+0x422>
 800645c:	2301      	movs	r3, #1
 800645e:	4642      	mov	r2, r8
 8006460:	e7df      	b.n	8006422 <_printf_float+0x402>
 8006462:	2301      	movs	r3, #1
 8006464:	464a      	mov	r2, r9
 8006466:	4631      	mov	r1, r6
 8006468:	4628      	mov	r0, r5
 800646a:	47b8      	blx	r7
 800646c:	3001      	adds	r0, #1
 800646e:	f43f ae38 	beq.w	80060e2 <_printf_float+0xc2>
 8006472:	f108 0801 	add.w	r8, r8, #1
 8006476:	68e3      	ldr	r3, [r4, #12]
 8006478:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800647a:	1a5b      	subs	r3, r3, r1
 800647c:	4543      	cmp	r3, r8
 800647e:	dcf0      	bgt.n	8006462 <_printf_float+0x442>
 8006480:	e6fa      	b.n	8006278 <_printf_float+0x258>
 8006482:	f04f 0800 	mov.w	r8, #0
 8006486:	f104 0919 	add.w	r9, r4, #25
 800648a:	e7f4      	b.n	8006476 <_printf_float+0x456>

0800648c <_printf_common>:
 800648c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006490:	4616      	mov	r6, r2
 8006492:	4699      	mov	r9, r3
 8006494:	688a      	ldr	r2, [r1, #8]
 8006496:	690b      	ldr	r3, [r1, #16]
 8006498:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800649c:	4293      	cmp	r3, r2
 800649e:	bfb8      	it	lt
 80064a0:	4613      	movlt	r3, r2
 80064a2:	6033      	str	r3, [r6, #0]
 80064a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064a8:	4607      	mov	r7, r0
 80064aa:	460c      	mov	r4, r1
 80064ac:	b10a      	cbz	r2, 80064b2 <_printf_common+0x26>
 80064ae:	3301      	adds	r3, #1
 80064b0:	6033      	str	r3, [r6, #0]
 80064b2:	6823      	ldr	r3, [r4, #0]
 80064b4:	0699      	lsls	r1, r3, #26
 80064b6:	bf42      	ittt	mi
 80064b8:	6833      	ldrmi	r3, [r6, #0]
 80064ba:	3302      	addmi	r3, #2
 80064bc:	6033      	strmi	r3, [r6, #0]
 80064be:	6825      	ldr	r5, [r4, #0]
 80064c0:	f015 0506 	ands.w	r5, r5, #6
 80064c4:	d106      	bne.n	80064d4 <_printf_common+0x48>
 80064c6:	f104 0a19 	add.w	sl, r4, #25
 80064ca:	68e3      	ldr	r3, [r4, #12]
 80064cc:	6832      	ldr	r2, [r6, #0]
 80064ce:	1a9b      	subs	r3, r3, r2
 80064d0:	42ab      	cmp	r3, r5
 80064d2:	dc26      	bgt.n	8006522 <_printf_common+0x96>
 80064d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064d8:	1e13      	subs	r3, r2, #0
 80064da:	6822      	ldr	r2, [r4, #0]
 80064dc:	bf18      	it	ne
 80064de:	2301      	movne	r3, #1
 80064e0:	0692      	lsls	r2, r2, #26
 80064e2:	d42b      	bmi.n	800653c <_printf_common+0xb0>
 80064e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064e8:	4649      	mov	r1, r9
 80064ea:	4638      	mov	r0, r7
 80064ec:	47c0      	blx	r8
 80064ee:	3001      	adds	r0, #1
 80064f0:	d01e      	beq.n	8006530 <_printf_common+0xa4>
 80064f2:	6823      	ldr	r3, [r4, #0]
 80064f4:	68e5      	ldr	r5, [r4, #12]
 80064f6:	6832      	ldr	r2, [r6, #0]
 80064f8:	f003 0306 	and.w	r3, r3, #6
 80064fc:	2b04      	cmp	r3, #4
 80064fe:	bf08      	it	eq
 8006500:	1aad      	subeq	r5, r5, r2
 8006502:	68a3      	ldr	r3, [r4, #8]
 8006504:	6922      	ldr	r2, [r4, #16]
 8006506:	bf0c      	ite	eq
 8006508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800650c:	2500      	movne	r5, #0
 800650e:	4293      	cmp	r3, r2
 8006510:	bfc4      	itt	gt
 8006512:	1a9b      	subgt	r3, r3, r2
 8006514:	18ed      	addgt	r5, r5, r3
 8006516:	2600      	movs	r6, #0
 8006518:	341a      	adds	r4, #26
 800651a:	42b5      	cmp	r5, r6
 800651c:	d11a      	bne.n	8006554 <_printf_common+0xc8>
 800651e:	2000      	movs	r0, #0
 8006520:	e008      	b.n	8006534 <_printf_common+0xa8>
 8006522:	2301      	movs	r3, #1
 8006524:	4652      	mov	r2, sl
 8006526:	4649      	mov	r1, r9
 8006528:	4638      	mov	r0, r7
 800652a:	47c0      	blx	r8
 800652c:	3001      	adds	r0, #1
 800652e:	d103      	bne.n	8006538 <_printf_common+0xac>
 8006530:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006538:	3501      	adds	r5, #1
 800653a:	e7c6      	b.n	80064ca <_printf_common+0x3e>
 800653c:	18e1      	adds	r1, r4, r3
 800653e:	1c5a      	adds	r2, r3, #1
 8006540:	2030      	movs	r0, #48	; 0x30
 8006542:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006546:	4422      	add	r2, r4
 8006548:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800654c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006550:	3302      	adds	r3, #2
 8006552:	e7c7      	b.n	80064e4 <_printf_common+0x58>
 8006554:	2301      	movs	r3, #1
 8006556:	4622      	mov	r2, r4
 8006558:	4649      	mov	r1, r9
 800655a:	4638      	mov	r0, r7
 800655c:	47c0      	blx	r8
 800655e:	3001      	adds	r0, #1
 8006560:	d0e6      	beq.n	8006530 <_printf_common+0xa4>
 8006562:	3601      	adds	r6, #1
 8006564:	e7d9      	b.n	800651a <_printf_common+0x8e>
	...

08006568 <_printf_i>:
 8006568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800656c:	460c      	mov	r4, r1
 800656e:	4691      	mov	r9, r2
 8006570:	7e27      	ldrb	r7, [r4, #24]
 8006572:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006574:	2f78      	cmp	r7, #120	; 0x78
 8006576:	4680      	mov	r8, r0
 8006578:	469a      	mov	sl, r3
 800657a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800657e:	d807      	bhi.n	8006590 <_printf_i+0x28>
 8006580:	2f62      	cmp	r7, #98	; 0x62
 8006582:	d80a      	bhi.n	800659a <_printf_i+0x32>
 8006584:	2f00      	cmp	r7, #0
 8006586:	f000 80d8 	beq.w	800673a <_printf_i+0x1d2>
 800658a:	2f58      	cmp	r7, #88	; 0x58
 800658c:	f000 80a3 	beq.w	80066d6 <_printf_i+0x16e>
 8006590:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006594:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006598:	e03a      	b.n	8006610 <_printf_i+0xa8>
 800659a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800659e:	2b15      	cmp	r3, #21
 80065a0:	d8f6      	bhi.n	8006590 <_printf_i+0x28>
 80065a2:	a001      	add	r0, pc, #4	; (adr r0, 80065a8 <_printf_i+0x40>)
 80065a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80065a8:	08006601 	.word	0x08006601
 80065ac:	08006615 	.word	0x08006615
 80065b0:	08006591 	.word	0x08006591
 80065b4:	08006591 	.word	0x08006591
 80065b8:	08006591 	.word	0x08006591
 80065bc:	08006591 	.word	0x08006591
 80065c0:	08006615 	.word	0x08006615
 80065c4:	08006591 	.word	0x08006591
 80065c8:	08006591 	.word	0x08006591
 80065cc:	08006591 	.word	0x08006591
 80065d0:	08006591 	.word	0x08006591
 80065d4:	08006721 	.word	0x08006721
 80065d8:	08006645 	.word	0x08006645
 80065dc:	08006703 	.word	0x08006703
 80065e0:	08006591 	.word	0x08006591
 80065e4:	08006591 	.word	0x08006591
 80065e8:	08006743 	.word	0x08006743
 80065ec:	08006591 	.word	0x08006591
 80065f0:	08006645 	.word	0x08006645
 80065f4:	08006591 	.word	0x08006591
 80065f8:	08006591 	.word	0x08006591
 80065fc:	0800670b 	.word	0x0800670b
 8006600:	680b      	ldr	r3, [r1, #0]
 8006602:	1d1a      	adds	r2, r3, #4
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	600a      	str	r2, [r1, #0]
 8006608:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800660c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006610:	2301      	movs	r3, #1
 8006612:	e0a3      	b.n	800675c <_printf_i+0x1f4>
 8006614:	6825      	ldr	r5, [r4, #0]
 8006616:	6808      	ldr	r0, [r1, #0]
 8006618:	062e      	lsls	r6, r5, #24
 800661a:	f100 0304 	add.w	r3, r0, #4
 800661e:	d50a      	bpl.n	8006636 <_printf_i+0xce>
 8006620:	6805      	ldr	r5, [r0, #0]
 8006622:	600b      	str	r3, [r1, #0]
 8006624:	2d00      	cmp	r5, #0
 8006626:	da03      	bge.n	8006630 <_printf_i+0xc8>
 8006628:	232d      	movs	r3, #45	; 0x2d
 800662a:	426d      	negs	r5, r5
 800662c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006630:	485e      	ldr	r0, [pc, #376]	; (80067ac <_printf_i+0x244>)
 8006632:	230a      	movs	r3, #10
 8006634:	e019      	b.n	800666a <_printf_i+0x102>
 8006636:	f015 0f40 	tst.w	r5, #64	; 0x40
 800663a:	6805      	ldr	r5, [r0, #0]
 800663c:	600b      	str	r3, [r1, #0]
 800663e:	bf18      	it	ne
 8006640:	b22d      	sxthne	r5, r5
 8006642:	e7ef      	b.n	8006624 <_printf_i+0xbc>
 8006644:	680b      	ldr	r3, [r1, #0]
 8006646:	6825      	ldr	r5, [r4, #0]
 8006648:	1d18      	adds	r0, r3, #4
 800664a:	6008      	str	r0, [r1, #0]
 800664c:	0628      	lsls	r0, r5, #24
 800664e:	d501      	bpl.n	8006654 <_printf_i+0xec>
 8006650:	681d      	ldr	r5, [r3, #0]
 8006652:	e002      	b.n	800665a <_printf_i+0xf2>
 8006654:	0669      	lsls	r1, r5, #25
 8006656:	d5fb      	bpl.n	8006650 <_printf_i+0xe8>
 8006658:	881d      	ldrh	r5, [r3, #0]
 800665a:	4854      	ldr	r0, [pc, #336]	; (80067ac <_printf_i+0x244>)
 800665c:	2f6f      	cmp	r7, #111	; 0x6f
 800665e:	bf0c      	ite	eq
 8006660:	2308      	moveq	r3, #8
 8006662:	230a      	movne	r3, #10
 8006664:	2100      	movs	r1, #0
 8006666:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800666a:	6866      	ldr	r6, [r4, #4]
 800666c:	60a6      	str	r6, [r4, #8]
 800666e:	2e00      	cmp	r6, #0
 8006670:	bfa2      	ittt	ge
 8006672:	6821      	ldrge	r1, [r4, #0]
 8006674:	f021 0104 	bicge.w	r1, r1, #4
 8006678:	6021      	strge	r1, [r4, #0]
 800667a:	b90d      	cbnz	r5, 8006680 <_printf_i+0x118>
 800667c:	2e00      	cmp	r6, #0
 800667e:	d04d      	beq.n	800671c <_printf_i+0x1b4>
 8006680:	4616      	mov	r6, r2
 8006682:	fbb5 f1f3 	udiv	r1, r5, r3
 8006686:	fb03 5711 	mls	r7, r3, r1, r5
 800668a:	5dc7      	ldrb	r7, [r0, r7]
 800668c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006690:	462f      	mov	r7, r5
 8006692:	42bb      	cmp	r3, r7
 8006694:	460d      	mov	r5, r1
 8006696:	d9f4      	bls.n	8006682 <_printf_i+0x11a>
 8006698:	2b08      	cmp	r3, #8
 800669a:	d10b      	bne.n	80066b4 <_printf_i+0x14c>
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	07df      	lsls	r7, r3, #31
 80066a0:	d508      	bpl.n	80066b4 <_printf_i+0x14c>
 80066a2:	6923      	ldr	r3, [r4, #16]
 80066a4:	6861      	ldr	r1, [r4, #4]
 80066a6:	4299      	cmp	r1, r3
 80066a8:	bfde      	ittt	le
 80066aa:	2330      	movle	r3, #48	; 0x30
 80066ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80066b0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80066b4:	1b92      	subs	r2, r2, r6
 80066b6:	6122      	str	r2, [r4, #16]
 80066b8:	f8cd a000 	str.w	sl, [sp]
 80066bc:	464b      	mov	r3, r9
 80066be:	aa03      	add	r2, sp, #12
 80066c0:	4621      	mov	r1, r4
 80066c2:	4640      	mov	r0, r8
 80066c4:	f7ff fee2 	bl	800648c <_printf_common>
 80066c8:	3001      	adds	r0, #1
 80066ca:	d14c      	bne.n	8006766 <_printf_i+0x1fe>
 80066cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066d0:	b004      	add	sp, #16
 80066d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066d6:	4835      	ldr	r0, [pc, #212]	; (80067ac <_printf_i+0x244>)
 80066d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80066dc:	6823      	ldr	r3, [r4, #0]
 80066de:	680e      	ldr	r6, [r1, #0]
 80066e0:	061f      	lsls	r7, r3, #24
 80066e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80066e6:	600e      	str	r6, [r1, #0]
 80066e8:	d514      	bpl.n	8006714 <_printf_i+0x1ac>
 80066ea:	07d9      	lsls	r1, r3, #31
 80066ec:	bf44      	itt	mi
 80066ee:	f043 0320 	orrmi.w	r3, r3, #32
 80066f2:	6023      	strmi	r3, [r4, #0]
 80066f4:	b91d      	cbnz	r5, 80066fe <_printf_i+0x196>
 80066f6:	6823      	ldr	r3, [r4, #0]
 80066f8:	f023 0320 	bic.w	r3, r3, #32
 80066fc:	6023      	str	r3, [r4, #0]
 80066fe:	2310      	movs	r3, #16
 8006700:	e7b0      	b.n	8006664 <_printf_i+0xfc>
 8006702:	6823      	ldr	r3, [r4, #0]
 8006704:	f043 0320 	orr.w	r3, r3, #32
 8006708:	6023      	str	r3, [r4, #0]
 800670a:	2378      	movs	r3, #120	; 0x78
 800670c:	4828      	ldr	r0, [pc, #160]	; (80067b0 <_printf_i+0x248>)
 800670e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006712:	e7e3      	b.n	80066dc <_printf_i+0x174>
 8006714:	065e      	lsls	r6, r3, #25
 8006716:	bf48      	it	mi
 8006718:	b2ad      	uxthmi	r5, r5
 800671a:	e7e6      	b.n	80066ea <_printf_i+0x182>
 800671c:	4616      	mov	r6, r2
 800671e:	e7bb      	b.n	8006698 <_printf_i+0x130>
 8006720:	680b      	ldr	r3, [r1, #0]
 8006722:	6826      	ldr	r6, [r4, #0]
 8006724:	6960      	ldr	r0, [r4, #20]
 8006726:	1d1d      	adds	r5, r3, #4
 8006728:	600d      	str	r5, [r1, #0]
 800672a:	0635      	lsls	r5, r6, #24
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	d501      	bpl.n	8006734 <_printf_i+0x1cc>
 8006730:	6018      	str	r0, [r3, #0]
 8006732:	e002      	b.n	800673a <_printf_i+0x1d2>
 8006734:	0671      	lsls	r1, r6, #25
 8006736:	d5fb      	bpl.n	8006730 <_printf_i+0x1c8>
 8006738:	8018      	strh	r0, [r3, #0]
 800673a:	2300      	movs	r3, #0
 800673c:	6123      	str	r3, [r4, #16]
 800673e:	4616      	mov	r6, r2
 8006740:	e7ba      	b.n	80066b8 <_printf_i+0x150>
 8006742:	680b      	ldr	r3, [r1, #0]
 8006744:	1d1a      	adds	r2, r3, #4
 8006746:	600a      	str	r2, [r1, #0]
 8006748:	681e      	ldr	r6, [r3, #0]
 800674a:	6862      	ldr	r2, [r4, #4]
 800674c:	2100      	movs	r1, #0
 800674e:	4630      	mov	r0, r6
 8006750:	f7f9 fd5e 	bl	8000210 <memchr>
 8006754:	b108      	cbz	r0, 800675a <_printf_i+0x1f2>
 8006756:	1b80      	subs	r0, r0, r6
 8006758:	6060      	str	r0, [r4, #4]
 800675a:	6863      	ldr	r3, [r4, #4]
 800675c:	6123      	str	r3, [r4, #16]
 800675e:	2300      	movs	r3, #0
 8006760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006764:	e7a8      	b.n	80066b8 <_printf_i+0x150>
 8006766:	6923      	ldr	r3, [r4, #16]
 8006768:	4632      	mov	r2, r6
 800676a:	4649      	mov	r1, r9
 800676c:	4640      	mov	r0, r8
 800676e:	47d0      	blx	sl
 8006770:	3001      	adds	r0, #1
 8006772:	d0ab      	beq.n	80066cc <_printf_i+0x164>
 8006774:	6823      	ldr	r3, [r4, #0]
 8006776:	079b      	lsls	r3, r3, #30
 8006778:	d413      	bmi.n	80067a2 <_printf_i+0x23a>
 800677a:	68e0      	ldr	r0, [r4, #12]
 800677c:	9b03      	ldr	r3, [sp, #12]
 800677e:	4298      	cmp	r0, r3
 8006780:	bfb8      	it	lt
 8006782:	4618      	movlt	r0, r3
 8006784:	e7a4      	b.n	80066d0 <_printf_i+0x168>
 8006786:	2301      	movs	r3, #1
 8006788:	4632      	mov	r2, r6
 800678a:	4649      	mov	r1, r9
 800678c:	4640      	mov	r0, r8
 800678e:	47d0      	blx	sl
 8006790:	3001      	adds	r0, #1
 8006792:	d09b      	beq.n	80066cc <_printf_i+0x164>
 8006794:	3501      	adds	r5, #1
 8006796:	68e3      	ldr	r3, [r4, #12]
 8006798:	9903      	ldr	r1, [sp, #12]
 800679a:	1a5b      	subs	r3, r3, r1
 800679c:	42ab      	cmp	r3, r5
 800679e:	dcf2      	bgt.n	8006786 <_printf_i+0x21e>
 80067a0:	e7eb      	b.n	800677a <_printf_i+0x212>
 80067a2:	2500      	movs	r5, #0
 80067a4:	f104 0619 	add.w	r6, r4, #25
 80067a8:	e7f5      	b.n	8006796 <_printf_i+0x22e>
 80067aa:	bf00      	nop
 80067ac:	08008cc2 	.word	0x08008cc2
 80067b0:	08008cd3 	.word	0x08008cd3

080067b4 <siprintf>:
 80067b4:	b40e      	push	{r1, r2, r3}
 80067b6:	b500      	push	{lr}
 80067b8:	b09c      	sub	sp, #112	; 0x70
 80067ba:	ab1d      	add	r3, sp, #116	; 0x74
 80067bc:	9002      	str	r0, [sp, #8]
 80067be:	9006      	str	r0, [sp, #24]
 80067c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80067c4:	4809      	ldr	r0, [pc, #36]	; (80067ec <siprintf+0x38>)
 80067c6:	9107      	str	r1, [sp, #28]
 80067c8:	9104      	str	r1, [sp, #16]
 80067ca:	4909      	ldr	r1, [pc, #36]	; (80067f0 <siprintf+0x3c>)
 80067cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80067d0:	9105      	str	r1, [sp, #20]
 80067d2:	6800      	ldr	r0, [r0, #0]
 80067d4:	9301      	str	r3, [sp, #4]
 80067d6:	a902      	add	r1, sp, #8
 80067d8:	f001 fb26 	bl	8007e28 <_svfiprintf_r>
 80067dc:	9b02      	ldr	r3, [sp, #8]
 80067de:	2200      	movs	r2, #0
 80067e0:	701a      	strb	r2, [r3, #0]
 80067e2:	b01c      	add	sp, #112	; 0x70
 80067e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80067e8:	b003      	add	sp, #12
 80067ea:	4770      	bx	lr
 80067ec:	20000034 	.word	0x20000034
 80067f0:	ffff0208 	.word	0xffff0208

080067f4 <quorem>:
 80067f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f8:	6903      	ldr	r3, [r0, #16]
 80067fa:	690c      	ldr	r4, [r1, #16]
 80067fc:	42a3      	cmp	r3, r4
 80067fe:	4607      	mov	r7, r0
 8006800:	f2c0 8081 	blt.w	8006906 <quorem+0x112>
 8006804:	3c01      	subs	r4, #1
 8006806:	f101 0814 	add.w	r8, r1, #20
 800680a:	f100 0514 	add.w	r5, r0, #20
 800680e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006812:	9301      	str	r3, [sp, #4]
 8006814:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006818:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800681c:	3301      	adds	r3, #1
 800681e:	429a      	cmp	r2, r3
 8006820:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006824:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006828:	fbb2 f6f3 	udiv	r6, r2, r3
 800682c:	d331      	bcc.n	8006892 <quorem+0x9e>
 800682e:	f04f 0e00 	mov.w	lr, #0
 8006832:	4640      	mov	r0, r8
 8006834:	46ac      	mov	ip, r5
 8006836:	46f2      	mov	sl, lr
 8006838:	f850 2b04 	ldr.w	r2, [r0], #4
 800683c:	b293      	uxth	r3, r2
 800683e:	fb06 e303 	mla	r3, r6, r3, lr
 8006842:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006846:	b29b      	uxth	r3, r3
 8006848:	ebaa 0303 	sub.w	r3, sl, r3
 800684c:	0c12      	lsrs	r2, r2, #16
 800684e:	f8dc a000 	ldr.w	sl, [ip]
 8006852:	fb06 e202 	mla	r2, r6, r2, lr
 8006856:	fa13 f38a 	uxtah	r3, r3, sl
 800685a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800685e:	fa1f fa82 	uxth.w	sl, r2
 8006862:	f8dc 2000 	ldr.w	r2, [ip]
 8006866:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800686a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800686e:	b29b      	uxth	r3, r3
 8006870:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006874:	4581      	cmp	r9, r0
 8006876:	f84c 3b04 	str.w	r3, [ip], #4
 800687a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800687e:	d2db      	bcs.n	8006838 <quorem+0x44>
 8006880:	f855 300b 	ldr.w	r3, [r5, fp]
 8006884:	b92b      	cbnz	r3, 8006892 <quorem+0x9e>
 8006886:	9b01      	ldr	r3, [sp, #4]
 8006888:	3b04      	subs	r3, #4
 800688a:	429d      	cmp	r5, r3
 800688c:	461a      	mov	r2, r3
 800688e:	d32e      	bcc.n	80068ee <quorem+0xfa>
 8006890:	613c      	str	r4, [r7, #16]
 8006892:	4638      	mov	r0, r7
 8006894:	f001 f8b2 	bl	80079fc <__mcmp>
 8006898:	2800      	cmp	r0, #0
 800689a:	db24      	blt.n	80068e6 <quorem+0xf2>
 800689c:	3601      	adds	r6, #1
 800689e:	4628      	mov	r0, r5
 80068a0:	f04f 0c00 	mov.w	ip, #0
 80068a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80068a8:	f8d0 e000 	ldr.w	lr, [r0]
 80068ac:	b293      	uxth	r3, r2
 80068ae:	ebac 0303 	sub.w	r3, ip, r3
 80068b2:	0c12      	lsrs	r2, r2, #16
 80068b4:	fa13 f38e 	uxtah	r3, r3, lr
 80068b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80068bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068c6:	45c1      	cmp	r9, r8
 80068c8:	f840 3b04 	str.w	r3, [r0], #4
 80068cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80068d0:	d2e8      	bcs.n	80068a4 <quorem+0xb0>
 80068d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068da:	b922      	cbnz	r2, 80068e6 <quorem+0xf2>
 80068dc:	3b04      	subs	r3, #4
 80068de:	429d      	cmp	r5, r3
 80068e0:	461a      	mov	r2, r3
 80068e2:	d30a      	bcc.n	80068fa <quorem+0x106>
 80068e4:	613c      	str	r4, [r7, #16]
 80068e6:	4630      	mov	r0, r6
 80068e8:	b003      	add	sp, #12
 80068ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ee:	6812      	ldr	r2, [r2, #0]
 80068f0:	3b04      	subs	r3, #4
 80068f2:	2a00      	cmp	r2, #0
 80068f4:	d1cc      	bne.n	8006890 <quorem+0x9c>
 80068f6:	3c01      	subs	r4, #1
 80068f8:	e7c7      	b.n	800688a <quorem+0x96>
 80068fa:	6812      	ldr	r2, [r2, #0]
 80068fc:	3b04      	subs	r3, #4
 80068fe:	2a00      	cmp	r2, #0
 8006900:	d1f0      	bne.n	80068e4 <quorem+0xf0>
 8006902:	3c01      	subs	r4, #1
 8006904:	e7eb      	b.n	80068de <quorem+0xea>
 8006906:	2000      	movs	r0, #0
 8006908:	e7ee      	b.n	80068e8 <quorem+0xf4>
 800690a:	0000      	movs	r0, r0
 800690c:	0000      	movs	r0, r0
	...

08006910 <_dtoa_r>:
 8006910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006914:	ed2d 8b02 	vpush	{d8}
 8006918:	ec57 6b10 	vmov	r6, r7, d0
 800691c:	b095      	sub	sp, #84	; 0x54
 800691e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006920:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006924:	9105      	str	r1, [sp, #20]
 8006926:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800692a:	4604      	mov	r4, r0
 800692c:	9209      	str	r2, [sp, #36]	; 0x24
 800692e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006930:	b975      	cbnz	r5, 8006950 <_dtoa_r+0x40>
 8006932:	2010      	movs	r0, #16
 8006934:	f000 fddc 	bl	80074f0 <malloc>
 8006938:	4602      	mov	r2, r0
 800693a:	6260      	str	r0, [r4, #36]	; 0x24
 800693c:	b920      	cbnz	r0, 8006948 <_dtoa_r+0x38>
 800693e:	4bb2      	ldr	r3, [pc, #712]	; (8006c08 <_dtoa_r+0x2f8>)
 8006940:	21ea      	movs	r1, #234	; 0xea
 8006942:	48b2      	ldr	r0, [pc, #712]	; (8006c0c <_dtoa_r+0x2fc>)
 8006944:	f001 fb80 	bl	8008048 <__assert_func>
 8006948:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800694c:	6005      	str	r5, [r0, #0]
 800694e:	60c5      	str	r5, [r0, #12]
 8006950:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006952:	6819      	ldr	r1, [r3, #0]
 8006954:	b151      	cbz	r1, 800696c <_dtoa_r+0x5c>
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	604a      	str	r2, [r1, #4]
 800695a:	2301      	movs	r3, #1
 800695c:	4093      	lsls	r3, r2
 800695e:	608b      	str	r3, [r1, #8]
 8006960:	4620      	mov	r0, r4
 8006962:	f000 fe0d 	bl	8007580 <_Bfree>
 8006966:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006968:	2200      	movs	r2, #0
 800696a:	601a      	str	r2, [r3, #0]
 800696c:	1e3b      	subs	r3, r7, #0
 800696e:	bfb9      	ittee	lt
 8006970:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006974:	9303      	strlt	r3, [sp, #12]
 8006976:	2300      	movge	r3, #0
 8006978:	f8c8 3000 	strge.w	r3, [r8]
 800697c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006980:	4ba3      	ldr	r3, [pc, #652]	; (8006c10 <_dtoa_r+0x300>)
 8006982:	bfbc      	itt	lt
 8006984:	2201      	movlt	r2, #1
 8006986:	f8c8 2000 	strlt.w	r2, [r8]
 800698a:	ea33 0309 	bics.w	r3, r3, r9
 800698e:	d11b      	bne.n	80069c8 <_dtoa_r+0xb8>
 8006990:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006992:	f242 730f 	movw	r3, #9999	; 0x270f
 8006996:	6013      	str	r3, [r2, #0]
 8006998:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800699c:	4333      	orrs	r3, r6
 800699e:	f000 857a 	beq.w	8007496 <_dtoa_r+0xb86>
 80069a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069a4:	b963      	cbnz	r3, 80069c0 <_dtoa_r+0xb0>
 80069a6:	4b9b      	ldr	r3, [pc, #620]	; (8006c14 <_dtoa_r+0x304>)
 80069a8:	e024      	b.n	80069f4 <_dtoa_r+0xe4>
 80069aa:	4b9b      	ldr	r3, [pc, #620]	; (8006c18 <_dtoa_r+0x308>)
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	3308      	adds	r3, #8
 80069b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80069b2:	6013      	str	r3, [r2, #0]
 80069b4:	9800      	ldr	r0, [sp, #0]
 80069b6:	b015      	add	sp, #84	; 0x54
 80069b8:	ecbd 8b02 	vpop	{d8}
 80069bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069c0:	4b94      	ldr	r3, [pc, #592]	; (8006c14 <_dtoa_r+0x304>)
 80069c2:	9300      	str	r3, [sp, #0]
 80069c4:	3303      	adds	r3, #3
 80069c6:	e7f3      	b.n	80069b0 <_dtoa_r+0xa0>
 80069c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80069cc:	2200      	movs	r2, #0
 80069ce:	ec51 0b17 	vmov	r0, r1, d7
 80069d2:	2300      	movs	r3, #0
 80069d4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80069d8:	f7fa f88e 	bl	8000af8 <__aeabi_dcmpeq>
 80069dc:	4680      	mov	r8, r0
 80069de:	b158      	cbz	r0, 80069f8 <_dtoa_r+0xe8>
 80069e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80069e2:	2301      	movs	r3, #1
 80069e4:	6013      	str	r3, [r2, #0]
 80069e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f000 8551 	beq.w	8007490 <_dtoa_r+0xb80>
 80069ee:	488b      	ldr	r0, [pc, #556]	; (8006c1c <_dtoa_r+0x30c>)
 80069f0:	6018      	str	r0, [r3, #0]
 80069f2:	1e43      	subs	r3, r0, #1
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	e7dd      	b.n	80069b4 <_dtoa_r+0xa4>
 80069f8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80069fc:	aa12      	add	r2, sp, #72	; 0x48
 80069fe:	a913      	add	r1, sp, #76	; 0x4c
 8006a00:	4620      	mov	r0, r4
 8006a02:	f001 f89f 	bl	8007b44 <__d2b>
 8006a06:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006a0a:	4683      	mov	fp, r0
 8006a0c:	2d00      	cmp	r5, #0
 8006a0e:	d07c      	beq.n	8006b0a <_dtoa_r+0x1fa>
 8006a10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a12:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006a16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a1a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006a1e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006a22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006a26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006a2a:	4b7d      	ldr	r3, [pc, #500]	; (8006c20 <_dtoa_r+0x310>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	4630      	mov	r0, r6
 8006a30:	4639      	mov	r1, r7
 8006a32:	f7f9 fc41 	bl	80002b8 <__aeabi_dsub>
 8006a36:	a36e      	add	r3, pc, #440	; (adr r3, 8006bf0 <_dtoa_r+0x2e0>)
 8006a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3c:	f7f9 fdf4 	bl	8000628 <__aeabi_dmul>
 8006a40:	a36d      	add	r3, pc, #436	; (adr r3, 8006bf8 <_dtoa_r+0x2e8>)
 8006a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a46:	f7f9 fc39 	bl	80002bc <__adddf3>
 8006a4a:	4606      	mov	r6, r0
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	460f      	mov	r7, r1
 8006a50:	f7f9 fd80 	bl	8000554 <__aeabi_i2d>
 8006a54:	a36a      	add	r3, pc, #424	; (adr r3, 8006c00 <_dtoa_r+0x2f0>)
 8006a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5a:	f7f9 fde5 	bl	8000628 <__aeabi_dmul>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	460b      	mov	r3, r1
 8006a62:	4630      	mov	r0, r6
 8006a64:	4639      	mov	r1, r7
 8006a66:	f7f9 fc29 	bl	80002bc <__adddf3>
 8006a6a:	4606      	mov	r6, r0
 8006a6c:	460f      	mov	r7, r1
 8006a6e:	f7fa f88b 	bl	8000b88 <__aeabi_d2iz>
 8006a72:	2200      	movs	r2, #0
 8006a74:	4682      	mov	sl, r0
 8006a76:	2300      	movs	r3, #0
 8006a78:	4630      	mov	r0, r6
 8006a7a:	4639      	mov	r1, r7
 8006a7c:	f7fa f846 	bl	8000b0c <__aeabi_dcmplt>
 8006a80:	b148      	cbz	r0, 8006a96 <_dtoa_r+0x186>
 8006a82:	4650      	mov	r0, sl
 8006a84:	f7f9 fd66 	bl	8000554 <__aeabi_i2d>
 8006a88:	4632      	mov	r2, r6
 8006a8a:	463b      	mov	r3, r7
 8006a8c:	f7fa f834 	bl	8000af8 <__aeabi_dcmpeq>
 8006a90:	b908      	cbnz	r0, 8006a96 <_dtoa_r+0x186>
 8006a92:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006a96:	f1ba 0f16 	cmp.w	sl, #22
 8006a9a:	d854      	bhi.n	8006b46 <_dtoa_r+0x236>
 8006a9c:	4b61      	ldr	r3, [pc, #388]	; (8006c24 <_dtoa_r+0x314>)
 8006a9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006aaa:	f7fa f82f 	bl	8000b0c <__aeabi_dcmplt>
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	d04b      	beq.n	8006b4a <_dtoa_r+0x23a>
 8006ab2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	930e      	str	r3, [sp, #56]	; 0x38
 8006aba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006abc:	1b5d      	subs	r5, r3, r5
 8006abe:	1e6b      	subs	r3, r5, #1
 8006ac0:	9304      	str	r3, [sp, #16]
 8006ac2:	bf43      	ittte	mi
 8006ac4:	2300      	movmi	r3, #0
 8006ac6:	f1c5 0801 	rsbmi	r8, r5, #1
 8006aca:	9304      	strmi	r3, [sp, #16]
 8006acc:	f04f 0800 	movpl.w	r8, #0
 8006ad0:	f1ba 0f00 	cmp.w	sl, #0
 8006ad4:	db3b      	blt.n	8006b4e <_dtoa_r+0x23e>
 8006ad6:	9b04      	ldr	r3, [sp, #16]
 8006ad8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006adc:	4453      	add	r3, sl
 8006ade:	9304      	str	r3, [sp, #16]
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	9306      	str	r3, [sp, #24]
 8006ae4:	9b05      	ldr	r3, [sp, #20]
 8006ae6:	2b09      	cmp	r3, #9
 8006ae8:	d869      	bhi.n	8006bbe <_dtoa_r+0x2ae>
 8006aea:	2b05      	cmp	r3, #5
 8006aec:	bfc4      	itt	gt
 8006aee:	3b04      	subgt	r3, #4
 8006af0:	9305      	strgt	r3, [sp, #20]
 8006af2:	9b05      	ldr	r3, [sp, #20]
 8006af4:	f1a3 0302 	sub.w	r3, r3, #2
 8006af8:	bfcc      	ite	gt
 8006afa:	2500      	movgt	r5, #0
 8006afc:	2501      	movle	r5, #1
 8006afe:	2b03      	cmp	r3, #3
 8006b00:	d869      	bhi.n	8006bd6 <_dtoa_r+0x2c6>
 8006b02:	e8df f003 	tbb	[pc, r3]
 8006b06:	4e2c      	.short	0x4e2c
 8006b08:	5a4c      	.short	0x5a4c
 8006b0a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006b0e:	441d      	add	r5, r3
 8006b10:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006b14:	2b20      	cmp	r3, #32
 8006b16:	bfc1      	itttt	gt
 8006b18:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006b1c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006b20:	fa09 f303 	lslgt.w	r3, r9, r3
 8006b24:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006b28:	bfda      	itte	le
 8006b2a:	f1c3 0320 	rsble	r3, r3, #32
 8006b2e:	fa06 f003 	lslle.w	r0, r6, r3
 8006b32:	4318      	orrgt	r0, r3
 8006b34:	f7f9 fcfe 	bl	8000534 <__aeabi_ui2d>
 8006b38:	2301      	movs	r3, #1
 8006b3a:	4606      	mov	r6, r0
 8006b3c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006b40:	3d01      	subs	r5, #1
 8006b42:	9310      	str	r3, [sp, #64]	; 0x40
 8006b44:	e771      	b.n	8006a2a <_dtoa_r+0x11a>
 8006b46:	2301      	movs	r3, #1
 8006b48:	e7b6      	b.n	8006ab8 <_dtoa_r+0x1a8>
 8006b4a:	900e      	str	r0, [sp, #56]	; 0x38
 8006b4c:	e7b5      	b.n	8006aba <_dtoa_r+0x1aa>
 8006b4e:	f1ca 0300 	rsb	r3, sl, #0
 8006b52:	9306      	str	r3, [sp, #24]
 8006b54:	2300      	movs	r3, #0
 8006b56:	eba8 080a 	sub.w	r8, r8, sl
 8006b5a:	930d      	str	r3, [sp, #52]	; 0x34
 8006b5c:	e7c2      	b.n	8006ae4 <_dtoa_r+0x1d4>
 8006b5e:	2300      	movs	r3, #0
 8006b60:	9308      	str	r3, [sp, #32]
 8006b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	dc39      	bgt.n	8006bdc <_dtoa_r+0x2cc>
 8006b68:	f04f 0901 	mov.w	r9, #1
 8006b6c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006b70:	464b      	mov	r3, r9
 8006b72:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006b76:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006b78:	2200      	movs	r2, #0
 8006b7a:	6042      	str	r2, [r0, #4]
 8006b7c:	2204      	movs	r2, #4
 8006b7e:	f102 0614 	add.w	r6, r2, #20
 8006b82:	429e      	cmp	r6, r3
 8006b84:	6841      	ldr	r1, [r0, #4]
 8006b86:	d92f      	bls.n	8006be8 <_dtoa_r+0x2d8>
 8006b88:	4620      	mov	r0, r4
 8006b8a:	f000 fcb9 	bl	8007500 <_Balloc>
 8006b8e:	9000      	str	r0, [sp, #0]
 8006b90:	2800      	cmp	r0, #0
 8006b92:	d14b      	bne.n	8006c2c <_dtoa_r+0x31c>
 8006b94:	4b24      	ldr	r3, [pc, #144]	; (8006c28 <_dtoa_r+0x318>)
 8006b96:	4602      	mov	r2, r0
 8006b98:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006b9c:	e6d1      	b.n	8006942 <_dtoa_r+0x32>
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e7de      	b.n	8006b60 <_dtoa_r+0x250>
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	9308      	str	r3, [sp, #32]
 8006ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ba8:	eb0a 0903 	add.w	r9, sl, r3
 8006bac:	f109 0301 	add.w	r3, r9, #1
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	9301      	str	r3, [sp, #4]
 8006bb4:	bfb8      	it	lt
 8006bb6:	2301      	movlt	r3, #1
 8006bb8:	e7dd      	b.n	8006b76 <_dtoa_r+0x266>
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e7f2      	b.n	8006ba4 <_dtoa_r+0x294>
 8006bbe:	2501      	movs	r5, #1
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	9305      	str	r3, [sp, #20]
 8006bc4:	9508      	str	r5, [sp, #32]
 8006bc6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f8cd 9004 	str.w	r9, [sp, #4]
 8006bd0:	2312      	movs	r3, #18
 8006bd2:	9209      	str	r2, [sp, #36]	; 0x24
 8006bd4:	e7cf      	b.n	8006b76 <_dtoa_r+0x266>
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	9308      	str	r3, [sp, #32]
 8006bda:	e7f4      	b.n	8006bc6 <_dtoa_r+0x2b6>
 8006bdc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006be0:	f8cd 9004 	str.w	r9, [sp, #4]
 8006be4:	464b      	mov	r3, r9
 8006be6:	e7c6      	b.n	8006b76 <_dtoa_r+0x266>
 8006be8:	3101      	adds	r1, #1
 8006bea:	6041      	str	r1, [r0, #4]
 8006bec:	0052      	lsls	r2, r2, #1
 8006bee:	e7c6      	b.n	8006b7e <_dtoa_r+0x26e>
 8006bf0:	636f4361 	.word	0x636f4361
 8006bf4:	3fd287a7 	.word	0x3fd287a7
 8006bf8:	8b60c8b3 	.word	0x8b60c8b3
 8006bfc:	3fc68a28 	.word	0x3fc68a28
 8006c00:	509f79fb 	.word	0x509f79fb
 8006c04:	3fd34413 	.word	0x3fd34413
 8006c08:	08008cf1 	.word	0x08008cf1
 8006c0c:	08008d08 	.word	0x08008d08
 8006c10:	7ff00000 	.word	0x7ff00000
 8006c14:	08008ced 	.word	0x08008ced
 8006c18:	08008ce4 	.word	0x08008ce4
 8006c1c:	08008cc1 	.word	0x08008cc1
 8006c20:	3ff80000 	.word	0x3ff80000
 8006c24:	08008e00 	.word	0x08008e00
 8006c28:	08008d67 	.word	0x08008d67
 8006c2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c2e:	9a00      	ldr	r2, [sp, #0]
 8006c30:	601a      	str	r2, [r3, #0]
 8006c32:	9b01      	ldr	r3, [sp, #4]
 8006c34:	2b0e      	cmp	r3, #14
 8006c36:	f200 80ad 	bhi.w	8006d94 <_dtoa_r+0x484>
 8006c3a:	2d00      	cmp	r5, #0
 8006c3c:	f000 80aa 	beq.w	8006d94 <_dtoa_r+0x484>
 8006c40:	f1ba 0f00 	cmp.w	sl, #0
 8006c44:	dd36      	ble.n	8006cb4 <_dtoa_r+0x3a4>
 8006c46:	4ac3      	ldr	r2, [pc, #780]	; (8006f54 <_dtoa_r+0x644>)
 8006c48:	f00a 030f 	and.w	r3, sl, #15
 8006c4c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006c50:	ed93 7b00 	vldr	d7, [r3]
 8006c54:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006c58:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006c5c:	eeb0 8a47 	vmov.f32	s16, s14
 8006c60:	eef0 8a67 	vmov.f32	s17, s15
 8006c64:	d016      	beq.n	8006c94 <_dtoa_r+0x384>
 8006c66:	4bbc      	ldr	r3, [pc, #752]	; (8006f58 <_dtoa_r+0x648>)
 8006c68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006c6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c70:	f7f9 fe04 	bl	800087c <__aeabi_ddiv>
 8006c74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c78:	f007 070f 	and.w	r7, r7, #15
 8006c7c:	2503      	movs	r5, #3
 8006c7e:	4eb6      	ldr	r6, [pc, #728]	; (8006f58 <_dtoa_r+0x648>)
 8006c80:	b957      	cbnz	r7, 8006c98 <_dtoa_r+0x388>
 8006c82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c86:	ec53 2b18 	vmov	r2, r3, d8
 8006c8a:	f7f9 fdf7 	bl	800087c <__aeabi_ddiv>
 8006c8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c92:	e029      	b.n	8006ce8 <_dtoa_r+0x3d8>
 8006c94:	2502      	movs	r5, #2
 8006c96:	e7f2      	b.n	8006c7e <_dtoa_r+0x36e>
 8006c98:	07f9      	lsls	r1, r7, #31
 8006c9a:	d508      	bpl.n	8006cae <_dtoa_r+0x39e>
 8006c9c:	ec51 0b18 	vmov	r0, r1, d8
 8006ca0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ca4:	f7f9 fcc0 	bl	8000628 <__aeabi_dmul>
 8006ca8:	ec41 0b18 	vmov	d8, r0, r1
 8006cac:	3501      	adds	r5, #1
 8006cae:	107f      	asrs	r7, r7, #1
 8006cb0:	3608      	adds	r6, #8
 8006cb2:	e7e5      	b.n	8006c80 <_dtoa_r+0x370>
 8006cb4:	f000 80a6 	beq.w	8006e04 <_dtoa_r+0x4f4>
 8006cb8:	f1ca 0600 	rsb	r6, sl, #0
 8006cbc:	4ba5      	ldr	r3, [pc, #660]	; (8006f54 <_dtoa_r+0x644>)
 8006cbe:	4fa6      	ldr	r7, [pc, #664]	; (8006f58 <_dtoa_r+0x648>)
 8006cc0:	f006 020f 	and.w	r2, r6, #15
 8006cc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ccc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006cd0:	f7f9 fcaa 	bl	8000628 <__aeabi_dmul>
 8006cd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cd8:	1136      	asrs	r6, r6, #4
 8006cda:	2300      	movs	r3, #0
 8006cdc:	2502      	movs	r5, #2
 8006cde:	2e00      	cmp	r6, #0
 8006ce0:	f040 8085 	bne.w	8006dee <_dtoa_r+0x4de>
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1d2      	bne.n	8006c8e <_dtoa_r+0x37e>
 8006ce8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f000 808c 	beq.w	8006e08 <_dtoa_r+0x4f8>
 8006cf0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006cf4:	4b99      	ldr	r3, [pc, #612]	; (8006f5c <_dtoa_r+0x64c>)
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	4630      	mov	r0, r6
 8006cfa:	4639      	mov	r1, r7
 8006cfc:	f7f9 ff06 	bl	8000b0c <__aeabi_dcmplt>
 8006d00:	2800      	cmp	r0, #0
 8006d02:	f000 8081 	beq.w	8006e08 <_dtoa_r+0x4f8>
 8006d06:	9b01      	ldr	r3, [sp, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d07d      	beq.n	8006e08 <_dtoa_r+0x4f8>
 8006d0c:	f1b9 0f00 	cmp.w	r9, #0
 8006d10:	dd3c      	ble.n	8006d8c <_dtoa_r+0x47c>
 8006d12:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006d16:	9307      	str	r3, [sp, #28]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	4b91      	ldr	r3, [pc, #580]	; (8006f60 <_dtoa_r+0x650>)
 8006d1c:	4630      	mov	r0, r6
 8006d1e:	4639      	mov	r1, r7
 8006d20:	f7f9 fc82 	bl	8000628 <__aeabi_dmul>
 8006d24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d28:	3501      	adds	r5, #1
 8006d2a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006d2e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006d32:	4628      	mov	r0, r5
 8006d34:	f7f9 fc0e 	bl	8000554 <__aeabi_i2d>
 8006d38:	4632      	mov	r2, r6
 8006d3a:	463b      	mov	r3, r7
 8006d3c:	f7f9 fc74 	bl	8000628 <__aeabi_dmul>
 8006d40:	4b88      	ldr	r3, [pc, #544]	; (8006f64 <_dtoa_r+0x654>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	f7f9 faba 	bl	80002bc <__adddf3>
 8006d48:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006d4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d50:	9303      	str	r3, [sp, #12]
 8006d52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d15c      	bne.n	8006e12 <_dtoa_r+0x502>
 8006d58:	4b83      	ldr	r3, [pc, #524]	; (8006f68 <_dtoa_r+0x658>)
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	4630      	mov	r0, r6
 8006d5e:	4639      	mov	r1, r7
 8006d60:	f7f9 faaa 	bl	80002b8 <__aeabi_dsub>
 8006d64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d68:	4606      	mov	r6, r0
 8006d6a:	460f      	mov	r7, r1
 8006d6c:	f7f9 feec 	bl	8000b48 <__aeabi_dcmpgt>
 8006d70:	2800      	cmp	r0, #0
 8006d72:	f040 8296 	bne.w	80072a2 <_dtoa_r+0x992>
 8006d76:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006d7a:	4630      	mov	r0, r6
 8006d7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d80:	4639      	mov	r1, r7
 8006d82:	f7f9 fec3 	bl	8000b0c <__aeabi_dcmplt>
 8006d86:	2800      	cmp	r0, #0
 8006d88:	f040 8288 	bne.w	800729c <_dtoa_r+0x98c>
 8006d8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006d90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f2c0 8158 	blt.w	800704c <_dtoa_r+0x73c>
 8006d9c:	f1ba 0f0e 	cmp.w	sl, #14
 8006da0:	f300 8154 	bgt.w	800704c <_dtoa_r+0x73c>
 8006da4:	4b6b      	ldr	r3, [pc, #428]	; (8006f54 <_dtoa_r+0x644>)
 8006da6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006daa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f280 80e3 	bge.w	8006f7c <_dtoa_r+0x66c>
 8006db6:	9b01      	ldr	r3, [sp, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f300 80df 	bgt.w	8006f7c <_dtoa_r+0x66c>
 8006dbe:	f040 826d 	bne.w	800729c <_dtoa_r+0x98c>
 8006dc2:	4b69      	ldr	r3, [pc, #420]	; (8006f68 <_dtoa_r+0x658>)
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	4640      	mov	r0, r8
 8006dc8:	4649      	mov	r1, r9
 8006dca:	f7f9 fc2d 	bl	8000628 <__aeabi_dmul>
 8006dce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006dd2:	f7f9 feaf 	bl	8000b34 <__aeabi_dcmpge>
 8006dd6:	9e01      	ldr	r6, [sp, #4]
 8006dd8:	4637      	mov	r7, r6
 8006dda:	2800      	cmp	r0, #0
 8006ddc:	f040 8243 	bne.w	8007266 <_dtoa_r+0x956>
 8006de0:	9d00      	ldr	r5, [sp, #0]
 8006de2:	2331      	movs	r3, #49	; 0x31
 8006de4:	f805 3b01 	strb.w	r3, [r5], #1
 8006de8:	f10a 0a01 	add.w	sl, sl, #1
 8006dec:	e23f      	b.n	800726e <_dtoa_r+0x95e>
 8006dee:	07f2      	lsls	r2, r6, #31
 8006df0:	d505      	bpl.n	8006dfe <_dtoa_r+0x4ee>
 8006df2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006df6:	f7f9 fc17 	bl	8000628 <__aeabi_dmul>
 8006dfa:	3501      	adds	r5, #1
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	1076      	asrs	r6, r6, #1
 8006e00:	3708      	adds	r7, #8
 8006e02:	e76c      	b.n	8006cde <_dtoa_r+0x3ce>
 8006e04:	2502      	movs	r5, #2
 8006e06:	e76f      	b.n	8006ce8 <_dtoa_r+0x3d8>
 8006e08:	9b01      	ldr	r3, [sp, #4]
 8006e0a:	f8cd a01c 	str.w	sl, [sp, #28]
 8006e0e:	930c      	str	r3, [sp, #48]	; 0x30
 8006e10:	e78d      	b.n	8006d2e <_dtoa_r+0x41e>
 8006e12:	9900      	ldr	r1, [sp, #0]
 8006e14:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006e16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e18:	4b4e      	ldr	r3, [pc, #312]	; (8006f54 <_dtoa_r+0x644>)
 8006e1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006e1e:	4401      	add	r1, r0
 8006e20:	9102      	str	r1, [sp, #8]
 8006e22:	9908      	ldr	r1, [sp, #32]
 8006e24:	eeb0 8a47 	vmov.f32	s16, s14
 8006e28:	eef0 8a67 	vmov.f32	s17, s15
 8006e2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e34:	2900      	cmp	r1, #0
 8006e36:	d045      	beq.n	8006ec4 <_dtoa_r+0x5b4>
 8006e38:	494c      	ldr	r1, [pc, #304]	; (8006f6c <_dtoa_r+0x65c>)
 8006e3a:	2000      	movs	r0, #0
 8006e3c:	f7f9 fd1e 	bl	800087c <__aeabi_ddiv>
 8006e40:	ec53 2b18 	vmov	r2, r3, d8
 8006e44:	f7f9 fa38 	bl	80002b8 <__aeabi_dsub>
 8006e48:	9d00      	ldr	r5, [sp, #0]
 8006e4a:	ec41 0b18 	vmov	d8, r0, r1
 8006e4e:	4639      	mov	r1, r7
 8006e50:	4630      	mov	r0, r6
 8006e52:	f7f9 fe99 	bl	8000b88 <__aeabi_d2iz>
 8006e56:	900c      	str	r0, [sp, #48]	; 0x30
 8006e58:	f7f9 fb7c 	bl	8000554 <__aeabi_i2d>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	460b      	mov	r3, r1
 8006e60:	4630      	mov	r0, r6
 8006e62:	4639      	mov	r1, r7
 8006e64:	f7f9 fa28 	bl	80002b8 <__aeabi_dsub>
 8006e68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e6a:	3330      	adds	r3, #48	; 0x30
 8006e6c:	f805 3b01 	strb.w	r3, [r5], #1
 8006e70:	ec53 2b18 	vmov	r2, r3, d8
 8006e74:	4606      	mov	r6, r0
 8006e76:	460f      	mov	r7, r1
 8006e78:	f7f9 fe48 	bl	8000b0c <__aeabi_dcmplt>
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	d165      	bne.n	8006f4c <_dtoa_r+0x63c>
 8006e80:	4632      	mov	r2, r6
 8006e82:	463b      	mov	r3, r7
 8006e84:	4935      	ldr	r1, [pc, #212]	; (8006f5c <_dtoa_r+0x64c>)
 8006e86:	2000      	movs	r0, #0
 8006e88:	f7f9 fa16 	bl	80002b8 <__aeabi_dsub>
 8006e8c:	ec53 2b18 	vmov	r2, r3, d8
 8006e90:	f7f9 fe3c 	bl	8000b0c <__aeabi_dcmplt>
 8006e94:	2800      	cmp	r0, #0
 8006e96:	f040 80b9 	bne.w	800700c <_dtoa_r+0x6fc>
 8006e9a:	9b02      	ldr	r3, [sp, #8]
 8006e9c:	429d      	cmp	r5, r3
 8006e9e:	f43f af75 	beq.w	8006d8c <_dtoa_r+0x47c>
 8006ea2:	4b2f      	ldr	r3, [pc, #188]	; (8006f60 <_dtoa_r+0x650>)
 8006ea4:	ec51 0b18 	vmov	r0, r1, d8
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f7f9 fbbd 	bl	8000628 <__aeabi_dmul>
 8006eae:	4b2c      	ldr	r3, [pc, #176]	; (8006f60 <_dtoa_r+0x650>)
 8006eb0:	ec41 0b18 	vmov	d8, r0, r1
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	4639      	mov	r1, r7
 8006eba:	f7f9 fbb5 	bl	8000628 <__aeabi_dmul>
 8006ebe:	4606      	mov	r6, r0
 8006ec0:	460f      	mov	r7, r1
 8006ec2:	e7c4      	b.n	8006e4e <_dtoa_r+0x53e>
 8006ec4:	ec51 0b17 	vmov	r0, r1, d7
 8006ec8:	f7f9 fbae 	bl	8000628 <__aeabi_dmul>
 8006ecc:	9b02      	ldr	r3, [sp, #8]
 8006ece:	9d00      	ldr	r5, [sp, #0]
 8006ed0:	930c      	str	r3, [sp, #48]	; 0x30
 8006ed2:	ec41 0b18 	vmov	d8, r0, r1
 8006ed6:	4639      	mov	r1, r7
 8006ed8:	4630      	mov	r0, r6
 8006eda:	f7f9 fe55 	bl	8000b88 <__aeabi_d2iz>
 8006ede:	9011      	str	r0, [sp, #68]	; 0x44
 8006ee0:	f7f9 fb38 	bl	8000554 <__aeabi_i2d>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	4630      	mov	r0, r6
 8006eea:	4639      	mov	r1, r7
 8006eec:	f7f9 f9e4 	bl	80002b8 <__aeabi_dsub>
 8006ef0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ef2:	3330      	adds	r3, #48	; 0x30
 8006ef4:	f805 3b01 	strb.w	r3, [r5], #1
 8006ef8:	9b02      	ldr	r3, [sp, #8]
 8006efa:	429d      	cmp	r5, r3
 8006efc:	4606      	mov	r6, r0
 8006efe:	460f      	mov	r7, r1
 8006f00:	f04f 0200 	mov.w	r2, #0
 8006f04:	d134      	bne.n	8006f70 <_dtoa_r+0x660>
 8006f06:	4b19      	ldr	r3, [pc, #100]	; (8006f6c <_dtoa_r+0x65c>)
 8006f08:	ec51 0b18 	vmov	r0, r1, d8
 8006f0c:	f7f9 f9d6 	bl	80002bc <__adddf3>
 8006f10:	4602      	mov	r2, r0
 8006f12:	460b      	mov	r3, r1
 8006f14:	4630      	mov	r0, r6
 8006f16:	4639      	mov	r1, r7
 8006f18:	f7f9 fe16 	bl	8000b48 <__aeabi_dcmpgt>
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	d175      	bne.n	800700c <_dtoa_r+0x6fc>
 8006f20:	ec53 2b18 	vmov	r2, r3, d8
 8006f24:	4911      	ldr	r1, [pc, #68]	; (8006f6c <_dtoa_r+0x65c>)
 8006f26:	2000      	movs	r0, #0
 8006f28:	f7f9 f9c6 	bl	80002b8 <__aeabi_dsub>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	460b      	mov	r3, r1
 8006f30:	4630      	mov	r0, r6
 8006f32:	4639      	mov	r1, r7
 8006f34:	f7f9 fdea 	bl	8000b0c <__aeabi_dcmplt>
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	f43f af27 	beq.w	8006d8c <_dtoa_r+0x47c>
 8006f3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f40:	1e6b      	subs	r3, r5, #1
 8006f42:	930c      	str	r3, [sp, #48]	; 0x30
 8006f44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006f48:	2b30      	cmp	r3, #48	; 0x30
 8006f4a:	d0f8      	beq.n	8006f3e <_dtoa_r+0x62e>
 8006f4c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006f50:	e04a      	b.n	8006fe8 <_dtoa_r+0x6d8>
 8006f52:	bf00      	nop
 8006f54:	08008e00 	.word	0x08008e00
 8006f58:	08008dd8 	.word	0x08008dd8
 8006f5c:	3ff00000 	.word	0x3ff00000
 8006f60:	40240000 	.word	0x40240000
 8006f64:	401c0000 	.word	0x401c0000
 8006f68:	40140000 	.word	0x40140000
 8006f6c:	3fe00000 	.word	0x3fe00000
 8006f70:	4baf      	ldr	r3, [pc, #700]	; (8007230 <_dtoa_r+0x920>)
 8006f72:	f7f9 fb59 	bl	8000628 <__aeabi_dmul>
 8006f76:	4606      	mov	r6, r0
 8006f78:	460f      	mov	r7, r1
 8006f7a:	e7ac      	b.n	8006ed6 <_dtoa_r+0x5c6>
 8006f7c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006f80:	9d00      	ldr	r5, [sp, #0]
 8006f82:	4642      	mov	r2, r8
 8006f84:	464b      	mov	r3, r9
 8006f86:	4630      	mov	r0, r6
 8006f88:	4639      	mov	r1, r7
 8006f8a:	f7f9 fc77 	bl	800087c <__aeabi_ddiv>
 8006f8e:	f7f9 fdfb 	bl	8000b88 <__aeabi_d2iz>
 8006f92:	9002      	str	r0, [sp, #8]
 8006f94:	f7f9 fade 	bl	8000554 <__aeabi_i2d>
 8006f98:	4642      	mov	r2, r8
 8006f9a:	464b      	mov	r3, r9
 8006f9c:	f7f9 fb44 	bl	8000628 <__aeabi_dmul>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	4630      	mov	r0, r6
 8006fa6:	4639      	mov	r1, r7
 8006fa8:	f7f9 f986 	bl	80002b8 <__aeabi_dsub>
 8006fac:	9e02      	ldr	r6, [sp, #8]
 8006fae:	9f01      	ldr	r7, [sp, #4]
 8006fb0:	3630      	adds	r6, #48	; 0x30
 8006fb2:	f805 6b01 	strb.w	r6, [r5], #1
 8006fb6:	9e00      	ldr	r6, [sp, #0]
 8006fb8:	1bae      	subs	r6, r5, r6
 8006fba:	42b7      	cmp	r7, r6
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	d137      	bne.n	8007032 <_dtoa_r+0x722>
 8006fc2:	f7f9 f97b 	bl	80002bc <__adddf3>
 8006fc6:	4642      	mov	r2, r8
 8006fc8:	464b      	mov	r3, r9
 8006fca:	4606      	mov	r6, r0
 8006fcc:	460f      	mov	r7, r1
 8006fce:	f7f9 fdbb 	bl	8000b48 <__aeabi_dcmpgt>
 8006fd2:	b9c8      	cbnz	r0, 8007008 <_dtoa_r+0x6f8>
 8006fd4:	4642      	mov	r2, r8
 8006fd6:	464b      	mov	r3, r9
 8006fd8:	4630      	mov	r0, r6
 8006fda:	4639      	mov	r1, r7
 8006fdc:	f7f9 fd8c 	bl	8000af8 <__aeabi_dcmpeq>
 8006fe0:	b110      	cbz	r0, 8006fe8 <_dtoa_r+0x6d8>
 8006fe2:	9b02      	ldr	r3, [sp, #8]
 8006fe4:	07d9      	lsls	r1, r3, #31
 8006fe6:	d40f      	bmi.n	8007008 <_dtoa_r+0x6f8>
 8006fe8:	4620      	mov	r0, r4
 8006fea:	4659      	mov	r1, fp
 8006fec:	f000 fac8 	bl	8007580 <_Bfree>
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	702b      	strb	r3, [r5, #0]
 8006ff4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ff6:	f10a 0001 	add.w	r0, sl, #1
 8006ffa:	6018      	str	r0, [r3, #0]
 8006ffc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f43f acd8 	beq.w	80069b4 <_dtoa_r+0xa4>
 8007004:	601d      	str	r5, [r3, #0]
 8007006:	e4d5      	b.n	80069b4 <_dtoa_r+0xa4>
 8007008:	f8cd a01c 	str.w	sl, [sp, #28]
 800700c:	462b      	mov	r3, r5
 800700e:	461d      	mov	r5, r3
 8007010:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007014:	2a39      	cmp	r2, #57	; 0x39
 8007016:	d108      	bne.n	800702a <_dtoa_r+0x71a>
 8007018:	9a00      	ldr	r2, [sp, #0]
 800701a:	429a      	cmp	r2, r3
 800701c:	d1f7      	bne.n	800700e <_dtoa_r+0x6fe>
 800701e:	9a07      	ldr	r2, [sp, #28]
 8007020:	9900      	ldr	r1, [sp, #0]
 8007022:	3201      	adds	r2, #1
 8007024:	9207      	str	r2, [sp, #28]
 8007026:	2230      	movs	r2, #48	; 0x30
 8007028:	700a      	strb	r2, [r1, #0]
 800702a:	781a      	ldrb	r2, [r3, #0]
 800702c:	3201      	adds	r2, #1
 800702e:	701a      	strb	r2, [r3, #0]
 8007030:	e78c      	b.n	8006f4c <_dtoa_r+0x63c>
 8007032:	4b7f      	ldr	r3, [pc, #508]	; (8007230 <_dtoa_r+0x920>)
 8007034:	2200      	movs	r2, #0
 8007036:	f7f9 faf7 	bl	8000628 <__aeabi_dmul>
 800703a:	2200      	movs	r2, #0
 800703c:	2300      	movs	r3, #0
 800703e:	4606      	mov	r6, r0
 8007040:	460f      	mov	r7, r1
 8007042:	f7f9 fd59 	bl	8000af8 <__aeabi_dcmpeq>
 8007046:	2800      	cmp	r0, #0
 8007048:	d09b      	beq.n	8006f82 <_dtoa_r+0x672>
 800704a:	e7cd      	b.n	8006fe8 <_dtoa_r+0x6d8>
 800704c:	9a08      	ldr	r2, [sp, #32]
 800704e:	2a00      	cmp	r2, #0
 8007050:	f000 80c4 	beq.w	80071dc <_dtoa_r+0x8cc>
 8007054:	9a05      	ldr	r2, [sp, #20]
 8007056:	2a01      	cmp	r2, #1
 8007058:	f300 80a8 	bgt.w	80071ac <_dtoa_r+0x89c>
 800705c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800705e:	2a00      	cmp	r2, #0
 8007060:	f000 80a0 	beq.w	80071a4 <_dtoa_r+0x894>
 8007064:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007068:	9e06      	ldr	r6, [sp, #24]
 800706a:	4645      	mov	r5, r8
 800706c:	9a04      	ldr	r2, [sp, #16]
 800706e:	2101      	movs	r1, #1
 8007070:	441a      	add	r2, r3
 8007072:	4620      	mov	r0, r4
 8007074:	4498      	add	r8, r3
 8007076:	9204      	str	r2, [sp, #16]
 8007078:	f000 fb3e 	bl	80076f8 <__i2b>
 800707c:	4607      	mov	r7, r0
 800707e:	2d00      	cmp	r5, #0
 8007080:	dd0b      	ble.n	800709a <_dtoa_r+0x78a>
 8007082:	9b04      	ldr	r3, [sp, #16]
 8007084:	2b00      	cmp	r3, #0
 8007086:	dd08      	ble.n	800709a <_dtoa_r+0x78a>
 8007088:	42ab      	cmp	r3, r5
 800708a:	9a04      	ldr	r2, [sp, #16]
 800708c:	bfa8      	it	ge
 800708e:	462b      	movge	r3, r5
 8007090:	eba8 0803 	sub.w	r8, r8, r3
 8007094:	1aed      	subs	r5, r5, r3
 8007096:	1ad3      	subs	r3, r2, r3
 8007098:	9304      	str	r3, [sp, #16]
 800709a:	9b06      	ldr	r3, [sp, #24]
 800709c:	b1fb      	cbz	r3, 80070de <_dtoa_r+0x7ce>
 800709e:	9b08      	ldr	r3, [sp, #32]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f000 809f 	beq.w	80071e4 <_dtoa_r+0x8d4>
 80070a6:	2e00      	cmp	r6, #0
 80070a8:	dd11      	ble.n	80070ce <_dtoa_r+0x7be>
 80070aa:	4639      	mov	r1, r7
 80070ac:	4632      	mov	r2, r6
 80070ae:	4620      	mov	r0, r4
 80070b0:	f000 fbde 	bl	8007870 <__pow5mult>
 80070b4:	465a      	mov	r2, fp
 80070b6:	4601      	mov	r1, r0
 80070b8:	4607      	mov	r7, r0
 80070ba:	4620      	mov	r0, r4
 80070bc:	f000 fb32 	bl	8007724 <__multiply>
 80070c0:	4659      	mov	r1, fp
 80070c2:	9007      	str	r0, [sp, #28]
 80070c4:	4620      	mov	r0, r4
 80070c6:	f000 fa5b 	bl	8007580 <_Bfree>
 80070ca:	9b07      	ldr	r3, [sp, #28]
 80070cc:	469b      	mov	fp, r3
 80070ce:	9b06      	ldr	r3, [sp, #24]
 80070d0:	1b9a      	subs	r2, r3, r6
 80070d2:	d004      	beq.n	80070de <_dtoa_r+0x7ce>
 80070d4:	4659      	mov	r1, fp
 80070d6:	4620      	mov	r0, r4
 80070d8:	f000 fbca 	bl	8007870 <__pow5mult>
 80070dc:	4683      	mov	fp, r0
 80070de:	2101      	movs	r1, #1
 80070e0:	4620      	mov	r0, r4
 80070e2:	f000 fb09 	bl	80076f8 <__i2b>
 80070e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	4606      	mov	r6, r0
 80070ec:	dd7c      	ble.n	80071e8 <_dtoa_r+0x8d8>
 80070ee:	461a      	mov	r2, r3
 80070f0:	4601      	mov	r1, r0
 80070f2:	4620      	mov	r0, r4
 80070f4:	f000 fbbc 	bl	8007870 <__pow5mult>
 80070f8:	9b05      	ldr	r3, [sp, #20]
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	4606      	mov	r6, r0
 80070fe:	dd76      	ble.n	80071ee <_dtoa_r+0x8de>
 8007100:	2300      	movs	r3, #0
 8007102:	9306      	str	r3, [sp, #24]
 8007104:	6933      	ldr	r3, [r6, #16]
 8007106:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800710a:	6918      	ldr	r0, [r3, #16]
 800710c:	f000 faa4 	bl	8007658 <__hi0bits>
 8007110:	f1c0 0020 	rsb	r0, r0, #32
 8007114:	9b04      	ldr	r3, [sp, #16]
 8007116:	4418      	add	r0, r3
 8007118:	f010 001f 	ands.w	r0, r0, #31
 800711c:	f000 8086 	beq.w	800722c <_dtoa_r+0x91c>
 8007120:	f1c0 0320 	rsb	r3, r0, #32
 8007124:	2b04      	cmp	r3, #4
 8007126:	dd7f      	ble.n	8007228 <_dtoa_r+0x918>
 8007128:	f1c0 001c 	rsb	r0, r0, #28
 800712c:	9b04      	ldr	r3, [sp, #16]
 800712e:	4403      	add	r3, r0
 8007130:	4480      	add	r8, r0
 8007132:	4405      	add	r5, r0
 8007134:	9304      	str	r3, [sp, #16]
 8007136:	f1b8 0f00 	cmp.w	r8, #0
 800713a:	dd05      	ble.n	8007148 <_dtoa_r+0x838>
 800713c:	4659      	mov	r1, fp
 800713e:	4642      	mov	r2, r8
 8007140:	4620      	mov	r0, r4
 8007142:	f000 fbef 	bl	8007924 <__lshift>
 8007146:	4683      	mov	fp, r0
 8007148:	9b04      	ldr	r3, [sp, #16]
 800714a:	2b00      	cmp	r3, #0
 800714c:	dd05      	ble.n	800715a <_dtoa_r+0x84a>
 800714e:	4631      	mov	r1, r6
 8007150:	461a      	mov	r2, r3
 8007152:	4620      	mov	r0, r4
 8007154:	f000 fbe6 	bl	8007924 <__lshift>
 8007158:	4606      	mov	r6, r0
 800715a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800715c:	2b00      	cmp	r3, #0
 800715e:	d069      	beq.n	8007234 <_dtoa_r+0x924>
 8007160:	4631      	mov	r1, r6
 8007162:	4658      	mov	r0, fp
 8007164:	f000 fc4a 	bl	80079fc <__mcmp>
 8007168:	2800      	cmp	r0, #0
 800716a:	da63      	bge.n	8007234 <_dtoa_r+0x924>
 800716c:	2300      	movs	r3, #0
 800716e:	4659      	mov	r1, fp
 8007170:	220a      	movs	r2, #10
 8007172:	4620      	mov	r0, r4
 8007174:	f000 fa26 	bl	80075c4 <__multadd>
 8007178:	9b08      	ldr	r3, [sp, #32]
 800717a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800717e:	4683      	mov	fp, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	f000 818f 	beq.w	80074a4 <_dtoa_r+0xb94>
 8007186:	4639      	mov	r1, r7
 8007188:	2300      	movs	r3, #0
 800718a:	220a      	movs	r2, #10
 800718c:	4620      	mov	r0, r4
 800718e:	f000 fa19 	bl	80075c4 <__multadd>
 8007192:	f1b9 0f00 	cmp.w	r9, #0
 8007196:	4607      	mov	r7, r0
 8007198:	f300 808e 	bgt.w	80072b8 <_dtoa_r+0x9a8>
 800719c:	9b05      	ldr	r3, [sp, #20]
 800719e:	2b02      	cmp	r3, #2
 80071a0:	dc50      	bgt.n	8007244 <_dtoa_r+0x934>
 80071a2:	e089      	b.n	80072b8 <_dtoa_r+0x9a8>
 80071a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80071aa:	e75d      	b.n	8007068 <_dtoa_r+0x758>
 80071ac:	9b01      	ldr	r3, [sp, #4]
 80071ae:	1e5e      	subs	r6, r3, #1
 80071b0:	9b06      	ldr	r3, [sp, #24]
 80071b2:	42b3      	cmp	r3, r6
 80071b4:	bfbf      	itttt	lt
 80071b6:	9b06      	ldrlt	r3, [sp, #24]
 80071b8:	9606      	strlt	r6, [sp, #24]
 80071ba:	1af2      	sublt	r2, r6, r3
 80071bc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80071be:	bfb6      	itet	lt
 80071c0:	189b      	addlt	r3, r3, r2
 80071c2:	1b9e      	subge	r6, r3, r6
 80071c4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80071c6:	9b01      	ldr	r3, [sp, #4]
 80071c8:	bfb8      	it	lt
 80071ca:	2600      	movlt	r6, #0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	bfb5      	itete	lt
 80071d0:	eba8 0503 	sublt.w	r5, r8, r3
 80071d4:	9b01      	ldrge	r3, [sp, #4]
 80071d6:	2300      	movlt	r3, #0
 80071d8:	4645      	movge	r5, r8
 80071da:	e747      	b.n	800706c <_dtoa_r+0x75c>
 80071dc:	9e06      	ldr	r6, [sp, #24]
 80071de:	9f08      	ldr	r7, [sp, #32]
 80071e0:	4645      	mov	r5, r8
 80071e2:	e74c      	b.n	800707e <_dtoa_r+0x76e>
 80071e4:	9a06      	ldr	r2, [sp, #24]
 80071e6:	e775      	b.n	80070d4 <_dtoa_r+0x7c4>
 80071e8:	9b05      	ldr	r3, [sp, #20]
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	dc18      	bgt.n	8007220 <_dtoa_r+0x910>
 80071ee:	9b02      	ldr	r3, [sp, #8]
 80071f0:	b9b3      	cbnz	r3, 8007220 <_dtoa_r+0x910>
 80071f2:	9b03      	ldr	r3, [sp, #12]
 80071f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071f8:	b9a3      	cbnz	r3, 8007224 <_dtoa_r+0x914>
 80071fa:	9b03      	ldr	r3, [sp, #12]
 80071fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007200:	0d1b      	lsrs	r3, r3, #20
 8007202:	051b      	lsls	r3, r3, #20
 8007204:	b12b      	cbz	r3, 8007212 <_dtoa_r+0x902>
 8007206:	9b04      	ldr	r3, [sp, #16]
 8007208:	3301      	adds	r3, #1
 800720a:	9304      	str	r3, [sp, #16]
 800720c:	f108 0801 	add.w	r8, r8, #1
 8007210:	2301      	movs	r3, #1
 8007212:	9306      	str	r3, [sp, #24]
 8007214:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007216:	2b00      	cmp	r3, #0
 8007218:	f47f af74 	bne.w	8007104 <_dtoa_r+0x7f4>
 800721c:	2001      	movs	r0, #1
 800721e:	e779      	b.n	8007114 <_dtoa_r+0x804>
 8007220:	2300      	movs	r3, #0
 8007222:	e7f6      	b.n	8007212 <_dtoa_r+0x902>
 8007224:	9b02      	ldr	r3, [sp, #8]
 8007226:	e7f4      	b.n	8007212 <_dtoa_r+0x902>
 8007228:	d085      	beq.n	8007136 <_dtoa_r+0x826>
 800722a:	4618      	mov	r0, r3
 800722c:	301c      	adds	r0, #28
 800722e:	e77d      	b.n	800712c <_dtoa_r+0x81c>
 8007230:	40240000 	.word	0x40240000
 8007234:	9b01      	ldr	r3, [sp, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	dc38      	bgt.n	80072ac <_dtoa_r+0x99c>
 800723a:	9b05      	ldr	r3, [sp, #20]
 800723c:	2b02      	cmp	r3, #2
 800723e:	dd35      	ble.n	80072ac <_dtoa_r+0x99c>
 8007240:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007244:	f1b9 0f00 	cmp.w	r9, #0
 8007248:	d10d      	bne.n	8007266 <_dtoa_r+0x956>
 800724a:	4631      	mov	r1, r6
 800724c:	464b      	mov	r3, r9
 800724e:	2205      	movs	r2, #5
 8007250:	4620      	mov	r0, r4
 8007252:	f000 f9b7 	bl	80075c4 <__multadd>
 8007256:	4601      	mov	r1, r0
 8007258:	4606      	mov	r6, r0
 800725a:	4658      	mov	r0, fp
 800725c:	f000 fbce 	bl	80079fc <__mcmp>
 8007260:	2800      	cmp	r0, #0
 8007262:	f73f adbd 	bgt.w	8006de0 <_dtoa_r+0x4d0>
 8007266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007268:	9d00      	ldr	r5, [sp, #0]
 800726a:	ea6f 0a03 	mvn.w	sl, r3
 800726e:	f04f 0800 	mov.w	r8, #0
 8007272:	4631      	mov	r1, r6
 8007274:	4620      	mov	r0, r4
 8007276:	f000 f983 	bl	8007580 <_Bfree>
 800727a:	2f00      	cmp	r7, #0
 800727c:	f43f aeb4 	beq.w	8006fe8 <_dtoa_r+0x6d8>
 8007280:	f1b8 0f00 	cmp.w	r8, #0
 8007284:	d005      	beq.n	8007292 <_dtoa_r+0x982>
 8007286:	45b8      	cmp	r8, r7
 8007288:	d003      	beq.n	8007292 <_dtoa_r+0x982>
 800728a:	4641      	mov	r1, r8
 800728c:	4620      	mov	r0, r4
 800728e:	f000 f977 	bl	8007580 <_Bfree>
 8007292:	4639      	mov	r1, r7
 8007294:	4620      	mov	r0, r4
 8007296:	f000 f973 	bl	8007580 <_Bfree>
 800729a:	e6a5      	b.n	8006fe8 <_dtoa_r+0x6d8>
 800729c:	2600      	movs	r6, #0
 800729e:	4637      	mov	r7, r6
 80072a0:	e7e1      	b.n	8007266 <_dtoa_r+0x956>
 80072a2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80072a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80072a8:	4637      	mov	r7, r6
 80072aa:	e599      	b.n	8006de0 <_dtoa_r+0x4d0>
 80072ac:	9b08      	ldr	r3, [sp, #32]
 80072ae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f000 80fd 	beq.w	80074b2 <_dtoa_r+0xba2>
 80072b8:	2d00      	cmp	r5, #0
 80072ba:	dd05      	ble.n	80072c8 <_dtoa_r+0x9b8>
 80072bc:	4639      	mov	r1, r7
 80072be:	462a      	mov	r2, r5
 80072c0:	4620      	mov	r0, r4
 80072c2:	f000 fb2f 	bl	8007924 <__lshift>
 80072c6:	4607      	mov	r7, r0
 80072c8:	9b06      	ldr	r3, [sp, #24]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d05c      	beq.n	8007388 <_dtoa_r+0xa78>
 80072ce:	6879      	ldr	r1, [r7, #4]
 80072d0:	4620      	mov	r0, r4
 80072d2:	f000 f915 	bl	8007500 <_Balloc>
 80072d6:	4605      	mov	r5, r0
 80072d8:	b928      	cbnz	r0, 80072e6 <_dtoa_r+0x9d6>
 80072da:	4b80      	ldr	r3, [pc, #512]	; (80074dc <_dtoa_r+0xbcc>)
 80072dc:	4602      	mov	r2, r0
 80072de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80072e2:	f7ff bb2e 	b.w	8006942 <_dtoa_r+0x32>
 80072e6:	693a      	ldr	r2, [r7, #16]
 80072e8:	3202      	adds	r2, #2
 80072ea:	0092      	lsls	r2, r2, #2
 80072ec:	f107 010c 	add.w	r1, r7, #12
 80072f0:	300c      	adds	r0, #12
 80072f2:	f7fe fddf 	bl	8005eb4 <memcpy>
 80072f6:	2201      	movs	r2, #1
 80072f8:	4629      	mov	r1, r5
 80072fa:	4620      	mov	r0, r4
 80072fc:	f000 fb12 	bl	8007924 <__lshift>
 8007300:	9b00      	ldr	r3, [sp, #0]
 8007302:	3301      	adds	r3, #1
 8007304:	9301      	str	r3, [sp, #4]
 8007306:	9b00      	ldr	r3, [sp, #0]
 8007308:	444b      	add	r3, r9
 800730a:	9307      	str	r3, [sp, #28]
 800730c:	9b02      	ldr	r3, [sp, #8]
 800730e:	f003 0301 	and.w	r3, r3, #1
 8007312:	46b8      	mov	r8, r7
 8007314:	9306      	str	r3, [sp, #24]
 8007316:	4607      	mov	r7, r0
 8007318:	9b01      	ldr	r3, [sp, #4]
 800731a:	4631      	mov	r1, r6
 800731c:	3b01      	subs	r3, #1
 800731e:	4658      	mov	r0, fp
 8007320:	9302      	str	r3, [sp, #8]
 8007322:	f7ff fa67 	bl	80067f4 <quorem>
 8007326:	4603      	mov	r3, r0
 8007328:	3330      	adds	r3, #48	; 0x30
 800732a:	9004      	str	r0, [sp, #16]
 800732c:	4641      	mov	r1, r8
 800732e:	4658      	mov	r0, fp
 8007330:	9308      	str	r3, [sp, #32]
 8007332:	f000 fb63 	bl	80079fc <__mcmp>
 8007336:	463a      	mov	r2, r7
 8007338:	4681      	mov	r9, r0
 800733a:	4631      	mov	r1, r6
 800733c:	4620      	mov	r0, r4
 800733e:	f000 fb79 	bl	8007a34 <__mdiff>
 8007342:	68c2      	ldr	r2, [r0, #12]
 8007344:	9b08      	ldr	r3, [sp, #32]
 8007346:	4605      	mov	r5, r0
 8007348:	bb02      	cbnz	r2, 800738c <_dtoa_r+0xa7c>
 800734a:	4601      	mov	r1, r0
 800734c:	4658      	mov	r0, fp
 800734e:	f000 fb55 	bl	80079fc <__mcmp>
 8007352:	9b08      	ldr	r3, [sp, #32]
 8007354:	4602      	mov	r2, r0
 8007356:	4629      	mov	r1, r5
 8007358:	4620      	mov	r0, r4
 800735a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800735e:	f000 f90f 	bl	8007580 <_Bfree>
 8007362:	9b05      	ldr	r3, [sp, #20]
 8007364:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007366:	9d01      	ldr	r5, [sp, #4]
 8007368:	ea43 0102 	orr.w	r1, r3, r2
 800736c:	9b06      	ldr	r3, [sp, #24]
 800736e:	430b      	orrs	r3, r1
 8007370:	9b08      	ldr	r3, [sp, #32]
 8007372:	d10d      	bne.n	8007390 <_dtoa_r+0xa80>
 8007374:	2b39      	cmp	r3, #57	; 0x39
 8007376:	d029      	beq.n	80073cc <_dtoa_r+0xabc>
 8007378:	f1b9 0f00 	cmp.w	r9, #0
 800737c:	dd01      	ble.n	8007382 <_dtoa_r+0xa72>
 800737e:	9b04      	ldr	r3, [sp, #16]
 8007380:	3331      	adds	r3, #49	; 0x31
 8007382:	9a02      	ldr	r2, [sp, #8]
 8007384:	7013      	strb	r3, [r2, #0]
 8007386:	e774      	b.n	8007272 <_dtoa_r+0x962>
 8007388:	4638      	mov	r0, r7
 800738a:	e7b9      	b.n	8007300 <_dtoa_r+0x9f0>
 800738c:	2201      	movs	r2, #1
 800738e:	e7e2      	b.n	8007356 <_dtoa_r+0xa46>
 8007390:	f1b9 0f00 	cmp.w	r9, #0
 8007394:	db06      	blt.n	80073a4 <_dtoa_r+0xa94>
 8007396:	9905      	ldr	r1, [sp, #20]
 8007398:	ea41 0909 	orr.w	r9, r1, r9
 800739c:	9906      	ldr	r1, [sp, #24]
 800739e:	ea59 0101 	orrs.w	r1, r9, r1
 80073a2:	d120      	bne.n	80073e6 <_dtoa_r+0xad6>
 80073a4:	2a00      	cmp	r2, #0
 80073a6:	ddec      	ble.n	8007382 <_dtoa_r+0xa72>
 80073a8:	4659      	mov	r1, fp
 80073aa:	2201      	movs	r2, #1
 80073ac:	4620      	mov	r0, r4
 80073ae:	9301      	str	r3, [sp, #4]
 80073b0:	f000 fab8 	bl	8007924 <__lshift>
 80073b4:	4631      	mov	r1, r6
 80073b6:	4683      	mov	fp, r0
 80073b8:	f000 fb20 	bl	80079fc <__mcmp>
 80073bc:	2800      	cmp	r0, #0
 80073be:	9b01      	ldr	r3, [sp, #4]
 80073c0:	dc02      	bgt.n	80073c8 <_dtoa_r+0xab8>
 80073c2:	d1de      	bne.n	8007382 <_dtoa_r+0xa72>
 80073c4:	07da      	lsls	r2, r3, #31
 80073c6:	d5dc      	bpl.n	8007382 <_dtoa_r+0xa72>
 80073c8:	2b39      	cmp	r3, #57	; 0x39
 80073ca:	d1d8      	bne.n	800737e <_dtoa_r+0xa6e>
 80073cc:	9a02      	ldr	r2, [sp, #8]
 80073ce:	2339      	movs	r3, #57	; 0x39
 80073d0:	7013      	strb	r3, [r2, #0]
 80073d2:	462b      	mov	r3, r5
 80073d4:	461d      	mov	r5, r3
 80073d6:	3b01      	subs	r3, #1
 80073d8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80073dc:	2a39      	cmp	r2, #57	; 0x39
 80073de:	d050      	beq.n	8007482 <_dtoa_r+0xb72>
 80073e0:	3201      	adds	r2, #1
 80073e2:	701a      	strb	r2, [r3, #0]
 80073e4:	e745      	b.n	8007272 <_dtoa_r+0x962>
 80073e6:	2a00      	cmp	r2, #0
 80073e8:	dd03      	ble.n	80073f2 <_dtoa_r+0xae2>
 80073ea:	2b39      	cmp	r3, #57	; 0x39
 80073ec:	d0ee      	beq.n	80073cc <_dtoa_r+0xabc>
 80073ee:	3301      	adds	r3, #1
 80073f0:	e7c7      	b.n	8007382 <_dtoa_r+0xa72>
 80073f2:	9a01      	ldr	r2, [sp, #4]
 80073f4:	9907      	ldr	r1, [sp, #28]
 80073f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80073fa:	428a      	cmp	r2, r1
 80073fc:	d02a      	beq.n	8007454 <_dtoa_r+0xb44>
 80073fe:	4659      	mov	r1, fp
 8007400:	2300      	movs	r3, #0
 8007402:	220a      	movs	r2, #10
 8007404:	4620      	mov	r0, r4
 8007406:	f000 f8dd 	bl	80075c4 <__multadd>
 800740a:	45b8      	cmp	r8, r7
 800740c:	4683      	mov	fp, r0
 800740e:	f04f 0300 	mov.w	r3, #0
 8007412:	f04f 020a 	mov.w	r2, #10
 8007416:	4641      	mov	r1, r8
 8007418:	4620      	mov	r0, r4
 800741a:	d107      	bne.n	800742c <_dtoa_r+0xb1c>
 800741c:	f000 f8d2 	bl	80075c4 <__multadd>
 8007420:	4680      	mov	r8, r0
 8007422:	4607      	mov	r7, r0
 8007424:	9b01      	ldr	r3, [sp, #4]
 8007426:	3301      	adds	r3, #1
 8007428:	9301      	str	r3, [sp, #4]
 800742a:	e775      	b.n	8007318 <_dtoa_r+0xa08>
 800742c:	f000 f8ca 	bl	80075c4 <__multadd>
 8007430:	4639      	mov	r1, r7
 8007432:	4680      	mov	r8, r0
 8007434:	2300      	movs	r3, #0
 8007436:	220a      	movs	r2, #10
 8007438:	4620      	mov	r0, r4
 800743a:	f000 f8c3 	bl	80075c4 <__multadd>
 800743e:	4607      	mov	r7, r0
 8007440:	e7f0      	b.n	8007424 <_dtoa_r+0xb14>
 8007442:	f1b9 0f00 	cmp.w	r9, #0
 8007446:	9a00      	ldr	r2, [sp, #0]
 8007448:	bfcc      	ite	gt
 800744a:	464d      	movgt	r5, r9
 800744c:	2501      	movle	r5, #1
 800744e:	4415      	add	r5, r2
 8007450:	f04f 0800 	mov.w	r8, #0
 8007454:	4659      	mov	r1, fp
 8007456:	2201      	movs	r2, #1
 8007458:	4620      	mov	r0, r4
 800745a:	9301      	str	r3, [sp, #4]
 800745c:	f000 fa62 	bl	8007924 <__lshift>
 8007460:	4631      	mov	r1, r6
 8007462:	4683      	mov	fp, r0
 8007464:	f000 faca 	bl	80079fc <__mcmp>
 8007468:	2800      	cmp	r0, #0
 800746a:	dcb2      	bgt.n	80073d2 <_dtoa_r+0xac2>
 800746c:	d102      	bne.n	8007474 <_dtoa_r+0xb64>
 800746e:	9b01      	ldr	r3, [sp, #4]
 8007470:	07db      	lsls	r3, r3, #31
 8007472:	d4ae      	bmi.n	80073d2 <_dtoa_r+0xac2>
 8007474:	462b      	mov	r3, r5
 8007476:	461d      	mov	r5, r3
 8007478:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800747c:	2a30      	cmp	r2, #48	; 0x30
 800747e:	d0fa      	beq.n	8007476 <_dtoa_r+0xb66>
 8007480:	e6f7      	b.n	8007272 <_dtoa_r+0x962>
 8007482:	9a00      	ldr	r2, [sp, #0]
 8007484:	429a      	cmp	r2, r3
 8007486:	d1a5      	bne.n	80073d4 <_dtoa_r+0xac4>
 8007488:	f10a 0a01 	add.w	sl, sl, #1
 800748c:	2331      	movs	r3, #49	; 0x31
 800748e:	e779      	b.n	8007384 <_dtoa_r+0xa74>
 8007490:	4b13      	ldr	r3, [pc, #76]	; (80074e0 <_dtoa_r+0xbd0>)
 8007492:	f7ff baaf 	b.w	80069f4 <_dtoa_r+0xe4>
 8007496:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007498:	2b00      	cmp	r3, #0
 800749a:	f47f aa86 	bne.w	80069aa <_dtoa_r+0x9a>
 800749e:	4b11      	ldr	r3, [pc, #68]	; (80074e4 <_dtoa_r+0xbd4>)
 80074a0:	f7ff baa8 	b.w	80069f4 <_dtoa_r+0xe4>
 80074a4:	f1b9 0f00 	cmp.w	r9, #0
 80074a8:	dc03      	bgt.n	80074b2 <_dtoa_r+0xba2>
 80074aa:	9b05      	ldr	r3, [sp, #20]
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	f73f aec9 	bgt.w	8007244 <_dtoa_r+0x934>
 80074b2:	9d00      	ldr	r5, [sp, #0]
 80074b4:	4631      	mov	r1, r6
 80074b6:	4658      	mov	r0, fp
 80074b8:	f7ff f99c 	bl	80067f4 <quorem>
 80074bc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80074c0:	f805 3b01 	strb.w	r3, [r5], #1
 80074c4:	9a00      	ldr	r2, [sp, #0]
 80074c6:	1aaa      	subs	r2, r5, r2
 80074c8:	4591      	cmp	r9, r2
 80074ca:	ddba      	ble.n	8007442 <_dtoa_r+0xb32>
 80074cc:	4659      	mov	r1, fp
 80074ce:	2300      	movs	r3, #0
 80074d0:	220a      	movs	r2, #10
 80074d2:	4620      	mov	r0, r4
 80074d4:	f000 f876 	bl	80075c4 <__multadd>
 80074d8:	4683      	mov	fp, r0
 80074da:	e7eb      	b.n	80074b4 <_dtoa_r+0xba4>
 80074dc:	08008d67 	.word	0x08008d67
 80074e0:	08008cc0 	.word	0x08008cc0
 80074e4:	08008ce4 	.word	0x08008ce4

080074e8 <_localeconv_r>:
 80074e8:	4800      	ldr	r0, [pc, #0]	; (80074ec <_localeconv_r+0x4>)
 80074ea:	4770      	bx	lr
 80074ec:	20000188 	.word	0x20000188

080074f0 <malloc>:
 80074f0:	4b02      	ldr	r3, [pc, #8]	; (80074fc <malloc+0xc>)
 80074f2:	4601      	mov	r1, r0
 80074f4:	6818      	ldr	r0, [r3, #0]
 80074f6:	f000 bbe1 	b.w	8007cbc <_malloc_r>
 80074fa:	bf00      	nop
 80074fc:	20000034 	.word	0x20000034

08007500 <_Balloc>:
 8007500:	b570      	push	{r4, r5, r6, lr}
 8007502:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007504:	4604      	mov	r4, r0
 8007506:	460d      	mov	r5, r1
 8007508:	b976      	cbnz	r6, 8007528 <_Balloc+0x28>
 800750a:	2010      	movs	r0, #16
 800750c:	f7ff fff0 	bl	80074f0 <malloc>
 8007510:	4602      	mov	r2, r0
 8007512:	6260      	str	r0, [r4, #36]	; 0x24
 8007514:	b920      	cbnz	r0, 8007520 <_Balloc+0x20>
 8007516:	4b18      	ldr	r3, [pc, #96]	; (8007578 <_Balloc+0x78>)
 8007518:	4818      	ldr	r0, [pc, #96]	; (800757c <_Balloc+0x7c>)
 800751a:	2166      	movs	r1, #102	; 0x66
 800751c:	f000 fd94 	bl	8008048 <__assert_func>
 8007520:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007524:	6006      	str	r6, [r0, #0]
 8007526:	60c6      	str	r6, [r0, #12]
 8007528:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800752a:	68f3      	ldr	r3, [r6, #12]
 800752c:	b183      	cbz	r3, 8007550 <_Balloc+0x50>
 800752e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007536:	b9b8      	cbnz	r0, 8007568 <_Balloc+0x68>
 8007538:	2101      	movs	r1, #1
 800753a:	fa01 f605 	lsl.w	r6, r1, r5
 800753e:	1d72      	adds	r2, r6, #5
 8007540:	0092      	lsls	r2, r2, #2
 8007542:	4620      	mov	r0, r4
 8007544:	f000 fb5a 	bl	8007bfc <_calloc_r>
 8007548:	b160      	cbz	r0, 8007564 <_Balloc+0x64>
 800754a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800754e:	e00e      	b.n	800756e <_Balloc+0x6e>
 8007550:	2221      	movs	r2, #33	; 0x21
 8007552:	2104      	movs	r1, #4
 8007554:	4620      	mov	r0, r4
 8007556:	f000 fb51 	bl	8007bfc <_calloc_r>
 800755a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800755c:	60f0      	str	r0, [r6, #12]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1e4      	bne.n	800752e <_Balloc+0x2e>
 8007564:	2000      	movs	r0, #0
 8007566:	bd70      	pop	{r4, r5, r6, pc}
 8007568:	6802      	ldr	r2, [r0, #0]
 800756a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800756e:	2300      	movs	r3, #0
 8007570:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007574:	e7f7      	b.n	8007566 <_Balloc+0x66>
 8007576:	bf00      	nop
 8007578:	08008cf1 	.word	0x08008cf1
 800757c:	08008d78 	.word	0x08008d78

08007580 <_Bfree>:
 8007580:	b570      	push	{r4, r5, r6, lr}
 8007582:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007584:	4605      	mov	r5, r0
 8007586:	460c      	mov	r4, r1
 8007588:	b976      	cbnz	r6, 80075a8 <_Bfree+0x28>
 800758a:	2010      	movs	r0, #16
 800758c:	f7ff ffb0 	bl	80074f0 <malloc>
 8007590:	4602      	mov	r2, r0
 8007592:	6268      	str	r0, [r5, #36]	; 0x24
 8007594:	b920      	cbnz	r0, 80075a0 <_Bfree+0x20>
 8007596:	4b09      	ldr	r3, [pc, #36]	; (80075bc <_Bfree+0x3c>)
 8007598:	4809      	ldr	r0, [pc, #36]	; (80075c0 <_Bfree+0x40>)
 800759a:	218a      	movs	r1, #138	; 0x8a
 800759c:	f000 fd54 	bl	8008048 <__assert_func>
 80075a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075a4:	6006      	str	r6, [r0, #0]
 80075a6:	60c6      	str	r6, [r0, #12]
 80075a8:	b13c      	cbz	r4, 80075ba <_Bfree+0x3a>
 80075aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80075ac:	6862      	ldr	r2, [r4, #4]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075b4:	6021      	str	r1, [r4, #0]
 80075b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80075ba:	bd70      	pop	{r4, r5, r6, pc}
 80075bc:	08008cf1 	.word	0x08008cf1
 80075c0:	08008d78 	.word	0x08008d78

080075c4 <__multadd>:
 80075c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075c8:	690e      	ldr	r6, [r1, #16]
 80075ca:	4607      	mov	r7, r0
 80075cc:	4698      	mov	r8, r3
 80075ce:	460c      	mov	r4, r1
 80075d0:	f101 0014 	add.w	r0, r1, #20
 80075d4:	2300      	movs	r3, #0
 80075d6:	6805      	ldr	r5, [r0, #0]
 80075d8:	b2a9      	uxth	r1, r5
 80075da:	fb02 8101 	mla	r1, r2, r1, r8
 80075de:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80075e2:	0c2d      	lsrs	r5, r5, #16
 80075e4:	fb02 c505 	mla	r5, r2, r5, ip
 80075e8:	b289      	uxth	r1, r1
 80075ea:	3301      	adds	r3, #1
 80075ec:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80075f0:	429e      	cmp	r6, r3
 80075f2:	f840 1b04 	str.w	r1, [r0], #4
 80075f6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80075fa:	dcec      	bgt.n	80075d6 <__multadd+0x12>
 80075fc:	f1b8 0f00 	cmp.w	r8, #0
 8007600:	d022      	beq.n	8007648 <__multadd+0x84>
 8007602:	68a3      	ldr	r3, [r4, #8]
 8007604:	42b3      	cmp	r3, r6
 8007606:	dc19      	bgt.n	800763c <__multadd+0x78>
 8007608:	6861      	ldr	r1, [r4, #4]
 800760a:	4638      	mov	r0, r7
 800760c:	3101      	adds	r1, #1
 800760e:	f7ff ff77 	bl	8007500 <_Balloc>
 8007612:	4605      	mov	r5, r0
 8007614:	b928      	cbnz	r0, 8007622 <__multadd+0x5e>
 8007616:	4602      	mov	r2, r0
 8007618:	4b0d      	ldr	r3, [pc, #52]	; (8007650 <__multadd+0x8c>)
 800761a:	480e      	ldr	r0, [pc, #56]	; (8007654 <__multadd+0x90>)
 800761c:	21b5      	movs	r1, #181	; 0xb5
 800761e:	f000 fd13 	bl	8008048 <__assert_func>
 8007622:	6922      	ldr	r2, [r4, #16]
 8007624:	3202      	adds	r2, #2
 8007626:	f104 010c 	add.w	r1, r4, #12
 800762a:	0092      	lsls	r2, r2, #2
 800762c:	300c      	adds	r0, #12
 800762e:	f7fe fc41 	bl	8005eb4 <memcpy>
 8007632:	4621      	mov	r1, r4
 8007634:	4638      	mov	r0, r7
 8007636:	f7ff ffa3 	bl	8007580 <_Bfree>
 800763a:	462c      	mov	r4, r5
 800763c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007640:	3601      	adds	r6, #1
 8007642:	f8c3 8014 	str.w	r8, [r3, #20]
 8007646:	6126      	str	r6, [r4, #16]
 8007648:	4620      	mov	r0, r4
 800764a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800764e:	bf00      	nop
 8007650:	08008d67 	.word	0x08008d67
 8007654:	08008d78 	.word	0x08008d78

08007658 <__hi0bits>:
 8007658:	0c03      	lsrs	r3, r0, #16
 800765a:	041b      	lsls	r3, r3, #16
 800765c:	b9d3      	cbnz	r3, 8007694 <__hi0bits+0x3c>
 800765e:	0400      	lsls	r0, r0, #16
 8007660:	2310      	movs	r3, #16
 8007662:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007666:	bf04      	itt	eq
 8007668:	0200      	lsleq	r0, r0, #8
 800766a:	3308      	addeq	r3, #8
 800766c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007670:	bf04      	itt	eq
 8007672:	0100      	lsleq	r0, r0, #4
 8007674:	3304      	addeq	r3, #4
 8007676:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800767a:	bf04      	itt	eq
 800767c:	0080      	lsleq	r0, r0, #2
 800767e:	3302      	addeq	r3, #2
 8007680:	2800      	cmp	r0, #0
 8007682:	db05      	blt.n	8007690 <__hi0bits+0x38>
 8007684:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007688:	f103 0301 	add.w	r3, r3, #1
 800768c:	bf08      	it	eq
 800768e:	2320      	moveq	r3, #32
 8007690:	4618      	mov	r0, r3
 8007692:	4770      	bx	lr
 8007694:	2300      	movs	r3, #0
 8007696:	e7e4      	b.n	8007662 <__hi0bits+0xa>

08007698 <__lo0bits>:
 8007698:	6803      	ldr	r3, [r0, #0]
 800769a:	f013 0207 	ands.w	r2, r3, #7
 800769e:	4601      	mov	r1, r0
 80076a0:	d00b      	beq.n	80076ba <__lo0bits+0x22>
 80076a2:	07da      	lsls	r2, r3, #31
 80076a4:	d424      	bmi.n	80076f0 <__lo0bits+0x58>
 80076a6:	0798      	lsls	r0, r3, #30
 80076a8:	bf49      	itett	mi
 80076aa:	085b      	lsrmi	r3, r3, #1
 80076ac:	089b      	lsrpl	r3, r3, #2
 80076ae:	2001      	movmi	r0, #1
 80076b0:	600b      	strmi	r3, [r1, #0]
 80076b2:	bf5c      	itt	pl
 80076b4:	600b      	strpl	r3, [r1, #0]
 80076b6:	2002      	movpl	r0, #2
 80076b8:	4770      	bx	lr
 80076ba:	b298      	uxth	r0, r3
 80076bc:	b9b0      	cbnz	r0, 80076ec <__lo0bits+0x54>
 80076be:	0c1b      	lsrs	r3, r3, #16
 80076c0:	2010      	movs	r0, #16
 80076c2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80076c6:	bf04      	itt	eq
 80076c8:	0a1b      	lsreq	r3, r3, #8
 80076ca:	3008      	addeq	r0, #8
 80076cc:	071a      	lsls	r2, r3, #28
 80076ce:	bf04      	itt	eq
 80076d0:	091b      	lsreq	r3, r3, #4
 80076d2:	3004      	addeq	r0, #4
 80076d4:	079a      	lsls	r2, r3, #30
 80076d6:	bf04      	itt	eq
 80076d8:	089b      	lsreq	r3, r3, #2
 80076da:	3002      	addeq	r0, #2
 80076dc:	07da      	lsls	r2, r3, #31
 80076de:	d403      	bmi.n	80076e8 <__lo0bits+0x50>
 80076e0:	085b      	lsrs	r3, r3, #1
 80076e2:	f100 0001 	add.w	r0, r0, #1
 80076e6:	d005      	beq.n	80076f4 <__lo0bits+0x5c>
 80076e8:	600b      	str	r3, [r1, #0]
 80076ea:	4770      	bx	lr
 80076ec:	4610      	mov	r0, r2
 80076ee:	e7e8      	b.n	80076c2 <__lo0bits+0x2a>
 80076f0:	2000      	movs	r0, #0
 80076f2:	4770      	bx	lr
 80076f4:	2020      	movs	r0, #32
 80076f6:	4770      	bx	lr

080076f8 <__i2b>:
 80076f8:	b510      	push	{r4, lr}
 80076fa:	460c      	mov	r4, r1
 80076fc:	2101      	movs	r1, #1
 80076fe:	f7ff feff 	bl	8007500 <_Balloc>
 8007702:	4602      	mov	r2, r0
 8007704:	b928      	cbnz	r0, 8007712 <__i2b+0x1a>
 8007706:	4b05      	ldr	r3, [pc, #20]	; (800771c <__i2b+0x24>)
 8007708:	4805      	ldr	r0, [pc, #20]	; (8007720 <__i2b+0x28>)
 800770a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800770e:	f000 fc9b 	bl	8008048 <__assert_func>
 8007712:	2301      	movs	r3, #1
 8007714:	6144      	str	r4, [r0, #20]
 8007716:	6103      	str	r3, [r0, #16]
 8007718:	bd10      	pop	{r4, pc}
 800771a:	bf00      	nop
 800771c:	08008d67 	.word	0x08008d67
 8007720:	08008d78 	.word	0x08008d78

08007724 <__multiply>:
 8007724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007728:	4614      	mov	r4, r2
 800772a:	690a      	ldr	r2, [r1, #16]
 800772c:	6923      	ldr	r3, [r4, #16]
 800772e:	429a      	cmp	r2, r3
 8007730:	bfb8      	it	lt
 8007732:	460b      	movlt	r3, r1
 8007734:	460d      	mov	r5, r1
 8007736:	bfbc      	itt	lt
 8007738:	4625      	movlt	r5, r4
 800773a:	461c      	movlt	r4, r3
 800773c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007740:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007744:	68ab      	ldr	r3, [r5, #8]
 8007746:	6869      	ldr	r1, [r5, #4]
 8007748:	eb0a 0709 	add.w	r7, sl, r9
 800774c:	42bb      	cmp	r3, r7
 800774e:	b085      	sub	sp, #20
 8007750:	bfb8      	it	lt
 8007752:	3101      	addlt	r1, #1
 8007754:	f7ff fed4 	bl	8007500 <_Balloc>
 8007758:	b930      	cbnz	r0, 8007768 <__multiply+0x44>
 800775a:	4602      	mov	r2, r0
 800775c:	4b42      	ldr	r3, [pc, #264]	; (8007868 <__multiply+0x144>)
 800775e:	4843      	ldr	r0, [pc, #268]	; (800786c <__multiply+0x148>)
 8007760:	f240 115d 	movw	r1, #349	; 0x15d
 8007764:	f000 fc70 	bl	8008048 <__assert_func>
 8007768:	f100 0614 	add.w	r6, r0, #20
 800776c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007770:	4633      	mov	r3, r6
 8007772:	2200      	movs	r2, #0
 8007774:	4543      	cmp	r3, r8
 8007776:	d31e      	bcc.n	80077b6 <__multiply+0x92>
 8007778:	f105 0c14 	add.w	ip, r5, #20
 800777c:	f104 0314 	add.w	r3, r4, #20
 8007780:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007784:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007788:	9202      	str	r2, [sp, #8]
 800778a:	ebac 0205 	sub.w	r2, ip, r5
 800778e:	3a15      	subs	r2, #21
 8007790:	f022 0203 	bic.w	r2, r2, #3
 8007794:	3204      	adds	r2, #4
 8007796:	f105 0115 	add.w	r1, r5, #21
 800779a:	458c      	cmp	ip, r1
 800779c:	bf38      	it	cc
 800779e:	2204      	movcc	r2, #4
 80077a0:	9201      	str	r2, [sp, #4]
 80077a2:	9a02      	ldr	r2, [sp, #8]
 80077a4:	9303      	str	r3, [sp, #12]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d808      	bhi.n	80077bc <__multiply+0x98>
 80077aa:	2f00      	cmp	r7, #0
 80077ac:	dc55      	bgt.n	800785a <__multiply+0x136>
 80077ae:	6107      	str	r7, [r0, #16]
 80077b0:	b005      	add	sp, #20
 80077b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077b6:	f843 2b04 	str.w	r2, [r3], #4
 80077ba:	e7db      	b.n	8007774 <__multiply+0x50>
 80077bc:	f8b3 a000 	ldrh.w	sl, [r3]
 80077c0:	f1ba 0f00 	cmp.w	sl, #0
 80077c4:	d020      	beq.n	8007808 <__multiply+0xe4>
 80077c6:	f105 0e14 	add.w	lr, r5, #20
 80077ca:	46b1      	mov	r9, r6
 80077cc:	2200      	movs	r2, #0
 80077ce:	f85e 4b04 	ldr.w	r4, [lr], #4
 80077d2:	f8d9 b000 	ldr.w	fp, [r9]
 80077d6:	b2a1      	uxth	r1, r4
 80077d8:	fa1f fb8b 	uxth.w	fp, fp
 80077dc:	fb0a b101 	mla	r1, sl, r1, fp
 80077e0:	4411      	add	r1, r2
 80077e2:	f8d9 2000 	ldr.w	r2, [r9]
 80077e6:	0c24      	lsrs	r4, r4, #16
 80077e8:	0c12      	lsrs	r2, r2, #16
 80077ea:	fb0a 2404 	mla	r4, sl, r4, r2
 80077ee:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80077f2:	b289      	uxth	r1, r1
 80077f4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80077f8:	45f4      	cmp	ip, lr
 80077fa:	f849 1b04 	str.w	r1, [r9], #4
 80077fe:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007802:	d8e4      	bhi.n	80077ce <__multiply+0xaa>
 8007804:	9901      	ldr	r1, [sp, #4]
 8007806:	5072      	str	r2, [r6, r1]
 8007808:	9a03      	ldr	r2, [sp, #12]
 800780a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800780e:	3304      	adds	r3, #4
 8007810:	f1b9 0f00 	cmp.w	r9, #0
 8007814:	d01f      	beq.n	8007856 <__multiply+0x132>
 8007816:	6834      	ldr	r4, [r6, #0]
 8007818:	f105 0114 	add.w	r1, r5, #20
 800781c:	46b6      	mov	lr, r6
 800781e:	f04f 0a00 	mov.w	sl, #0
 8007822:	880a      	ldrh	r2, [r1, #0]
 8007824:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007828:	fb09 b202 	mla	r2, r9, r2, fp
 800782c:	4492      	add	sl, r2
 800782e:	b2a4      	uxth	r4, r4
 8007830:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007834:	f84e 4b04 	str.w	r4, [lr], #4
 8007838:	f851 4b04 	ldr.w	r4, [r1], #4
 800783c:	f8be 2000 	ldrh.w	r2, [lr]
 8007840:	0c24      	lsrs	r4, r4, #16
 8007842:	fb09 2404 	mla	r4, r9, r4, r2
 8007846:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800784a:	458c      	cmp	ip, r1
 800784c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007850:	d8e7      	bhi.n	8007822 <__multiply+0xfe>
 8007852:	9a01      	ldr	r2, [sp, #4]
 8007854:	50b4      	str	r4, [r6, r2]
 8007856:	3604      	adds	r6, #4
 8007858:	e7a3      	b.n	80077a2 <__multiply+0x7e>
 800785a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1a5      	bne.n	80077ae <__multiply+0x8a>
 8007862:	3f01      	subs	r7, #1
 8007864:	e7a1      	b.n	80077aa <__multiply+0x86>
 8007866:	bf00      	nop
 8007868:	08008d67 	.word	0x08008d67
 800786c:	08008d78 	.word	0x08008d78

08007870 <__pow5mult>:
 8007870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007874:	4615      	mov	r5, r2
 8007876:	f012 0203 	ands.w	r2, r2, #3
 800787a:	4606      	mov	r6, r0
 800787c:	460f      	mov	r7, r1
 800787e:	d007      	beq.n	8007890 <__pow5mult+0x20>
 8007880:	4c25      	ldr	r4, [pc, #148]	; (8007918 <__pow5mult+0xa8>)
 8007882:	3a01      	subs	r2, #1
 8007884:	2300      	movs	r3, #0
 8007886:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800788a:	f7ff fe9b 	bl	80075c4 <__multadd>
 800788e:	4607      	mov	r7, r0
 8007890:	10ad      	asrs	r5, r5, #2
 8007892:	d03d      	beq.n	8007910 <__pow5mult+0xa0>
 8007894:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007896:	b97c      	cbnz	r4, 80078b8 <__pow5mult+0x48>
 8007898:	2010      	movs	r0, #16
 800789a:	f7ff fe29 	bl	80074f0 <malloc>
 800789e:	4602      	mov	r2, r0
 80078a0:	6270      	str	r0, [r6, #36]	; 0x24
 80078a2:	b928      	cbnz	r0, 80078b0 <__pow5mult+0x40>
 80078a4:	4b1d      	ldr	r3, [pc, #116]	; (800791c <__pow5mult+0xac>)
 80078a6:	481e      	ldr	r0, [pc, #120]	; (8007920 <__pow5mult+0xb0>)
 80078a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80078ac:	f000 fbcc 	bl	8008048 <__assert_func>
 80078b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80078b4:	6004      	str	r4, [r0, #0]
 80078b6:	60c4      	str	r4, [r0, #12]
 80078b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80078bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80078c0:	b94c      	cbnz	r4, 80078d6 <__pow5mult+0x66>
 80078c2:	f240 2171 	movw	r1, #625	; 0x271
 80078c6:	4630      	mov	r0, r6
 80078c8:	f7ff ff16 	bl	80076f8 <__i2b>
 80078cc:	2300      	movs	r3, #0
 80078ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80078d2:	4604      	mov	r4, r0
 80078d4:	6003      	str	r3, [r0, #0]
 80078d6:	f04f 0900 	mov.w	r9, #0
 80078da:	07eb      	lsls	r3, r5, #31
 80078dc:	d50a      	bpl.n	80078f4 <__pow5mult+0x84>
 80078de:	4639      	mov	r1, r7
 80078e0:	4622      	mov	r2, r4
 80078e2:	4630      	mov	r0, r6
 80078e4:	f7ff ff1e 	bl	8007724 <__multiply>
 80078e8:	4639      	mov	r1, r7
 80078ea:	4680      	mov	r8, r0
 80078ec:	4630      	mov	r0, r6
 80078ee:	f7ff fe47 	bl	8007580 <_Bfree>
 80078f2:	4647      	mov	r7, r8
 80078f4:	106d      	asrs	r5, r5, #1
 80078f6:	d00b      	beq.n	8007910 <__pow5mult+0xa0>
 80078f8:	6820      	ldr	r0, [r4, #0]
 80078fa:	b938      	cbnz	r0, 800790c <__pow5mult+0x9c>
 80078fc:	4622      	mov	r2, r4
 80078fe:	4621      	mov	r1, r4
 8007900:	4630      	mov	r0, r6
 8007902:	f7ff ff0f 	bl	8007724 <__multiply>
 8007906:	6020      	str	r0, [r4, #0]
 8007908:	f8c0 9000 	str.w	r9, [r0]
 800790c:	4604      	mov	r4, r0
 800790e:	e7e4      	b.n	80078da <__pow5mult+0x6a>
 8007910:	4638      	mov	r0, r7
 8007912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007916:	bf00      	nop
 8007918:	08008ec8 	.word	0x08008ec8
 800791c:	08008cf1 	.word	0x08008cf1
 8007920:	08008d78 	.word	0x08008d78

08007924 <__lshift>:
 8007924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007928:	460c      	mov	r4, r1
 800792a:	6849      	ldr	r1, [r1, #4]
 800792c:	6923      	ldr	r3, [r4, #16]
 800792e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007932:	68a3      	ldr	r3, [r4, #8]
 8007934:	4607      	mov	r7, r0
 8007936:	4691      	mov	r9, r2
 8007938:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800793c:	f108 0601 	add.w	r6, r8, #1
 8007940:	42b3      	cmp	r3, r6
 8007942:	db0b      	blt.n	800795c <__lshift+0x38>
 8007944:	4638      	mov	r0, r7
 8007946:	f7ff fddb 	bl	8007500 <_Balloc>
 800794a:	4605      	mov	r5, r0
 800794c:	b948      	cbnz	r0, 8007962 <__lshift+0x3e>
 800794e:	4602      	mov	r2, r0
 8007950:	4b28      	ldr	r3, [pc, #160]	; (80079f4 <__lshift+0xd0>)
 8007952:	4829      	ldr	r0, [pc, #164]	; (80079f8 <__lshift+0xd4>)
 8007954:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007958:	f000 fb76 	bl	8008048 <__assert_func>
 800795c:	3101      	adds	r1, #1
 800795e:	005b      	lsls	r3, r3, #1
 8007960:	e7ee      	b.n	8007940 <__lshift+0x1c>
 8007962:	2300      	movs	r3, #0
 8007964:	f100 0114 	add.w	r1, r0, #20
 8007968:	f100 0210 	add.w	r2, r0, #16
 800796c:	4618      	mov	r0, r3
 800796e:	4553      	cmp	r3, sl
 8007970:	db33      	blt.n	80079da <__lshift+0xb6>
 8007972:	6920      	ldr	r0, [r4, #16]
 8007974:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007978:	f104 0314 	add.w	r3, r4, #20
 800797c:	f019 091f 	ands.w	r9, r9, #31
 8007980:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007984:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007988:	d02b      	beq.n	80079e2 <__lshift+0xbe>
 800798a:	f1c9 0e20 	rsb	lr, r9, #32
 800798e:	468a      	mov	sl, r1
 8007990:	2200      	movs	r2, #0
 8007992:	6818      	ldr	r0, [r3, #0]
 8007994:	fa00 f009 	lsl.w	r0, r0, r9
 8007998:	4302      	orrs	r2, r0
 800799a:	f84a 2b04 	str.w	r2, [sl], #4
 800799e:	f853 2b04 	ldr.w	r2, [r3], #4
 80079a2:	459c      	cmp	ip, r3
 80079a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80079a8:	d8f3      	bhi.n	8007992 <__lshift+0x6e>
 80079aa:	ebac 0304 	sub.w	r3, ip, r4
 80079ae:	3b15      	subs	r3, #21
 80079b0:	f023 0303 	bic.w	r3, r3, #3
 80079b4:	3304      	adds	r3, #4
 80079b6:	f104 0015 	add.w	r0, r4, #21
 80079ba:	4584      	cmp	ip, r0
 80079bc:	bf38      	it	cc
 80079be:	2304      	movcc	r3, #4
 80079c0:	50ca      	str	r2, [r1, r3]
 80079c2:	b10a      	cbz	r2, 80079c8 <__lshift+0xa4>
 80079c4:	f108 0602 	add.w	r6, r8, #2
 80079c8:	3e01      	subs	r6, #1
 80079ca:	4638      	mov	r0, r7
 80079cc:	612e      	str	r6, [r5, #16]
 80079ce:	4621      	mov	r1, r4
 80079d0:	f7ff fdd6 	bl	8007580 <_Bfree>
 80079d4:	4628      	mov	r0, r5
 80079d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079da:	f842 0f04 	str.w	r0, [r2, #4]!
 80079de:	3301      	adds	r3, #1
 80079e0:	e7c5      	b.n	800796e <__lshift+0x4a>
 80079e2:	3904      	subs	r1, #4
 80079e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80079e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80079ec:	459c      	cmp	ip, r3
 80079ee:	d8f9      	bhi.n	80079e4 <__lshift+0xc0>
 80079f0:	e7ea      	b.n	80079c8 <__lshift+0xa4>
 80079f2:	bf00      	nop
 80079f4:	08008d67 	.word	0x08008d67
 80079f8:	08008d78 	.word	0x08008d78

080079fc <__mcmp>:
 80079fc:	b530      	push	{r4, r5, lr}
 80079fe:	6902      	ldr	r2, [r0, #16]
 8007a00:	690c      	ldr	r4, [r1, #16]
 8007a02:	1b12      	subs	r2, r2, r4
 8007a04:	d10e      	bne.n	8007a24 <__mcmp+0x28>
 8007a06:	f100 0314 	add.w	r3, r0, #20
 8007a0a:	3114      	adds	r1, #20
 8007a0c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007a10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007a14:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007a18:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007a1c:	42a5      	cmp	r5, r4
 8007a1e:	d003      	beq.n	8007a28 <__mcmp+0x2c>
 8007a20:	d305      	bcc.n	8007a2e <__mcmp+0x32>
 8007a22:	2201      	movs	r2, #1
 8007a24:	4610      	mov	r0, r2
 8007a26:	bd30      	pop	{r4, r5, pc}
 8007a28:	4283      	cmp	r3, r0
 8007a2a:	d3f3      	bcc.n	8007a14 <__mcmp+0x18>
 8007a2c:	e7fa      	b.n	8007a24 <__mcmp+0x28>
 8007a2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a32:	e7f7      	b.n	8007a24 <__mcmp+0x28>

08007a34 <__mdiff>:
 8007a34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a38:	460c      	mov	r4, r1
 8007a3a:	4606      	mov	r6, r0
 8007a3c:	4611      	mov	r1, r2
 8007a3e:	4620      	mov	r0, r4
 8007a40:	4617      	mov	r7, r2
 8007a42:	f7ff ffdb 	bl	80079fc <__mcmp>
 8007a46:	1e05      	subs	r5, r0, #0
 8007a48:	d110      	bne.n	8007a6c <__mdiff+0x38>
 8007a4a:	4629      	mov	r1, r5
 8007a4c:	4630      	mov	r0, r6
 8007a4e:	f7ff fd57 	bl	8007500 <_Balloc>
 8007a52:	b930      	cbnz	r0, 8007a62 <__mdiff+0x2e>
 8007a54:	4b39      	ldr	r3, [pc, #228]	; (8007b3c <__mdiff+0x108>)
 8007a56:	4602      	mov	r2, r0
 8007a58:	f240 2132 	movw	r1, #562	; 0x232
 8007a5c:	4838      	ldr	r0, [pc, #224]	; (8007b40 <__mdiff+0x10c>)
 8007a5e:	f000 faf3 	bl	8008048 <__assert_func>
 8007a62:	2301      	movs	r3, #1
 8007a64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007a68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a6c:	bfa4      	itt	ge
 8007a6e:	463b      	movge	r3, r7
 8007a70:	4627      	movge	r7, r4
 8007a72:	4630      	mov	r0, r6
 8007a74:	6879      	ldr	r1, [r7, #4]
 8007a76:	bfa6      	itte	ge
 8007a78:	461c      	movge	r4, r3
 8007a7a:	2500      	movge	r5, #0
 8007a7c:	2501      	movlt	r5, #1
 8007a7e:	f7ff fd3f 	bl	8007500 <_Balloc>
 8007a82:	b920      	cbnz	r0, 8007a8e <__mdiff+0x5a>
 8007a84:	4b2d      	ldr	r3, [pc, #180]	; (8007b3c <__mdiff+0x108>)
 8007a86:	4602      	mov	r2, r0
 8007a88:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007a8c:	e7e6      	b.n	8007a5c <__mdiff+0x28>
 8007a8e:	693e      	ldr	r6, [r7, #16]
 8007a90:	60c5      	str	r5, [r0, #12]
 8007a92:	6925      	ldr	r5, [r4, #16]
 8007a94:	f107 0114 	add.w	r1, r7, #20
 8007a98:	f104 0914 	add.w	r9, r4, #20
 8007a9c:	f100 0e14 	add.w	lr, r0, #20
 8007aa0:	f107 0210 	add.w	r2, r7, #16
 8007aa4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007aa8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007aac:	46f2      	mov	sl, lr
 8007aae:	2700      	movs	r7, #0
 8007ab0:	f859 3b04 	ldr.w	r3, [r9], #4
 8007ab4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007ab8:	fa1f f883 	uxth.w	r8, r3
 8007abc:	fa17 f78b 	uxtah	r7, r7, fp
 8007ac0:	0c1b      	lsrs	r3, r3, #16
 8007ac2:	eba7 0808 	sub.w	r8, r7, r8
 8007ac6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007aca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007ace:	fa1f f888 	uxth.w	r8, r8
 8007ad2:	141f      	asrs	r7, r3, #16
 8007ad4:	454d      	cmp	r5, r9
 8007ad6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007ada:	f84a 3b04 	str.w	r3, [sl], #4
 8007ade:	d8e7      	bhi.n	8007ab0 <__mdiff+0x7c>
 8007ae0:	1b2b      	subs	r3, r5, r4
 8007ae2:	3b15      	subs	r3, #21
 8007ae4:	f023 0303 	bic.w	r3, r3, #3
 8007ae8:	3304      	adds	r3, #4
 8007aea:	3415      	adds	r4, #21
 8007aec:	42a5      	cmp	r5, r4
 8007aee:	bf38      	it	cc
 8007af0:	2304      	movcc	r3, #4
 8007af2:	4419      	add	r1, r3
 8007af4:	4473      	add	r3, lr
 8007af6:	469e      	mov	lr, r3
 8007af8:	460d      	mov	r5, r1
 8007afa:	4565      	cmp	r5, ip
 8007afc:	d30e      	bcc.n	8007b1c <__mdiff+0xe8>
 8007afe:	f10c 0203 	add.w	r2, ip, #3
 8007b02:	1a52      	subs	r2, r2, r1
 8007b04:	f022 0203 	bic.w	r2, r2, #3
 8007b08:	3903      	subs	r1, #3
 8007b0a:	458c      	cmp	ip, r1
 8007b0c:	bf38      	it	cc
 8007b0e:	2200      	movcc	r2, #0
 8007b10:	441a      	add	r2, r3
 8007b12:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007b16:	b17b      	cbz	r3, 8007b38 <__mdiff+0x104>
 8007b18:	6106      	str	r6, [r0, #16]
 8007b1a:	e7a5      	b.n	8007a68 <__mdiff+0x34>
 8007b1c:	f855 8b04 	ldr.w	r8, [r5], #4
 8007b20:	fa17 f488 	uxtah	r4, r7, r8
 8007b24:	1422      	asrs	r2, r4, #16
 8007b26:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007b2a:	b2a4      	uxth	r4, r4
 8007b2c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007b30:	f84e 4b04 	str.w	r4, [lr], #4
 8007b34:	1417      	asrs	r7, r2, #16
 8007b36:	e7e0      	b.n	8007afa <__mdiff+0xc6>
 8007b38:	3e01      	subs	r6, #1
 8007b3a:	e7ea      	b.n	8007b12 <__mdiff+0xde>
 8007b3c:	08008d67 	.word	0x08008d67
 8007b40:	08008d78 	.word	0x08008d78

08007b44 <__d2b>:
 8007b44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b48:	4689      	mov	r9, r1
 8007b4a:	2101      	movs	r1, #1
 8007b4c:	ec57 6b10 	vmov	r6, r7, d0
 8007b50:	4690      	mov	r8, r2
 8007b52:	f7ff fcd5 	bl	8007500 <_Balloc>
 8007b56:	4604      	mov	r4, r0
 8007b58:	b930      	cbnz	r0, 8007b68 <__d2b+0x24>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	4b25      	ldr	r3, [pc, #148]	; (8007bf4 <__d2b+0xb0>)
 8007b5e:	4826      	ldr	r0, [pc, #152]	; (8007bf8 <__d2b+0xb4>)
 8007b60:	f240 310a 	movw	r1, #778	; 0x30a
 8007b64:	f000 fa70 	bl	8008048 <__assert_func>
 8007b68:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007b6c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b70:	bb35      	cbnz	r5, 8007bc0 <__d2b+0x7c>
 8007b72:	2e00      	cmp	r6, #0
 8007b74:	9301      	str	r3, [sp, #4]
 8007b76:	d028      	beq.n	8007bca <__d2b+0x86>
 8007b78:	4668      	mov	r0, sp
 8007b7a:	9600      	str	r6, [sp, #0]
 8007b7c:	f7ff fd8c 	bl	8007698 <__lo0bits>
 8007b80:	9900      	ldr	r1, [sp, #0]
 8007b82:	b300      	cbz	r0, 8007bc6 <__d2b+0x82>
 8007b84:	9a01      	ldr	r2, [sp, #4]
 8007b86:	f1c0 0320 	rsb	r3, r0, #32
 8007b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b8e:	430b      	orrs	r3, r1
 8007b90:	40c2      	lsrs	r2, r0
 8007b92:	6163      	str	r3, [r4, #20]
 8007b94:	9201      	str	r2, [sp, #4]
 8007b96:	9b01      	ldr	r3, [sp, #4]
 8007b98:	61a3      	str	r3, [r4, #24]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	bf14      	ite	ne
 8007b9e:	2202      	movne	r2, #2
 8007ba0:	2201      	moveq	r2, #1
 8007ba2:	6122      	str	r2, [r4, #16]
 8007ba4:	b1d5      	cbz	r5, 8007bdc <__d2b+0x98>
 8007ba6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007baa:	4405      	add	r5, r0
 8007bac:	f8c9 5000 	str.w	r5, [r9]
 8007bb0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007bb4:	f8c8 0000 	str.w	r0, [r8]
 8007bb8:	4620      	mov	r0, r4
 8007bba:	b003      	add	sp, #12
 8007bbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007bc4:	e7d5      	b.n	8007b72 <__d2b+0x2e>
 8007bc6:	6161      	str	r1, [r4, #20]
 8007bc8:	e7e5      	b.n	8007b96 <__d2b+0x52>
 8007bca:	a801      	add	r0, sp, #4
 8007bcc:	f7ff fd64 	bl	8007698 <__lo0bits>
 8007bd0:	9b01      	ldr	r3, [sp, #4]
 8007bd2:	6163      	str	r3, [r4, #20]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	6122      	str	r2, [r4, #16]
 8007bd8:	3020      	adds	r0, #32
 8007bda:	e7e3      	b.n	8007ba4 <__d2b+0x60>
 8007bdc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007be0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007be4:	f8c9 0000 	str.w	r0, [r9]
 8007be8:	6918      	ldr	r0, [r3, #16]
 8007bea:	f7ff fd35 	bl	8007658 <__hi0bits>
 8007bee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007bf2:	e7df      	b.n	8007bb4 <__d2b+0x70>
 8007bf4:	08008d67 	.word	0x08008d67
 8007bf8:	08008d78 	.word	0x08008d78

08007bfc <_calloc_r>:
 8007bfc:	b513      	push	{r0, r1, r4, lr}
 8007bfe:	434a      	muls	r2, r1
 8007c00:	4611      	mov	r1, r2
 8007c02:	9201      	str	r2, [sp, #4]
 8007c04:	f000 f85a 	bl	8007cbc <_malloc_r>
 8007c08:	4604      	mov	r4, r0
 8007c0a:	b118      	cbz	r0, 8007c14 <_calloc_r+0x18>
 8007c0c:	9a01      	ldr	r2, [sp, #4]
 8007c0e:	2100      	movs	r1, #0
 8007c10:	f7fe f95e 	bl	8005ed0 <memset>
 8007c14:	4620      	mov	r0, r4
 8007c16:	b002      	add	sp, #8
 8007c18:	bd10      	pop	{r4, pc}
	...

08007c1c <_free_r>:
 8007c1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c1e:	2900      	cmp	r1, #0
 8007c20:	d048      	beq.n	8007cb4 <_free_r+0x98>
 8007c22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c26:	9001      	str	r0, [sp, #4]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f1a1 0404 	sub.w	r4, r1, #4
 8007c2e:	bfb8      	it	lt
 8007c30:	18e4      	addlt	r4, r4, r3
 8007c32:	f000 fa65 	bl	8008100 <__malloc_lock>
 8007c36:	4a20      	ldr	r2, [pc, #128]	; (8007cb8 <_free_r+0x9c>)
 8007c38:	9801      	ldr	r0, [sp, #4]
 8007c3a:	6813      	ldr	r3, [r2, #0]
 8007c3c:	4615      	mov	r5, r2
 8007c3e:	b933      	cbnz	r3, 8007c4e <_free_r+0x32>
 8007c40:	6063      	str	r3, [r4, #4]
 8007c42:	6014      	str	r4, [r2, #0]
 8007c44:	b003      	add	sp, #12
 8007c46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c4a:	f000 ba5f 	b.w	800810c <__malloc_unlock>
 8007c4e:	42a3      	cmp	r3, r4
 8007c50:	d90b      	bls.n	8007c6a <_free_r+0x4e>
 8007c52:	6821      	ldr	r1, [r4, #0]
 8007c54:	1862      	adds	r2, r4, r1
 8007c56:	4293      	cmp	r3, r2
 8007c58:	bf04      	itt	eq
 8007c5a:	681a      	ldreq	r2, [r3, #0]
 8007c5c:	685b      	ldreq	r3, [r3, #4]
 8007c5e:	6063      	str	r3, [r4, #4]
 8007c60:	bf04      	itt	eq
 8007c62:	1852      	addeq	r2, r2, r1
 8007c64:	6022      	streq	r2, [r4, #0]
 8007c66:	602c      	str	r4, [r5, #0]
 8007c68:	e7ec      	b.n	8007c44 <_free_r+0x28>
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	b10b      	cbz	r3, 8007c74 <_free_r+0x58>
 8007c70:	42a3      	cmp	r3, r4
 8007c72:	d9fa      	bls.n	8007c6a <_free_r+0x4e>
 8007c74:	6811      	ldr	r1, [r2, #0]
 8007c76:	1855      	adds	r5, r2, r1
 8007c78:	42a5      	cmp	r5, r4
 8007c7a:	d10b      	bne.n	8007c94 <_free_r+0x78>
 8007c7c:	6824      	ldr	r4, [r4, #0]
 8007c7e:	4421      	add	r1, r4
 8007c80:	1854      	adds	r4, r2, r1
 8007c82:	42a3      	cmp	r3, r4
 8007c84:	6011      	str	r1, [r2, #0]
 8007c86:	d1dd      	bne.n	8007c44 <_free_r+0x28>
 8007c88:	681c      	ldr	r4, [r3, #0]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	6053      	str	r3, [r2, #4]
 8007c8e:	4421      	add	r1, r4
 8007c90:	6011      	str	r1, [r2, #0]
 8007c92:	e7d7      	b.n	8007c44 <_free_r+0x28>
 8007c94:	d902      	bls.n	8007c9c <_free_r+0x80>
 8007c96:	230c      	movs	r3, #12
 8007c98:	6003      	str	r3, [r0, #0]
 8007c9a:	e7d3      	b.n	8007c44 <_free_r+0x28>
 8007c9c:	6825      	ldr	r5, [r4, #0]
 8007c9e:	1961      	adds	r1, r4, r5
 8007ca0:	428b      	cmp	r3, r1
 8007ca2:	bf04      	itt	eq
 8007ca4:	6819      	ldreq	r1, [r3, #0]
 8007ca6:	685b      	ldreq	r3, [r3, #4]
 8007ca8:	6063      	str	r3, [r4, #4]
 8007caa:	bf04      	itt	eq
 8007cac:	1949      	addeq	r1, r1, r5
 8007cae:	6021      	streq	r1, [r4, #0]
 8007cb0:	6054      	str	r4, [r2, #4]
 8007cb2:	e7c7      	b.n	8007c44 <_free_r+0x28>
 8007cb4:	b003      	add	sp, #12
 8007cb6:	bd30      	pop	{r4, r5, pc}
 8007cb8:	20000238 	.word	0x20000238

08007cbc <_malloc_r>:
 8007cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cbe:	1ccd      	adds	r5, r1, #3
 8007cc0:	f025 0503 	bic.w	r5, r5, #3
 8007cc4:	3508      	adds	r5, #8
 8007cc6:	2d0c      	cmp	r5, #12
 8007cc8:	bf38      	it	cc
 8007cca:	250c      	movcc	r5, #12
 8007ccc:	2d00      	cmp	r5, #0
 8007cce:	4606      	mov	r6, r0
 8007cd0:	db01      	blt.n	8007cd6 <_malloc_r+0x1a>
 8007cd2:	42a9      	cmp	r1, r5
 8007cd4:	d903      	bls.n	8007cde <_malloc_r+0x22>
 8007cd6:	230c      	movs	r3, #12
 8007cd8:	6033      	str	r3, [r6, #0]
 8007cda:	2000      	movs	r0, #0
 8007cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cde:	f000 fa0f 	bl	8008100 <__malloc_lock>
 8007ce2:	4921      	ldr	r1, [pc, #132]	; (8007d68 <_malloc_r+0xac>)
 8007ce4:	680a      	ldr	r2, [r1, #0]
 8007ce6:	4614      	mov	r4, r2
 8007ce8:	b99c      	cbnz	r4, 8007d12 <_malloc_r+0x56>
 8007cea:	4f20      	ldr	r7, [pc, #128]	; (8007d6c <_malloc_r+0xb0>)
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	b923      	cbnz	r3, 8007cfa <_malloc_r+0x3e>
 8007cf0:	4621      	mov	r1, r4
 8007cf2:	4630      	mov	r0, r6
 8007cf4:	f000 f998 	bl	8008028 <_sbrk_r>
 8007cf8:	6038      	str	r0, [r7, #0]
 8007cfa:	4629      	mov	r1, r5
 8007cfc:	4630      	mov	r0, r6
 8007cfe:	f000 f993 	bl	8008028 <_sbrk_r>
 8007d02:	1c43      	adds	r3, r0, #1
 8007d04:	d123      	bne.n	8007d4e <_malloc_r+0x92>
 8007d06:	230c      	movs	r3, #12
 8007d08:	6033      	str	r3, [r6, #0]
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	f000 f9fe 	bl	800810c <__malloc_unlock>
 8007d10:	e7e3      	b.n	8007cda <_malloc_r+0x1e>
 8007d12:	6823      	ldr	r3, [r4, #0]
 8007d14:	1b5b      	subs	r3, r3, r5
 8007d16:	d417      	bmi.n	8007d48 <_malloc_r+0x8c>
 8007d18:	2b0b      	cmp	r3, #11
 8007d1a:	d903      	bls.n	8007d24 <_malloc_r+0x68>
 8007d1c:	6023      	str	r3, [r4, #0]
 8007d1e:	441c      	add	r4, r3
 8007d20:	6025      	str	r5, [r4, #0]
 8007d22:	e004      	b.n	8007d2e <_malloc_r+0x72>
 8007d24:	6863      	ldr	r3, [r4, #4]
 8007d26:	42a2      	cmp	r2, r4
 8007d28:	bf0c      	ite	eq
 8007d2a:	600b      	streq	r3, [r1, #0]
 8007d2c:	6053      	strne	r3, [r2, #4]
 8007d2e:	4630      	mov	r0, r6
 8007d30:	f000 f9ec 	bl	800810c <__malloc_unlock>
 8007d34:	f104 000b 	add.w	r0, r4, #11
 8007d38:	1d23      	adds	r3, r4, #4
 8007d3a:	f020 0007 	bic.w	r0, r0, #7
 8007d3e:	1ac2      	subs	r2, r0, r3
 8007d40:	d0cc      	beq.n	8007cdc <_malloc_r+0x20>
 8007d42:	1a1b      	subs	r3, r3, r0
 8007d44:	50a3      	str	r3, [r4, r2]
 8007d46:	e7c9      	b.n	8007cdc <_malloc_r+0x20>
 8007d48:	4622      	mov	r2, r4
 8007d4a:	6864      	ldr	r4, [r4, #4]
 8007d4c:	e7cc      	b.n	8007ce8 <_malloc_r+0x2c>
 8007d4e:	1cc4      	adds	r4, r0, #3
 8007d50:	f024 0403 	bic.w	r4, r4, #3
 8007d54:	42a0      	cmp	r0, r4
 8007d56:	d0e3      	beq.n	8007d20 <_malloc_r+0x64>
 8007d58:	1a21      	subs	r1, r4, r0
 8007d5a:	4630      	mov	r0, r6
 8007d5c:	f000 f964 	bl	8008028 <_sbrk_r>
 8007d60:	3001      	adds	r0, #1
 8007d62:	d1dd      	bne.n	8007d20 <_malloc_r+0x64>
 8007d64:	e7cf      	b.n	8007d06 <_malloc_r+0x4a>
 8007d66:	bf00      	nop
 8007d68:	20000238 	.word	0x20000238
 8007d6c:	2000023c 	.word	0x2000023c

08007d70 <__ssputs_r>:
 8007d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d74:	688e      	ldr	r6, [r1, #8]
 8007d76:	429e      	cmp	r6, r3
 8007d78:	4682      	mov	sl, r0
 8007d7a:	460c      	mov	r4, r1
 8007d7c:	4690      	mov	r8, r2
 8007d7e:	461f      	mov	r7, r3
 8007d80:	d838      	bhi.n	8007df4 <__ssputs_r+0x84>
 8007d82:	898a      	ldrh	r2, [r1, #12]
 8007d84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d88:	d032      	beq.n	8007df0 <__ssputs_r+0x80>
 8007d8a:	6825      	ldr	r5, [r4, #0]
 8007d8c:	6909      	ldr	r1, [r1, #16]
 8007d8e:	eba5 0901 	sub.w	r9, r5, r1
 8007d92:	6965      	ldr	r5, [r4, #20]
 8007d94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	444b      	add	r3, r9
 8007da0:	106d      	asrs	r5, r5, #1
 8007da2:	429d      	cmp	r5, r3
 8007da4:	bf38      	it	cc
 8007da6:	461d      	movcc	r5, r3
 8007da8:	0553      	lsls	r3, r2, #21
 8007daa:	d531      	bpl.n	8007e10 <__ssputs_r+0xa0>
 8007dac:	4629      	mov	r1, r5
 8007dae:	f7ff ff85 	bl	8007cbc <_malloc_r>
 8007db2:	4606      	mov	r6, r0
 8007db4:	b950      	cbnz	r0, 8007dcc <__ssputs_r+0x5c>
 8007db6:	230c      	movs	r3, #12
 8007db8:	f8ca 3000 	str.w	r3, [sl]
 8007dbc:	89a3      	ldrh	r3, [r4, #12]
 8007dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dc2:	81a3      	strh	r3, [r4, #12]
 8007dc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dcc:	6921      	ldr	r1, [r4, #16]
 8007dce:	464a      	mov	r2, r9
 8007dd0:	f7fe f870 	bl	8005eb4 <memcpy>
 8007dd4:	89a3      	ldrh	r3, [r4, #12]
 8007dd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dde:	81a3      	strh	r3, [r4, #12]
 8007de0:	6126      	str	r6, [r4, #16]
 8007de2:	6165      	str	r5, [r4, #20]
 8007de4:	444e      	add	r6, r9
 8007de6:	eba5 0509 	sub.w	r5, r5, r9
 8007dea:	6026      	str	r6, [r4, #0]
 8007dec:	60a5      	str	r5, [r4, #8]
 8007dee:	463e      	mov	r6, r7
 8007df0:	42be      	cmp	r6, r7
 8007df2:	d900      	bls.n	8007df6 <__ssputs_r+0x86>
 8007df4:	463e      	mov	r6, r7
 8007df6:	4632      	mov	r2, r6
 8007df8:	6820      	ldr	r0, [r4, #0]
 8007dfa:	4641      	mov	r1, r8
 8007dfc:	f000 f966 	bl	80080cc <memmove>
 8007e00:	68a3      	ldr	r3, [r4, #8]
 8007e02:	6822      	ldr	r2, [r4, #0]
 8007e04:	1b9b      	subs	r3, r3, r6
 8007e06:	4432      	add	r2, r6
 8007e08:	60a3      	str	r3, [r4, #8]
 8007e0a:	6022      	str	r2, [r4, #0]
 8007e0c:	2000      	movs	r0, #0
 8007e0e:	e7db      	b.n	8007dc8 <__ssputs_r+0x58>
 8007e10:	462a      	mov	r2, r5
 8007e12:	f000 f981 	bl	8008118 <_realloc_r>
 8007e16:	4606      	mov	r6, r0
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	d1e1      	bne.n	8007de0 <__ssputs_r+0x70>
 8007e1c:	6921      	ldr	r1, [r4, #16]
 8007e1e:	4650      	mov	r0, sl
 8007e20:	f7ff fefc 	bl	8007c1c <_free_r>
 8007e24:	e7c7      	b.n	8007db6 <__ssputs_r+0x46>
	...

08007e28 <_svfiprintf_r>:
 8007e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e2c:	4698      	mov	r8, r3
 8007e2e:	898b      	ldrh	r3, [r1, #12]
 8007e30:	061b      	lsls	r3, r3, #24
 8007e32:	b09d      	sub	sp, #116	; 0x74
 8007e34:	4607      	mov	r7, r0
 8007e36:	460d      	mov	r5, r1
 8007e38:	4614      	mov	r4, r2
 8007e3a:	d50e      	bpl.n	8007e5a <_svfiprintf_r+0x32>
 8007e3c:	690b      	ldr	r3, [r1, #16]
 8007e3e:	b963      	cbnz	r3, 8007e5a <_svfiprintf_r+0x32>
 8007e40:	2140      	movs	r1, #64	; 0x40
 8007e42:	f7ff ff3b 	bl	8007cbc <_malloc_r>
 8007e46:	6028      	str	r0, [r5, #0]
 8007e48:	6128      	str	r0, [r5, #16]
 8007e4a:	b920      	cbnz	r0, 8007e56 <_svfiprintf_r+0x2e>
 8007e4c:	230c      	movs	r3, #12
 8007e4e:	603b      	str	r3, [r7, #0]
 8007e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e54:	e0d1      	b.n	8007ffa <_svfiprintf_r+0x1d2>
 8007e56:	2340      	movs	r3, #64	; 0x40
 8007e58:	616b      	str	r3, [r5, #20]
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	9309      	str	r3, [sp, #36]	; 0x24
 8007e5e:	2320      	movs	r3, #32
 8007e60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e64:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e68:	2330      	movs	r3, #48	; 0x30
 8007e6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008014 <_svfiprintf_r+0x1ec>
 8007e6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e72:	f04f 0901 	mov.w	r9, #1
 8007e76:	4623      	mov	r3, r4
 8007e78:	469a      	mov	sl, r3
 8007e7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e7e:	b10a      	cbz	r2, 8007e84 <_svfiprintf_r+0x5c>
 8007e80:	2a25      	cmp	r2, #37	; 0x25
 8007e82:	d1f9      	bne.n	8007e78 <_svfiprintf_r+0x50>
 8007e84:	ebba 0b04 	subs.w	fp, sl, r4
 8007e88:	d00b      	beq.n	8007ea2 <_svfiprintf_r+0x7a>
 8007e8a:	465b      	mov	r3, fp
 8007e8c:	4622      	mov	r2, r4
 8007e8e:	4629      	mov	r1, r5
 8007e90:	4638      	mov	r0, r7
 8007e92:	f7ff ff6d 	bl	8007d70 <__ssputs_r>
 8007e96:	3001      	adds	r0, #1
 8007e98:	f000 80aa 	beq.w	8007ff0 <_svfiprintf_r+0x1c8>
 8007e9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e9e:	445a      	add	r2, fp
 8007ea0:	9209      	str	r2, [sp, #36]	; 0x24
 8007ea2:	f89a 3000 	ldrb.w	r3, [sl]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f000 80a2 	beq.w	8007ff0 <_svfiprintf_r+0x1c8>
 8007eac:	2300      	movs	r3, #0
 8007eae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007eb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007eb6:	f10a 0a01 	add.w	sl, sl, #1
 8007eba:	9304      	str	r3, [sp, #16]
 8007ebc:	9307      	str	r3, [sp, #28]
 8007ebe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ec2:	931a      	str	r3, [sp, #104]	; 0x68
 8007ec4:	4654      	mov	r4, sl
 8007ec6:	2205      	movs	r2, #5
 8007ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ecc:	4851      	ldr	r0, [pc, #324]	; (8008014 <_svfiprintf_r+0x1ec>)
 8007ece:	f7f8 f99f 	bl	8000210 <memchr>
 8007ed2:	9a04      	ldr	r2, [sp, #16]
 8007ed4:	b9d8      	cbnz	r0, 8007f0e <_svfiprintf_r+0xe6>
 8007ed6:	06d0      	lsls	r0, r2, #27
 8007ed8:	bf44      	itt	mi
 8007eda:	2320      	movmi	r3, #32
 8007edc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ee0:	0711      	lsls	r1, r2, #28
 8007ee2:	bf44      	itt	mi
 8007ee4:	232b      	movmi	r3, #43	; 0x2b
 8007ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007eea:	f89a 3000 	ldrb.w	r3, [sl]
 8007eee:	2b2a      	cmp	r3, #42	; 0x2a
 8007ef0:	d015      	beq.n	8007f1e <_svfiprintf_r+0xf6>
 8007ef2:	9a07      	ldr	r2, [sp, #28]
 8007ef4:	4654      	mov	r4, sl
 8007ef6:	2000      	movs	r0, #0
 8007ef8:	f04f 0c0a 	mov.w	ip, #10
 8007efc:	4621      	mov	r1, r4
 8007efe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f02:	3b30      	subs	r3, #48	; 0x30
 8007f04:	2b09      	cmp	r3, #9
 8007f06:	d94e      	bls.n	8007fa6 <_svfiprintf_r+0x17e>
 8007f08:	b1b0      	cbz	r0, 8007f38 <_svfiprintf_r+0x110>
 8007f0a:	9207      	str	r2, [sp, #28]
 8007f0c:	e014      	b.n	8007f38 <_svfiprintf_r+0x110>
 8007f0e:	eba0 0308 	sub.w	r3, r0, r8
 8007f12:	fa09 f303 	lsl.w	r3, r9, r3
 8007f16:	4313      	orrs	r3, r2
 8007f18:	9304      	str	r3, [sp, #16]
 8007f1a:	46a2      	mov	sl, r4
 8007f1c:	e7d2      	b.n	8007ec4 <_svfiprintf_r+0x9c>
 8007f1e:	9b03      	ldr	r3, [sp, #12]
 8007f20:	1d19      	adds	r1, r3, #4
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	9103      	str	r1, [sp, #12]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	bfbb      	ittet	lt
 8007f2a:	425b      	neglt	r3, r3
 8007f2c:	f042 0202 	orrlt.w	r2, r2, #2
 8007f30:	9307      	strge	r3, [sp, #28]
 8007f32:	9307      	strlt	r3, [sp, #28]
 8007f34:	bfb8      	it	lt
 8007f36:	9204      	strlt	r2, [sp, #16]
 8007f38:	7823      	ldrb	r3, [r4, #0]
 8007f3a:	2b2e      	cmp	r3, #46	; 0x2e
 8007f3c:	d10c      	bne.n	8007f58 <_svfiprintf_r+0x130>
 8007f3e:	7863      	ldrb	r3, [r4, #1]
 8007f40:	2b2a      	cmp	r3, #42	; 0x2a
 8007f42:	d135      	bne.n	8007fb0 <_svfiprintf_r+0x188>
 8007f44:	9b03      	ldr	r3, [sp, #12]
 8007f46:	1d1a      	adds	r2, r3, #4
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	9203      	str	r2, [sp, #12]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	bfb8      	it	lt
 8007f50:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007f54:	3402      	adds	r4, #2
 8007f56:	9305      	str	r3, [sp, #20]
 8007f58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008024 <_svfiprintf_r+0x1fc>
 8007f5c:	7821      	ldrb	r1, [r4, #0]
 8007f5e:	2203      	movs	r2, #3
 8007f60:	4650      	mov	r0, sl
 8007f62:	f7f8 f955 	bl	8000210 <memchr>
 8007f66:	b140      	cbz	r0, 8007f7a <_svfiprintf_r+0x152>
 8007f68:	2340      	movs	r3, #64	; 0x40
 8007f6a:	eba0 000a 	sub.w	r0, r0, sl
 8007f6e:	fa03 f000 	lsl.w	r0, r3, r0
 8007f72:	9b04      	ldr	r3, [sp, #16]
 8007f74:	4303      	orrs	r3, r0
 8007f76:	3401      	adds	r4, #1
 8007f78:	9304      	str	r3, [sp, #16]
 8007f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f7e:	4826      	ldr	r0, [pc, #152]	; (8008018 <_svfiprintf_r+0x1f0>)
 8007f80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f84:	2206      	movs	r2, #6
 8007f86:	f7f8 f943 	bl	8000210 <memchr>
 8007f8a:	2800      	cmp	r0, #0
 8007f8c:	d038      	beq.n	8008000 <_svfiprintf_r+0x1d8>
 8007f8e:	4b23      	ldr	r3, [pc, #140]	; (800801c <_svfiprintf_r+0x1f4>)
 8007f90:	bb1b      	cbnz	r3, 8007fda <_svfiprintf_r+0x1b2>
 8007f92:	9b03      	ldr	r3, [sp, #12]
 8007f94:	3307      	adds	r3, #7
 8007f96:	f023 0307 	bic.w	r3, r3, #7
 8007f9a:	3308      	adds	r3, #8
 8007f9c:	9303      	str	r3, [sp, #12]
 8007f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fa0:	4433      	add	r3, r6
 8007fa2:	9309      	str	r3, [sp, #36]	; 0x24
 8007fa4:	e767      	b.n	8007e76 <_svfiprintf_r+0x4e>
 8007fa6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007faa:	460c      	mov	r4, r1
 8007fac:	2001      	movs	r0, #1
 8007fae:	e7a5      	b.n	8007efc <_svfiprintf_r+0xd4>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	3401      	adds	r4, #1
 8007fb4:	9305      	str	r3, [sp, #20]
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	f04f 0c0a 	mov.w	ip, #10
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fc2:	3a30      	subs	r2, #48	; 0x30
 8007fc4:	2a09      	cmp	r2, #9
 8007fc6:	d903      	bls.n	8007fd0 <_svfiprintf_r+0x1a8>
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d0c5      	beq.n	8007f58 <_svfiprintf_r+0x130>
 8007fcc:	9105      	str	r1, [sp, #20]
 8007fce:	e7c3      	b.n	8007f58 <_svfiprintf_r+0x130>
 8007fd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fd4:	4604      	mov	r4, r0
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e7f0      	b.n	8007fbc <_svfiprintf_r+0x194>
 8007fda:	ab03      	add	r3, sp, #12
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	462a      	mov	r2, r5
 8007fe0:	4b0f      	ldr	r3, [pc, #60]	; (8008020 <_svfiprintf_r+0x1f8>)
 8007fe2:	a904      	add	r1, sp, #16
 8007fe4:	4638      	mov	r0, r7
 8007fe6:	f7fe f81b 	bl	8006020 <_printf_float>
 8007fea:	1c42      	adds	r2, r0, #1
 8007fec:	4606      	mov	r6, r0
 8007fee:	d1d6      	bne.n	8007f9e <_svfiprintf_r+0x176>
 8007ff0:	89ab      	ldrh	r3, [r5, #12]
 8007ff2:	065b      	lsls	r3, r3, #25
 8007ff4:	f53f af2c 	bmi.w	8007e50 <_svfiprintf_r+0x28>
 8007ff8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ffa:	b01d      	add	sp, #116	; 0x74
 8007ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008000:	ab03      	add	r3, sp, #12
 8008002:	9300      	str	r3, [sp, #0]
 8008004:	462a      	mov	r2, r5
 8008006:	4b06      	ldr	r3, [pc, #24]	; (8008020 <_svfiprintf_r+0x1f8>)
 8008008:	a904      	add	r1, sp, #16
 800800a:	4638      	mov	r0, r7
 800800c:	f7fe faac 	bl	8006568 <_printf_i>
 8008010:	e7eb      	b.n	8007fea <_svfiprintf_r+0x1c2>
 8008012:	bf00      	nop
 8008014:	08008ed4 	.word	0x08008ed4
 8008018:	08008ede 	.word	0x08008ede
 800801c:	08006021 	.word	0x08006021
 8008020:	08007d71 	.word	0x08007d71
 8008024:	08008eda 	.word	0x08008eda

08008028 <_sbrk_r>:
 8008028:	b538      	push	{r3, r4, r5, lr}
 800802a:	4d06      	ldr	r5, [pc, #24]	; (8008044 <_sbrk_r+0x1c>)
 800802c:	2300      	movs	r3, #0
 800802e:	4604      	mov	r4, r0
 8008030:	4608      	mov	r0, r1
 8008032:	602b      	str	r3, [r5, #0]
 8008034:	f7f9 ff52 	bl	8001edc <_sbrk>
 8008038:	1c43      	adds	r3, r0, #1
 800803a:	d102      	bne.n	8008042 <_sbrk_r+0x1a>
 800803c:	682b      	ldr	r3, [r5, #0]
 800803e:	b103      	cbz	r3, 8008042 <_sbrk_r+0x1a>
 8008040:	6023      	str	r3, [r4, #0]
 8008042:	bd38      	pop	{r3, r4, r5, pc}
 8008044:	2000047c 	.word	0x2000047c

08008048 <__assert_func>:
 8008048:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800804a:	4614      	mov	r4, r2
 800804c:	461a      	mov	r2, r3
 800804e:	4b09      	ldr	r3, [pc, #36]	; (8008074 <__assert_func+0x2c>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4605      	mov	r5, r0
 8008054:	68d8      	ldr	r0, [r3, #12]
 8008056:	b14c      	cbz	r4, 800806c <__assert_func+0x24>
 8008058:	4b07      	ldr	r3, [pc, #28]	; (8008078 <__assert_func+0x30>)
 800805a:	9100      	str	r1, [sp, #0]
 800805c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008060:	4906      	ldr	r1, [pc, #24]	; (800807c <__assert_func+0x34>)
 8008062:	462b      	mov	r3, r5
 8008064:	f000 f80e 	bl	8008084 <fiprintf>
 8008068:	f000 faa4 	bl	80085b4 <abort>
 800806c:	4b04      	ldr	r3, [pc, #16]	; (8008080 <__assert_func+0x38>)
 800806e:	461c      	mov	r4, r3
 8008070:	e7f3      	b.n	800805a <__assert_func+0x12>
 8008072:	bf00      	nop
 8008074:	20000034 	.word	0x20000034
 8008078:	08008ee5 	.word	0x08008ee5
 800807c:	08008ef2 	.word	0x08008ef2
 8008080:	08008f20 	.word	0x08008f20

08008084 <fiprintf>:
 8008084:	b40e      	push	{r1, r2, r3}
 8008086:	b503      	push	{r0, r1, lr}
 8008088:	4601      	mov	r1, r0
 800808a:	ab03      	add	r3, sp, #12
 800808c:	4805      	ldr	r0, [pc, #20]	; (80080a4 <fiprintf+0x20>)
 800808e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008092:	6800      	ldr	r0, [r0, #0]
 8008094:	9301      	str	r3, [sp, #4]
 8008096:	f000 f88f 	bl	80081b8 <_vfiprintf_r>
 800809a:	b002      	add	sp, #8
 800809c:	f85d eb04 	ldr.w	lr, [sp], #4
 80080a0:	b003      	add	sp, #12
 80080a2:	4770      	bx	lr
 80080a4:	20000034 	.word	0x20000034

080080a8 <__ascii_mbtowc>:
 80080a8:	b082      	sub	sp, #8
 80080aa:	b901      	cbnz	r1, 80080ae <__ascii_mbtowc+0x6>
 80080ac:	a901      	add	r1, sp, #4
 80080ae:	b142      	cbz	r2, 80080c2 <__ascii_mbtowc+0x1a>
 80080b0:	b14b      	cbz	r3, 80080c6 <__ascii_mbtowc+0x1e>
 80080b2:	7813      	ldrb	r3, [r2, #0]
 80080b4:	600b      	str	r3, [r1, #0]
 80080b6:	7812      	ldrb	r2, [r2, #0]
 80080b8:	1e10      	subs	r0, r2, #0
 80080ba:	bf18      	it	ne
 80080bc:	2001      	movne	r0, #1
 80080be:	b002      	add	sp, #8
 80080c0:	4770      	bx	lr
 80080c2:	4610      	mov	r0, r2
 80080c4:	e7fb      	b.n	80080be <__ascii_mbtowc+0x16>
 80080c6:	f06f 0001 	mvn.w	r0, #1
 80080ca:	e7f8      	b.n	80080be <__ascii_mbtowc+0x16>

080080cc <memmove>:
 80080cc:	4288      	cmp	r0, r1
 80080ce:	b510      	push	{r4, lr}
 80080d0:	eb01 0402 	add.w	r4, r1, r2
 80080d4:	d902      	bls.n	80080dc <memmove+0x10>
 80080d6:	4284      	cmp	r4, r0
 80080d8:	4623      	mov	r3, r4
 80080da:	d807      	bhi.n	80080ec <memmove+0x20>
 80080dc:	1e43      	subs	r3, r0, #1
 80080de:	42a1      	cmp	r1, r4
 80080e0:	d008      	beq.n	80080f4 <memmove+0x28>
 80080e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80080ea:	e7f8      	b.n	80080de <memmove+0x12>
 80080ec:	4402      	add	r2, r0
 80080ee:	4601      	mov	r1, r0
 80080f0:	428a      	cmp	r2, r1
 80080f2:	d100      	bne.n	80080f6 <memmove+0x2a>
 80080f4:	bd10      	pop	{r4, pc}
 80080f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80080fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80080fe:	e7f7      	b.n	80080f0 <memmove+0x24>

08008100 <__malloc_lock>:
 8008100:	4801      	ldr	r0, [pc, #4]	; (8008108 <__malloc_lock+0x8>)
 8008102:	f000 bc17 	b.w	8008934 <__retarget_lock_acquire_recursive>
 8008106:	bf00      	nop
 8008108:	20000484 	.word	0x20000484

0800810c <__malloc_unlock>:
 800810c:	4801      	ldr	r0, [pc, #4]	; (8008114 <__malloc_unlock+0x8>)
 800810e:	f000 bc12 	b.w	8008936 <__retarget_lock_release_recursive>
 8008112:	bf00      	nop
 8008114:	20000484 	.word	0x20000484

08008118 <_realloc_r>:
 8008118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800811a:	4607      	mov	r7, r0
 800811c:	4614      	mov	r4, r2
 800811e:	460e      	mov	r6, r1
 8008120:	b921      	cbnz	r1, 800812c <_realloc_r+0x14>
 8008122:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008126:	4611      	mov	r1, r2
 8008128:	f7ff bdc8 	b.w	8007cbc <_malloc_r>
 800812c:	b922      	cbnz	r2, 8008138 <_realloc_r+0x20>
 800812e:	f7ff fd75 	bl	8007c1c <_free_r>
 8008132:	4625      	mov	r5, r4
 8008134:	4628      	mov	r0, r5
 8008136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008138:	f000 fc62 	bl	8008a00 <_malloc_usable_size_r>
 800813c:	42a0      	cmp	r0, r4
 800813e:	d20f      	bcs.n	8008160 <_realloc_r+0x48>
 8008140:	4621      	mov	r1, r4
 8008142:	4638      	mov	r0, r7
 8008144:	f7ff fdba 	bl	8007cbc <_malloc_r>
 8008148:	4605      	mov	r5, r0
 800814a:	2800      	cmp	r0, #0
 800814c:	d0f2      	beq.n	8008134 <_realloc_r+0x1c>
 800814e:	4631      	mov	r1, r6
 8008150:	4622      	mov	r2, r4
 8008152:	f7fd feaf 	bl	8005eb4 <memcpy>
 8008156:	4631      	mov	r1, r6
 8008158:	4638      	mov	r0, r7
 800815a:	f7ff fd5f 	bl	8007c1c <_free_r>
 800815e:	e7e9      	b.n	8008134 <_realloc_r+0x1c>
 8008160:	4635      	mov	r5, r6
 8008162:	e7e7      	b.n	8008134 <_realloc_r+0x1c>

08008164 <__sfputc_r>:
 8008164:	6893      	ldr	r3, [r2, #8]
 8008166:	3b01      	subs	r3, #1
 8008168:	2b00      	cmp	r3, #0
 800816a:	b410      	push	{r4}
 800816c:	6093      	str	r3, [r2, #8]
 800816e:	da08      	bge.n	8008182 <__sfputc_r+0x1e>
 8008170:	6994      	ldr	r4, [r2, #24]
 8008172:	42a3      	cmp	r3, r4
 8008174:	db01      	blt.n	800817a <__sfputc_r+0x16>
 8008176:	290a      	cmp	r1, #10
 8008178:	d103      	bne.n	8008182 <__sfputc_r+0x1e>
 800817a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800817e:	f000 b94b 	b.w	8008418 <__swbuf_r>
 8008182:	6813      	ldr	r3, [r2, #0]
 8008184:	1c58      	adds	r0, r3, #1
 8008186:	6010      	str	r0, [r2, #0]
 8008188:	7019      	strb	r1, [r3, #0]
 800818a:	4608      	mov	r0, r1
 800818c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008190:	4770      	bx	lr

08008192 <__sfputs_r>:
 8008192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008194:	4606      	mov	r6, r0
 8008196:	460f      	mov	r7, r1
 8008198:	4614      	mov	r4, r2
 800819a:	18d5      	adds	r5, r2, r3
 800819c:	42ac      	cmp	r4, r5
 800819e:	d101      	bne.n	80081a4 <__sfputs_r+0x12>
 80081a0:	2000      	movs	r0, #0
 80081a2:	e007      	b.n	80081b4 <__sfputs_r+0x22>
 80081a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081a8:	463a      	mov	r2, r7
 80081aa:	4630      	mov	r0, r6
 80081ac:	f7ff ffda 	bl	8008164 <__sfputc_r>
 80081b0:	1c43      	adds	r3, r0, #1
 80081b2:	d1f3      	bne.n	800819c <__sfputs_r+0xa>
 80081b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080081b8 <_vfiprintf_r>:
 80081b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081bc:	460d      	mov	r5, r1
 80081be:	b09d      	sub	sp, #116	; 0x74
 80081c0:	4614      	mov	r4, r2
 80081c2:	4698      	mov	r8, r3
 80081c4:	4606      	mov	r6, r0
 80081c6:	b118      	cbz	r0, 80081d0 <_vfiprintf_r+0x18>
 80081c8:	6983      	ldr	r3, [r0, #24]
 80081ca:	b90b      	cbnz	r3, 80081d0 <_vfiprintf_r+0x18>
 80081cc:	f000 fb14 	bl	80087f8 <__sinit>
 80081d0:	4b89      	ldr	r3, [pc, #548]	; (80083f8 <_vfiprintf_r+0x240>)
 80081d2:	429d      	cmp	r5, r3
 80081d4:	d11b      	bne.n	800820e <_vfiprintf_r+0x56>
 80081d6:	6875      	ldr	r5, [r6, #4]
 80081d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081da:	07d9      	lsls	r1, r3, #31
 80081dc:	d405      	bmi.n	80081ea <_vfiprintf_r+0x32>
 80081de:	89ab      	ldrh	r3, [r5, #12]
 80081e0:	059a      	lsls	r2, r3, #22
 80081e2:	d402      	bmi.n	80081ea <_vfiprintf_r+0x32>
 80081e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081e6:	f000 fba5 	bl	8008934 <__retarget_lock_acquire_recursive>
 80081ea:	89ab      	ldrh	r3, [r5, #12]
 80081ec:	071b      	lsls	r3, r3, #28
 80081ee:	d501      	bpl.n	80081f4 <_vfiprintf_r+0x3c>
 80081f0:	692b      	ldr	r3, [r5, #16]
 80081f2:	b9eb      	cbnz	r3, 8008230 <_vfiprintf_r+0x78>
 80081f4:	4629      	mov	r1, r5
 80081f6:	4630      	mov	r0, r6
 80081f8:	f000 f96e 	bl	80084d8 <__swsetup_r>
 80081fc:	b1c0      	cbz	r0, 8008230 <_vfiprintf_r+0x78>
 80081fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008200:	07dc      	lsls	r4, r3, #31
 8008202:	d50e      	bpl.n	8008222 <_vfiprintf_r+0x6a>
 8008204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008208:	b01d      	add	sp, #116	; 0x74
 800820a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800820e:	4b7b      	ldr	r3, [pc, #492]	; (80083fc <_vfiprintf_r+0x244>)
 8008210:	429d      	cmp	r5, r3
 8008212:	d101      	bne.n	8008218 <_vfiprintf_r+0x60>
 8008214:	68b5      	ldr	r5, [r6, #8]
 8008216:	e7df      	b.n	80081d8 <_vfiprintf_r+0x20>
 8008218:	4b79      	ldr	r3, [pc, #484]	; (8008400 <_vfiprintf_r+0x248>)
 800821a:	429d      	cmp	r5, r3
 800821c:	bf08      	it	eq
 800821e:	68f5      	ldreq	r5, [r6, #12]
 8008220:	e7da      	b.n	80081d8 <_vfiprintf_r+0x20>
 8008222:	89ab      	ldrh	r3, [r5, #12]
 8008224:	0598      	lsls	r0, r3, #22
 8008226:	d4ed      	bmi.n	8008204 <_vfiprintf_r+0x4c>
 8008228:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800822a:	f000 fb84 	bl	8008936 <__retarget_lock_release_recursive>
 800822e:	e7e9      	b.n	8008204 <_vfiprintf_r+0x4c>
 8008230:	2300      	movs	r3, #0
 8008232:	9309      	str	r3, [sp, #36]	; 0x24
 8008234:	2320      	movs	r3, #32
 8008236:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800823a:	f8cd 800c 	str.w	r8, [sp, #12]
 800823e:	2330      	movs	r3, #48	; 0x30
 8008240:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008404 <_vfiprintf_r+0x24c>
 8008244:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008248:	f04f 0901 	mov.w	r9, #1
 800824c:	4623      	mov	r3, r4
 800824e:	469a      	mov	sl, r3
 8008250:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008254:	b10a      	cbz	r2, 800825a <_vfiprintf_r+0xa2>
 8008256:	2a25      	cmp	r2, #37	; 0x25
 8008258:	d1f9      	bne.n	800824e <_vfiprintf_r+0x96>
 800825a:	ebba 0b04 	subs.w	fp, sl, r4
 800825e:	d00b      	beq.n	8008278 <_vfiprintf_r+0xc0>
 8008260:	465b      	mov	r3, fp
 8008262:	4622      	mov	r2, r4
 8008264:	4629      	mov	r1, r5
 8008266:	4630      	mov	r0, r6
 8008268:	f7ff ff93 	bl	8008192 <__sfputs_r>
 800826c:	3001      	adds	r0, #1
 800826e:	f000 80aa 	beq.w	80083c6 <_vfiprintf_r+0x20e>
 8008272:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008274:	445a      	add	r2, fp
 8008276:	9209      	str	r2, [sp, #36]	; 0x24
 8008278:	f89a 3000 	ldrb.w	r3, [sl]
 800827c:	2b00      	cmp	r3, #0
 800827e:	f000 80a2 	beq.w	80083c6 <_vfiprintf_r+0x20e>
 8008282:	2300      	movs	r3, #0
 8008284:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008288:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800828c:	f10a 0a01 	add.w	sl, sl, #1
 8008290:	9304      	str	r3, [sp, #16]
 8008292:	9307      	str	r3, [sp, #28]
 8008294:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008298:	931a      	str	r3, [sp, #104]	; 0x68
 800829a:	4654      	mov	r4, sl
 800829c:	2205      	movs	r2, #5
 800829e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082a2:	4858      	ldr	r0, [pc, #352]	; (8008404 <_vfiprintf_r+0x24c>)
 80082a4:	f7f7 ffb4 	bl	8000210 <memchr>
 80082a8:	9a04      	ldr	r2, [sp, #16]
 80082aa:	b9d8      	cbnz	r0, 80082e4 <_vfiprintf_r+0x12c>
 80082ac:	06d1      	lsls	r1, r2, #27
 80082ae:	bf44      	itt	mi
 80082b0:	2320      	movmi	r3, #32
 80082b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082b6:	0713      	lsls	r3, r2, #28
 80082b8:	bf44      	itt	mi
 80082ba:	232b      	movmi	r3, #43	; 0x2b
 80082bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082c0:	f89a 3000 	ldrb.w	r3, [sl]
 80082c4:	2b2a      	cmp	r3, #42	; 0x2a
 80082c6:	d015      	beq.n	80082f4 <_vfiprintf_r+0x13c>
 80082c8:	9a07      	ldr	r2, [sp, #28]
 80082ca:	4654      	mov	r4, sl
 80082cc:	2000      	movs	r0, #0
 80082ce:	f04f 0c0a 	mov.w	ip, #10
 80082d2:	4621      	mov	r1, r4
 80082d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082d8:	3b30      	subs	r3, #48	; 0x30
 80082da:	2b09      	cmp	r3, #9
 80082dc:	d94e      	bls.n	800837c <_vfiprintf_r+0x1c4>
 80082de:	b1b0      	cbz	r0, 800830e <_vfiprintf_r+0x156>
 80082e0:	9207      	str	r2, [sp, #28]
 80082e2:	e014      	b.n	800830e <_vfiprintf_r+0x156>
 80082e4:	eba0 0308 	sub.w	r3, r0, r8
 80082e8:	fa09 f303 	lsl.w	r3, r9, r3
 80082ec:	4313      	orrs	r3, r2
 80082ee:	9304      	str	r3, [sp, #16]
 80082f0:	46a2      	mov	sl, r4
 80082f2:	e7d2      	b.n	800829a <_vfiprintf_r+0xe2>
 80082f4:	9b03      	ldr	r3, [sp, #12]
 80082f6:	1d19      	adds	r1, r3, #4
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	9103      	str	r1, [sp, #12]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	bfbb      	ittet	lt
 8008300:	425b      	neglt	r3, r3
 8008302:	f042 0202 	orrlt.w	r2, r2, #2
 8008306:	9307      	strge	r3, [sp, #28]
 8008308:	9307      	strlt	r3, [sp, #28]
 800830a:	bfb8      	it	lt
 800830c:	9204      	strlt	r2, [sp, #16]
 800830e:	7823      	ldrb	r3, [r4, #0]
 8008310:	2b2e      	cmp	r3, #46	; 0x2e
 8008312:	d10c      	bne.n	800832e <_vfiprintf_r+0x176>
 8008314:	7863      	ldrb	r3, [r4, #1]
 8008316:	2b2a      	cmp	r3, #42	; 0x2a
 8008318:	d135      	bne.n	8008386 <_vfiprintf_r+0x1ce>
 800831a:	9b03      	ldr	r3, [sp, #12]
 800831c:	1d1a      	adds	r2, r3, #4
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	9203      	str	r2, [sp, #12]
 8008322:	2b00      	cmp	r3, #0
 8008324:	bfb8      	it	lt
 8008326:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800832a:	3402      	adds	r4, #2
 800832c:	9305      	str	r3, [sp, #20]
 800832e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008414 <_vfiprintf_r+0x25c>
 8008332:	7821      	ldrb	r1, [r4, #0]
 8008334:	2203      	movs	r2, #3
 8008336:	4650      	mov	r0, sl
 8008338:	f7f7 ff6a 	bl	8000210 <memchr>
 800833c:	b140      	cbz	r0, 8008350 <_vfiprintf_r+0x198>
 800833e:	2340      	movs	r3, #64	; 0x40
 8008340:	eba0 000a 	sub.w	r0, r0, sl
 8008344:	fa03 f000 	lsl.w	r0, r3, r0
 8008348:	9b04      	ldr	r3, [sp, #16]
 800834a:	4303      	orrs	r3, r0
 800834c:	3401      	adds	r4, #1
 800834e:	9304      	str	r3, [sp, #16]
 8008350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008354:	482c      	ldr	r0, [pc, #176]	; (8008408 <_vfiprintf_r+0x250>)
 8008356:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800835a:	2206      	movs	r2, #6
 800835c:	f7f7 ff58 	bl	8000210 <memchr>
 8008360:	2800      	cmp	r0, #0
 8008362:	d03f      	beq.n	80083e4 <_vfiprintf_r+0x22c>
 8008364:	4b29      	ldr	r3, [pc, #164]	; (800840c <_vfiprintf_r+0x254>)
 8008366:	bb1b      	cbnz	r3, 80083b0 <_vfiprintf_r+0x1f8>
 8008368:	9b03      	ldr	r3, [sp, #12]
 800836a:	3307      	adds	r3, #7
 800836c:	f023 0307 	bic.w	r3, r3, #7
 8008370:	3308      	adds	r3, #8
 8008372:	9303      	str	r3, [sp, #12]
 8008374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008376:	443b      	add	r3, r7
 8008378:	9309      	str	r3, [sp, #36]	; 0x24
 800837a:	e767      	b.n	800824c <_vfiprintf_r+0x94>
 800837c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008380:	460c      	mov	r4, r1
 8008382:	2001      	movs	r0, #1
 8008384:	e7a5      	b.n	80082d2 <_vfiprintf_r+0x11a>
 8008386:	2300      	movs	r3, #0
 8008388:	3401      	adds	r4, #1
 800838a:	9305      	str	r3, [sp, #20]
 800838c:	4619      	mov	r1, r3
 800838e:	f04f 0c0a 	mov.w	ip, #10
 8008392:	4620      	mov	r0, r4
 8008394:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008398:	3a30      	subs	r2, #48	; 0x30
 800839a:	2a09      	cmp	r2, #9
 800839c:	d903      	bls.n	80083a6 <_vfiprintf_r+0x1ee>
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d0c5      	beq.n	800832e <_vfiprintf_r+0x176>
 80083a2:	9105      	str	r1, [sp, #20]
 80083a4:	e7c3      	b.n	800832e <_vfiprintf_r+0x176>
 80083a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80083aa:	4604      	mov	r4, r0
 80083ac:	2301      	movs	r3, #1
 80083ae:	e7f0      	b.n	8008392 <_vfiprintf_r+0x1da>
 80083b0:	ab03      	add	r3, sp, #12
 80083b2:	9300      	str	r3, [sp, #0]
 80083b4:	462a      	mov	r2, r5
 80083b6:	4b16      	ldr	r3, [pc, #88]	; (8008410 <_vfiprintf_r+0x258>)
 80083b8:	a904      	add	r1, sp, #16
 80083ba:	4630      	mov	r0, r6
 80083bc:	f7fd fe30 	bl	8006020 <_printf_float>
 80083c0:	4607      	mov	r7, r0
 80083c2:	1c78      	adds	r0, r7, #1
 80083c4:	d1d6      	bne.n	8008374 <_vfiprintf_r+0x1bc>
 80083c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083c8:	07d9      	lsls	r1, r3, #31
 80083ca:	d405      	bmi.n	80083d8 <_vfiprintf_r+0x220>
 80083cc:	89ab      	ldrh	r3, [r5, #12]
 80083ce:	059a      	lsls	r2, r3, #22
 80083d0:	d402      	bmi.n	80083d8 <_vfiprintf_r+0x220>
 80083d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083d4:	f000 faaf 	bl	8008936 <__retarget_lock_release_recursive>
 80083d8:	89ab      	ldrh	r3, [r5, #12]
 80083da:	065b      	lsls	r3, r3, #25
 80083dc:	f53f af12 	bmi.w	8008204 <_vfiprintf_r+0x4c>
 80083e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083e2:	e711      	b.n	8008208 <_vfiprintf_r+0x50>
 80083e4:	ab03      	add	r3, sp, #12
 80083e6:	9300      	str	r3, [sp, #0]
 80083e8:	462a      	mov	r2, r5
 80083ea:	4b09      	ldr	r3, [pc, #36]	; (8008410 <_vfiprintf_r+0x258>)
 80083ec:	a904      	add	r1, sp, #16
 80083ee:	4630      	mov	r0, r6
 80083f0:	f7fe f8ba 	bl	8006568 <_printf_i>
 80083f4:	e7e4      	b.n	80083c0 <_vfiprintf_r+0x208>
 80083f6:	bf00      	nop
 80083f8:	0800904c 	.word	0x0800904c
 80083fc:	0800906c 	.word	0x0800906c
 8008400:	0800902c 	.word	0x0800902c
 8008404:	08008ed4 	.word	0x08008ed4
 8008408:	08008ede 	.word	0x08008ede
 800840c:	08006021 	.word	0x08006021
 8008410:	08008193 	.word	0x08008193
 8008414:	08008eda 	.word	0x08008eda

08008418 <__swbuf_r>:
 8008418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800841a:	460e      	mov	r6, r1
 800841c:	4614      	mov	r4, r2
 800841e:	4605      	mov	r5, r0
 8008420:	b118      	cbz	r0, 800842a <__swbuf_r+0x12>
 8008422:	6983      	ldr	r3, [r0, #24]
 8008424:	b90b      	cbnz	r3, 800842a <__swbuf_r+0x12>
 8008426:	f000 f9e7 	bl	80087f8 <__sinit>
 800842a:	4b21      	ldr	r3, [pc, #132]	; (80084b0 <__swbuf_r+0x98>)
 800842c:	429c      	cmp	r4, r3
 800842e:	d12b      	bne.n	8008488 <__swbuf_r+0x70>
 8008430:	686c      	ldr	r4, [r5, #4]
 8008432:	69a3      	ldr	r3, [r4, #24]
 8008434:	60a3      	str	r3, [r4, #8]
 8008436:	89a3      	ldrh	r3, [r4, #12]
 8008438:	071a      	lsls	r2, r3, #28
 800843a:	d52f      	bpl.n	800849c <__swbuf_r+0x84>
 800843c:	6923      	ldr	r3, [r4, #16]
 800843e:	b36b      	cbz	r3, 800849c <__swbuf_r+0x84>
 8008440:	6923      	ldr	r3, [r4, #16]
 8008442:	6820      	ldr	r0, [r4, #0]
 8008444:	1ac0      	subs	r0, r0, r3
 8008446:	6963      	ldr	r3, [r4, #20]
 8008448:	b2f6      	uxtb	r6, r6
 800844a:	4283      	cmp	r3, r0
 800844c:	4637      	mov	r7, r6
 800844e:	dc04      	bgt.n	800845a <__swbuf_r+0x42>
 8008450:	4621      	mov	r1, r4
 8008452:	4628      	mov	r0, r5
 8008454:	f000 f93c 	bl	80086d0 <_fflush_r>
 8008458:	bb30      	cbnz	r0, 80084a8 <__swbuf_r+0x90>
 800845a:	68a3      	ldr	r3, [r4, #8]
 800845c:	3b01      	subs	r3, #1
 800845e:	60a3      	str	r3, [r4, #8]
 8008460:	6823      	ldr	r3, [r4, #0]
 8008462:	1c5a      	adds	r2, r3, #1
 8008464:	6022      	str	r2, [r4, #0]
 8008466:	701e      	strb	r6, [r3, #0]
 8008468:	6963      	ldr	r3, [r4, #20]
 800846a:	3001      	adds	r0, #1
 800846c:	4283      	cmp	r3, r0
 800846e:	d004      	beq.n	800847a <__swbuf_r+0x62>
 8008470:	89a3      	ldrh	r3, [r4, #12]
 8008472:	07db      	lsls	r3, r3, #31
 8008474:	d506      	bpl.n	8008484 <__swbuf_r+0x6c>
 8008476:	2e0a      	cmp	r6, #10
 8008478:	d104      	bne.n	8008484 <__swbuf_r+0x6c>
 800847a:	4621      	mov	r1, r4
 800847c:	4628      	mov	r0, r5
 800847e:	f000 f927 	bl	80086d0 <_fflush_r>
 8008482:	b988      	cbnz	r0, 80084a8 <__swbuf_r+0x90>
 8008484:	4638      	mov	r0, r7
 8008486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008488:	4b0a      	ldr	r3, [pc, #40]	; (80084b4 <__swbuf_r+0x9c>)
 800848a:	429c      	cmp	r4, r3
 800848c:	d101      	bne.n	8008492 <__swbuf_r+0x7a>
 800848e:	68ac      	ldr	r4, [r5, #8]
 8008490:	e7cf      	b.n	8008432 <__swbuf_r+0x1a>
 8008492:	4b09      	ldr	r3, [pc, #36]	; (80084b8 <__swbuf_r+0xa0>)
 8008494:	429c      	cmp	r4, r3
 8008496:	bf08      	it	eq
 8008498:	68ec      	ldreq	r4, [r5, #12]
 800849a:	e7ca      	b.n	8008432 <__swbuf_r+0x1a>
 800849c:	4621      	mov	r1, r4
 800849e:	4628      	mov	r0, r5
 80084a0:	f000 f81a 	bl	80084d8 <__swsetup_r>
 80084a4:	2800      	cmp	r0, #0
 80084a6:	d0cb      	beq.n	8008440 <__swbuf_r+0x28>
 80084a8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80084ac:	e7ea      	b.n	8008484 <__swbuf_r+0x6c>
 80084ae:	bf00      	nop
 80084b0:	0800904c 	.word	0x0800904c
 80084b4:	0800906c 	.word	0x0800906c
 80084b8:	0800902c 	.word	0x0800902c

080084bc <__ascii_wctomb>:
 80084bc:	b149      	cbz	r1, 80084d2 <__ascii_wctomb+0x16>
 80084be:	2aff      	cmp	r2, #255	; 0xff
 80084c0:	bf85      	ittet	hi
 80084c2:	238a      	movhi	r3, #138	; 0x8a
 80084c4:	6003      	strhi	r3, [r0, #0]
 80084c6:	700a      	strbls	r2, [r1, #0]
 80084c8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80084cc:	bf98      	it	ls
 80084ce:	2001      	movls	r0, #1
 80084d0:	4770      	bx	lr
 80084d2:	4608      	mov	r0, r1
 80084d4:	4770      	bx	lr
	...

080084d8 <__swsetup_r>:
 80084d8:	4b32      	ldr	r3, [pc, #200]	; (80085a4 <__swsetup_r+0xcc>)
 80084da:	b570      	push	{r4, r5, r6, lr}
 80084dc:	681d      	ldr	r5, [r3, #0]
 80084de:	4606      	mov	r6, r0
 80084e0:	460c      	mov	r4, r1
 80084e2:	b125      	cbz	r5, 80084ee <__swsetup_r+0x16>
 80084e4:	69ab      	ldr	r3, [r5, #24]
 80084e6:	b913      	cbnz	r3, 80084ee <__swsetup_r+0x16>
 80084e8:	4628      	mov	r0, r5
 80084ea:	f000 f985 	bl	80087f8 <__sinit>
 80084ee:	4b2e      	ldr	r3, [pc, #184]	; (80085a8 <__swsetup_r+0xd0>)
 80084f0:	429c      	cmp	r4, r3
 80084f2:	d10f      	bne.n	8008514 <__swsetup_r+0x3c>
 80084f4:	686c      	ldr	r4, [r5, #4]
 80084f6:	89a3      	ldrh	r3, [r4, #12]
 80084f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084fc:	0719      	lsls	r1, r3, #28
 80084fe:	d42c      	bmi.n	800855a <__swsetup_r+0x82>
 8008500:	06dd      	lsls	r5, r3, #27
 8008502:	d411      	bmi.n	8008528 <__swsetup_r+0x50>
 8008504:	2309      	movs	r3, #9
 8008506:	6033      	str	r3, [r6, #0]
 8008508:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800850c:	81a3      	strh	r3, [r4, #12]
 800850e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008512:	e03e      	b.n	8008592 <__swsetup_r+0xba>
 8008514:	4b25      	ldr	r3, [pc, #148]	; (80085ac <__swsetup_r+0xd4>)
 8008516:	429c      	cmp	r4, r3
 8008518:	d101      	bne.n	800851e <__swsetup_r+0x46>
 800851a:	68ac      	ldr	r4, [r5, #8]
 800851c:	e7eb      	b.n	80084f6 <__swsetup_r+0x1e>
 800851e:	4b24      	ldr	r3, [pc, #144]	; (80085b0 <__swsetup_r+0xd8>)
 8008520:	429c      	cmp	r4, r3
 8008522:	bf08      	it	eq
 8008524:	68ec      	ldreq	r4, [r5, #12]
 8008526:	e7e6      	b.n	80084f6 <__swsetup_r+0x1e>
 8008528:	0758      	lsls	r0, r3, #29
 800852a:	d512      	bpl.n	8008552 <__swsetup_r+0x7a>
 800852c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800852e:	b141      	cbz	r1, 8008542 <__swsetup_r+0x6a>
 8008530:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008534:	4299      	cmp	r1, r3
 8008536:	d002      	beq.n	800853e <__swsetup_r+0x66>
 8008538:	4630      	mov	r0, r6
 800853a:	f7ff fb6f 	bl	8007c1c <_free_r>
 800853e:	2300      	movs	r3, #0
 8008540:	6363      	str	r3, [r4, #52]	; 0x34
 8008542:	89a3      	ldrh	r3, [r4, #12]
 8008544:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008548:	81a3      	strh	r3, [r4, #12]
 800854a:	2300      	movs	r3, #0
 800854c:	6063      	str	r3, [r4, #4]
 800854e:	6923      	ldr	r3, [r4, #16]
 8008550:	6023      	str	r3, [r4, #0]
 8008552:	89a3      	ldrh	r3, [r4, #12]
 8008554:	f043 0308 	orr.w	r3, r3, #8
 8008558:	81a3      	strh	r3, [r4, #12]
 800855a:	6923      	ldr	r3, [r4, #16]
 800855c:	b94b      	cbnz	r3, 8008572 <__swsetup_r+0x9a>
 800855e:	89a3      	ldrh	r3, [r4, #12]
 8008560:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008568:	d003      	beq.n	8008572 <__swsetup_r+0x9a>
 800856a:	4621      	mov	r1, r4
 800856c:	4630      	mov	r0, r6
 800856e:	f000 fa07 	bl	8008980 <__smakebuf_r>
 8008572:	89a0      	ldrh	r0, [r4, #12]
 8008574:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008578:	f010 0301 	ands.w	r3, r0, #1
 800857c:	d00a      	beq.n	8008594 <__swsetup_r+0xbc>
 800857e:	2300      	movs	r3, #0
 8008580:	60a3      	str	r3, [r4, #8]
 8008582:	6963      	ldr	r3, [r4, #20]
 8008584:	425b      	negs	r3, r3
 8008586:	61a3      	str	r3, [r4, #24]
 8008588:	6923      	ldr	r3, [r4, #16]
 800858a:	b943      	cbnz	r3, 800859e <__swsetup_r+0xc6>
 800858c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008590:	d1ba      	bne.n	8008508 <__swsetup_r+0x30>
 8008592:	bd70      	pop	{r4, r5, r6, pc}
 8008594:	0781      	lsls	r1, r0, #30
 8008596:	bf58      	it	pl
 8008598:	6963      	ldrpl	r3, [r4, #20]
 800859a:	60a3      	str	r3, [r4, #8]
 800859c:	e7f4      	b.n	8008588 <__swsetup_r+0xb0>
 800859e:	2000      	movs	r0, #0
 80085a0:	e7f7      	b.n	8008592 <__swsetup_r+0xba>
 80085a2:	bf00      	nop
 80085a4:	20000034 	.word	0x20000034
 80085a8:	0800904c 	.word	0x0800904c
 80085ac:	0800906c 	.word	0x0800906c
 80085b0:	0800902c 	.word	0x0800902c

080085b4 <abort>:
 80085b4:	b508      	push	{r3, lr}
 80085b6:	2006      	movs	r0, #6
 80085b8:	f000 fa52 	bl	8008a60 <raise>
 80085bc:	2001      	movs	r0, #1
 80085be:	f7f9 fc15 	bl	8001dec <_exit>
	...

080085c4 <__sflush_r>:
 80085c4:	898a      	ldrh	r2, [r1, #12]
 80085c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085ca:	4605      	mov	r5, r0
 80085cc:	0710      	lsls	r0, r2, #28
 80085ce:	460c      	mov	r4, r1
 80085d0:	d458      	bmi.n	8008684 <__sflush_r+0xc0>
 80085d2:	684b      	ldr	r3, [r1, #4]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	dc05      	bgt.n	80085e4 <__sflush_r+0x20>
 80085d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80085da:	2b00      	cmp	r3, #0
 80085dc:	dc02      	bgt.n	80085e4 <__sflush_r+0x20>
 80085de:	2000      	movs	r0, #0
 80085e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085e6:	2e00      	cmp	r6, #0
 80085e8:	d0f9      	beq.n	80085de <__sflush_r+0x1a>
 80085ea:	2300      	movs	r3, #0
 80085ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80085f0:	682f      	ldr	r7, [r5, #0]
 80085f2:	602b      	str	r3, [r5, #0]
 80085f4:	d032      	beq.n	800865c <__sflush_r+0x98>
 80085f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80085f8:	89a3      	ldrh	r3, [r4, #12]
 80085fa:	075a      	lsls	r2, r3, #29
 80085fc:	d505      	bpl.n	800860a <__sflush_r+0x46>
 80085fe:	6863      	ldr	r3, [r4, #4]
 8008600:	1ac0      	subs	r0, r0, r3
 8008602:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008604:	b10b      	cbz	r3, 800860a <__sflush_r+0x46>
 8008606:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008608:	1ac0      	subs	r0, r0, r3
 800860a:	2300      	movs	r3, #0
 800860c:	4602      	mov	r2, r0
 800860e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008610:	6a21      	ldr	r1, [r4, #32]
 8008612:	4628      	mov	r0, r5
 8008614:	47b0      	blx	r6
 8008616:	1c43      	adds	r3, r0, #1
 8008618:	89a3      	ldrh	r3, [r4, #12]
 800861a:	d106      	bne.n	800862a <__sflush_r+0x66>
 800861c:	6829      	ldr	r1, [r5, #0]
 800861e:	291d      	cmp	r1, #29
 8008620:	d82c      	bhi.n	800867c <__sflush_r+0xb8>
 8008622:	4a2a      	ldr	r2, [pc, #168]	; (80086cc <__sflush_r+0x108>)
 8008624:	40ca      	lsrs	r2, r1
 8008626:	07d6      	lsls	r6, r2, #31
 8008628:	d528      	bpl.n	800867c <__sflush_r+0xb8>
 800862a:	2200      	movs	r2, #0
 800862c:	6062      	str	r2, [r4, #4]
 800862e:	04d9      	lsls	r1, r3, #19
 8008630:	6922      	ldr	r2, [r4, #16]
 8008632:	6022      	str	r2, [r4, #0]
 8008634:	d504      	bpl.n	8008640 <__sflush_r+0x7c>
 8008636:	1c42      	adds	r2, r0, #1
 8008638:	d101      	bne.n	800863e <__sflush_r+0x7a>
 800863a:	682b      	ldr	r3, [r5, #0]
 800863c:	b903      	cbnz	r3, 8008640 <__sflush_r+0x7c>
 800863e:	6560      	str	r0, [r4, #84]	; 0x54
 8008640:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008642:	602f      	str	r7, [r5, #0]
 8008644:	2900      	cmp	r1, #0
 8008646:	d0ca      	beq.n	80085de <__sflush_r+0x1a>
 8008648:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800864c:	4299      	cmp	r1, r3
 800864e:	d002      	beq.n	8008656 <__sflush_r+0x92>
 8008650:	4628      	mov	r0, r5
 8008652:	f7ff fae3 	bl	8007c1c <_free_r>
 8008656:	2000      	movs	r0, #0
 8008658:	6360      	str	r0, [r4, #52]	; 0x34
 800865a:	e7c1      	b.n	80085e0 <__sflush_r+0x1c>
 800865c:	6a21      	ldr	r1, [r4, #32]
 800865e:	2301      	movs	r3, #1
 8008660:	4628      	mov	r0, r5
 8008662:	47b0      	blx	r6
 8008664:	1c41      	adds	r1, r0, #1
 8008666:	d1c7      	bne.n	80085f8 <__sflush_r+0x34>
 8008668:	682b      	ldr	r3, [r5, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d0c4      	beq.n	80085f8 <__sflush_r+0x34>
 800866e:	2b1d      	cmp	r3, #29
 8008670:	d001      	beq.n	8008676 <__sflush_r+0xb2>
 8008672:	2b16      	cmp	r3, #22
 8008674:	d101      	bne.n	800867a <__sflush_r+0xb6>
 8008676:	602f      	str	r7, [r5, #0]
 8008678:	e7b1      	b.n	80085de <__sflush_r+0x1a>
 800867a:	89a3      	ldrh	r3, [r4, #12]
 800867c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008680:	81a3      	strh	r3, [r4, #12]
 8008682:	e7ad      	b.n	80085e0 <__sflush_r+0x1c>
 8008684:	690f      	ldr	r7, [r1, #16]
 8008686:	2f00      	cmp	r7, #0
 8008688:	d0a9      	beq.n	80085de <__sflush_r+0x1a>
 800868a:	0793      	lsls	r3, r2, #30
 800868c:	680e      	ldr	r6, [r1, #0]
 800868e:	bf08      	it	eq
 8008690:	694b      	ldreq	r3, [r1, #20]
 8008692:	600f      	str	r7, [r1, #0]
 8008694:	bf18      	it	ne
 8008696:	2300      	movne	r3, #0
 8008698:	eba6 0807 	sub.w	r8, r6, r7
 800869c:	608b      	str	r3, [r1, #8]
 800869e:	f1b8 0f00 	cmp.w	r8, #0
 80086a2:	dd9c      	ble.n	80085de <__sflush_r+0x1a>
 80086a4:	6a21      	ldr	r1, [r4, #32]
 80086a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80086a8:	4643      	mov	r3, r8
 80086aa:	463a      	mov	r2, r7
 80086ac:	4628      	mov	r0, r5
 80086ae:	47b0      	blx	r6
 80086b0:	2800      	cmp	r0, #0
 80086b2:	dc06      	bgt.n	80086c2 <__sflush_r+0xfe>
 80086b4:	89a3      	ldrh	r3, [r4, #12]
 80086b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086ba:	81a3      	strh	r3, [r4, #12]
 80086bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086c0:	e78e      	b.n	80085e0 <__sflush_r+0x1c>
 80086c2:	4407      	add	r7, r0
 80086c4:	eba8 0800 	sub.w	r8, r8, r0
 80086c8:	e7e9      	b.n	800869e <__sflush_r+0xda>
 80086ca:	bf00      	nop
 80086cc:	20400001 	.word	0x20400001

080086d0 <_fflush_r>:
 80086d0:	b538      	push	{r3, r4, r5, lr}
 80086d2:	690b      	ldr	r3, [r1, #16]
 80086d4:	4605      	mov	r5, r0
 80086d6:	460c      	mov	r4, r1
 80086d8:	b913      	cbnz	r3, 80086e0 <_fflush_r+0x10>
 80086da:	2500      	movs	r5, #0
 80086dc:	4628      	mov	r0, r5
 80086de:	bd38      	pop	{r3, r4, r5, pc}
 80086e0:	b118      	cbz	r0, 80086ea <_fflush_r+0x1a>
 80086e2:	6983      	ldr	r3, [r0, #24]
 80086e4:	b90b      	cbnz	r3, 80086ea <_fflush_r+0x1a>
 80086e6:	f000 f887 	bl	80087f8 <__sinit>
 80086ea:	4b14      	ldr	r3, [pc, #80]	; (800873c <_fflush_r+0x6c>)
 80086ec:	429c      	cmp	r4, r3
 80086ee:	d11b      	bne.n	8008728 <_fflush_r+0x58>
 80086f0:	686c      	ldr	r4, [r5, #4]
 80086f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d0ef      	beq.n	80086da <_fflush_r+0xa>
 80086fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80086fc:	07d0      	lsls	r0, r2, #31
 80086fe:	d404      	bmi.n	800870a <_fflush_r+0x3a>
 8008700:	0599      	lsls	r1, r3, #22
 8008702:	d402      	bmi.n	800870a <_fflush_r+0x3a>
 8008704:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008706:	f000 f915 	bl	8008934 <__retarget_lock_acquire_recursive>
 800870a:	4628      	mov	r0, r5
 800870c:	4621      	mov	r1, r4
 800870e:	f7ff ff59 	bl	80085c4 <__sflush_r>
 8008712:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008714:	07da      	lsls	r2, r3, #31
 8008716:	4605      	mov	r5, r0
 8008718:	d4e0      	bmi.n	80086dc <_fflush_r+0xc>
 800871a:	89a3      	ldrh	r3, [r4, #12]
 800871c:	059b      	lsls	r3, r3, #22
 800871e:	d4dd      	bmi.n	80086dc <_fflush_r+0xc>
 8008720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008722:	f000 f908 	bl	8008936 <__retarget_lock_release_recursive>
 8008726:	e7d9      	b.n	80086dc <_fflush_r+0xc>
 8008728:	4b05      	ldr	r3, [pc, #20]	; (8008740 <_fflush_r+0x70>)
 800872a:	429c      	cmp	r4, r3
 800872c:	d101      	bne.n	8008732 <_fflush_r+0x62>
 800872e:	68ac      	ldr	r4, [r5, #8]
 8008730:	e7df      	b.n	80086f2 <_fflush_r+0x22>
 8008732:	4b04      	ldr	r3, [pc, #16]	; (8008744 <_fflush_r+0x74>)
 8008734:	429c      	cmp	r4, r3
 8008736:	bf08      	it	eq
 8008738:	68ec      	ldreq	r4, [r5, #12]
 800873a:	e7da      	b.n	80086f2 <_fflush_r+0x22>
 800873c:	0800904c 	.word	0x0800904c
 8008740:	0800906c 	.word	0x0800906c
 8008744:	0800902c 	.word	0x0800902c

08008748 <std>:
 8008748:	2300      	movs	r3, #0
 800874a:	b510      	push	{r4, lr}
 800874c:	4604      	mov	r4, r0
 800874e:	e9c0 3300 	strd	r3, r3, [r0]
 8008752:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008756:	6083      	str	r3, [r0, #8]
 8008758:	8181      	strh	r1, [r0, #12]
 800875a:	6643      	str	r3, [r0, #100]	; 0x64
 800875c:	81c2      	strh	r2, [r0, #14]
 800875e:	6183      	str	r3, [r0, #24]
 8008760:	4619      	mov	r1, r3
 8008762:	2208      	movs	r2, #8
 8008764:	305c      	adds	r0, #92	; 0x5c
 8008766:	f7fd fbb3 	bl	8005ed0 <memset>
 800876a:	4b05      	ldr	r3, [pc, #20]	; (8008780 <std+0x38>)
 800876c:	6263      	str	r3, [r4, #36]	; 0x24
 800876e:	4b05      	ldr	r3, [pc, #20]	; (8008784 <std+0x3c>)
 8008770:	62a3      	str	r3, [r4, #40]	; 0x28
 8008772:	4b05      	ldr	r3, [pc, #20]	; (8008788 <std+0x40>)
 8008774:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008776:	4b05      	ldr	r3, [pc, #20]	; (800878c <std+0x44>)
 8008778:	6224      	str	r4, [r4, #32]
 800877a:	6323      	str	r3, [r4, #48]	; 0x30
 800877c:	bd10      	pop	{r4, pc}
 800877e:	bf00      	nop
 8008780:	08008a99 	.word	0x08008a99
 8008784:	08008abb 	.word	0x08008abb
 8008788:	08008af3 	.word	0x08008af3
 800878c:	08008b17 	.word	0x08008b17

08008790 <_cleanup_r>:
 8008790:	4901      	ldr	r1, [pc, #4]	; (8008798 <_cleanup_r+0x8>)
 8008792:	f000 b8af 	b.w	80088f4 <_fwalk_reent>
 8008796:	bf00      	nop
 8008798:	080086d1 	.word	0x080086d1

0800879c <__sfmoreglue>:
 800879c:	b570      	push	{r4, r5, r6, lr}
 800879e:	1e4a      	subs	r2, r1, #1
 80087a0:	2568      	movs	r5, #104	; 0x68
 80087a2:	4355      	muls	r5, r2
 80087a4:	460e      	mov	r6, r1
 80087a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80087aa:	f7ff fa87 	bl	8007cbc <_malloc_r>
 80087ae:	4604      	mov	r4, r0
 80087b0:	b140      	cbz	r0, 80087c4 <__sfmoreglue+0x28>
 80087b2:	2100      	movs	r1, #0
 80087b4:	e9c0 1600 	strd	r1, r6, [r0]
 80087b8:	300c      	adds	r0, #12
 80087ba:	60a0      	str	r0, [r4, #8]
 80087bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80087c0:	f7fd fb86 	bl	8005ed0 <memset>
 80087c4:	4620      	mov	r0, r4
 80087c6:	bd70      	pop	{r4, r5, r6, pc}

080087c8 <__sfp_lock_acquire>:
 80087c8:	4801      	ldr	r0, [pc, #4]	; (80087d0 <__sfp_lock_acquire+0x8>)
 80087ca:	f000 b8b3 	b.w	8008934 <__retarget_lock_acquire_recursive>
 80087ce:	bf00      	nop
 80087d0:	20000488 	.word	0x20000488

080087d4 <__sfp_lock_release>:
 80087d4:	4801      	ldr	r0, [pc, #4]	; (80087dc <__sfp_lock_release+0x8>)
 80087d6:	f000 b8ae 	b.w	8008936 <__retarget_lock_release_recursive>
 80087da:	bf00      	nop
 80087dc:	20000488 	.word	0x20000488

080087e0 <__sinit_lock_acquire>:
 80087e0:	4801      	ldr	r0, [pc, #4]	; (80087e8 <__sinit_lock_acquire+0x8>)
 80087e2:	f000 b8a7 	b.w	8008934 <__retarget_lock_acquire_recursive>
 80087e6:	bf00      	nop
 80087e8:	20000483 	.word	0x20000483

080087ec <__sinit_lock_release>:
 80087ec:	4801      	ldr	r0, [pc, #4]	; (80087f4 <__sinit_lock_release+0x8>)
 80087ee:	f000 b8a2 	b.w	8008936 <__retarget_lock_release_recursive>
 80087f2:	bf00      	nop
 80087f4:	20000483 	.word	0x20000483

080087f8 <__sinit>:
 80087f8:	b510      	push	{r4, lr}
 80087fa:	4604      	mov	r4, r0
 80087fc:	f7ff fff0 	bl	80087e0 <__sinit_lock_acquire>
 8008800:	69a3      	ldr	r3, [r4, #24]
 8008802:	b11b      	cbz	r3, 800880c <__sinit+0x14>
 8008804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008808:	f7ff bff0 	b.w	80087ec <__sinit_lock_release>
 800880c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008810:	6523      	str	r3, [r4, #80]	; 0x50
 8008812:	4b13      	ldr	r3, [pc, #76]	; (8008860 <__sinit+0x68>)
 8008814:	4a13      	ldr	r2, [pc, #76]	; (8008864 <__sinit+0x6c>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	62a2      	str	r2, [r4, #40]	; 0x28
 800881a:	42a3      	cmp	r3, r4
 800881c:	bf04      	itt	eq
 800881e:	2301      	moveq	r3, #1
 8008820:	61a3      	streq	r3, [r4, #24]
 8008822:	4620      	mov	r0, r4
 8008824:	f000 f820 	bl	8008868 <__sfp>
 8008828:	6060      	str	r0, [r4, #4]
 800882a:	4620      	mov	r0, r4
 800882c:	f000 f81c 	bl	8008868 <__sfp>
 8008830:	60a0      	str	r0, [r4, #8]
 8008832:	4620      	mov	r0, r4
 8008834:	f000 f818 	bl	8008868 <__sfp>
 8008838:	2200      	movs	r2, #0
 800883a:	60e0      	str	r0, [r4, #12]
 800883c:	2104      	movs	r1, #4
 800883e:	6860      	ldr	r0, [r4, #4]
 8008840:	f7ff ff82 	bl	8008748 <std>
 8008844:	68a0      	ldr	r0, [r4, #8]
 8008846:	2201      	movs	r2, #1
 8008848:	2109      	movs	r1, #9
 800884a:	f7ff ff7d 	bl	8008748 <std>
 800884e:	68e0      	ldr	r0, [r4, #12]
 8008850:	2202      	movs	r2, #2
 8008852:	2112      	movs	r1, #18
 8008854:	f7ff ff78 	bl	8008748 <std>
 8008858:	2301      	movs	r3, #1
 800885a:	61a3      	str	r3, [r4, #24]
 800885c:	e7d2      	b.n	8008804 <__sinit+0xc>
 800885e:	bf00      	nop
 8008860:	08008cac 	.word	0x08008cac
 8008864:	08008791 	.word	0x08008791

08008868 <__sfp>:
 8008868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800886a:	4607      	mov	r7, r0
 800886c:	f7ff ffac 	bl	80087c8 <__sfp_lock_acquire>
 8008870:	4b1e      	ldr	r3, [pc, #120]	; (80088ec <__sfp+0x84>)
 8008872:	681e      	ldr	r6, [r3, #0]
 8008874:	69b3      	ldr	r3, [r6, #24]
 8008876:	b913      	cbnz	r3, 800887e <__sfp+0x16>
 8008878:	4630      	mov	r0, r6
 800887a:	f7ff ffbd 	bl	80087f8 <__sinit>
 800887e:	3648      	adds	r6, #72	; 0x48
 8008880:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008884:	3b01      	subs	r3, #1
 8008886:	d503      	bpl.n	8008890 <__sfp+0x28>
 8008888:	6833      	ldr	r3, [r6, #0]
 800888a:	b30b      	cbz	r3, 80088d0 <__sfp+0x68>
 800888c:	6836      	ldr	r6, [r6, #0]
 800888e:	e7f7      	b.n	8008880 <__sfp+0x18>
 8008890:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008894:	b9d5      	cbnz	r5, 80088cc <__sfp+0x64>
 8008896:	4b16      	ldr	r3, [pc, #88]	; (80088f0 <__sfp+0x88>)
 8008898:	60e3      	str	r3, [r4, #12]
 800889a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800889e:	6665      	str	r5, [r4, #100]	; 0x64
 80088a0:	f000 f847 	bl	8008932 <__retarget_lock_init_recursive>
 80088a4:	f7ff ff96 	bl	80087d4 <__sfp_lock_release>
 80088a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80088ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80088b0:	6025      	str	r5, [r4, #0]
 80088b2:	61a5      	str	r5, [r4, #24]
 80088b4:	2208      	movs	r2, #8
 80088b6:	4629      	mov	r1, r5
 80088b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80088bc:	f7fd fb08 	bl	8005ed0 <memset>
 80088c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80088c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80088c8:	4620      	mov	r0, r4
 80088ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088cc:	3468      	adds	r4, #104	; 0x68
 80088ce:	e7d9      	b.n	8008884 <__sfp+0x1c>
 80088d0:	2104      	movs	r1, #4
 80088d2:	4638      	mov	r0, r7
 80088d4:	f7ff ff62 	bl	800879c <__sfmoreglue>
 80088d8:	4604      	mov	r4, r0
 80088da:	6030      	str	r0, [r6, #0]
 80088dc:	2800      	cmp	r0, #0
 80088de:	d1d5      	bne.n	800888c <__sfp+0x24>
 80088e0:	f7ff ff78 	bl	80087d4 <__sfp_lock_release>
 80088e4:	230c      	movs	r3, #12
 80088e6:	603b      	str	r3, [r7, #0]
 80088e8:	e7ee      	b.n	80088c8 <__sfp+0x60>
 80088ea:	bf00      	nop
 80088ec:	08008cac 	.word	0x08008cac
 80088f0:	ffff0001 	.word	0xffff0001

080088f4 <_fwalk_reent>:
 80088f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088f8:	4606      	mov	r6, r0
 80088fa:	4688      	mov	r8, r1
 80088fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008900:	2700      	movs	r7, #0
 8008902:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008906:	f1b9 0901 	subs.w	r9, r9, #1
 800890a:	d505      	bpl.n	8008918 <_fwalk_reent+0x24>
 800890c:	6824      	ldr	r4, [r4, #0]
 800890e:	2c00      	cmp	r4, #0
 8008910:	d1f7      	bne.n	8008902 <_fwalk_reent+0xe>
 8008912:	4638      	mov	r0, r7
 8008914:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008918:	89ab      	ldrh	r3, [r5, #12]
 800891a:	2b01      	cmp	r3, #1
 800891c:	d907      	bls.n	800892e <_fwalk_reent+0x3a>
 800891e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008922:	3301      	adds	r3, #1
 8008924:	d003      	beq.n	800892e <_fwalk_reent+0x3a>
 8008926:	4629      	mov	r1, r5
 8008928:	4630      	mov	r0, r6
 800892a:	47c0      	blx	r8
 800892c:	4307      	orrs	r7, r0
 800892e:	3568      	adds	r5, #104	; 0x68
 8008930:	e7e9      	b.n	8008906 <_fwalk_reent+0x12>

08008932 <__retarget_lock_init_recursive>:
 8008932:	4770      	bx	lr

08008934 <__retarget_lock_acquire_recursive>:
 8008934:	4770      	bx	lr

08008936 <__retarget_lock_release_recursive>:
 8008936:	4770      	bx	lr

08008938 <__swhatbuf_r>:
 8008938:	b570      	push	{r4, r5, r6, lr}
 800893a:	460e      	mov	r6, r1
 800893c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008940:	2900      	cmp	r1, #0
 8008942:	b096      	sub	sp, #88	; 0x58
 8008944:	4614      	mov	r4, r2
 8008946:	461d      	mov	r5, r3
 8008948:	da07      	bge.n	800895a <__swhatbuf_r+0x22>
 800894a:	2300      	movs	r3, #0
 800894c:	602b      	str	r3, [r5, #0]
 800894e:	89b3      	ldrh	r3, [r6, #12]
 8008950:	061a      	lsls	r2, r3, #24
 8008952:	d410      	bmi.n	8008976 <__swhatbuf_r+0x3e>
 8008954:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008958:	e00e      	b.n	8008978 <__swhatbuf_r+0x40>
 800895a:	466a      	mov	r2, sp
 800895c:	f000 f902 	bl	8008b64 <_fstat_r>
 8008960:	2800      	cmp	r0, #0
 8008962:	dbf2      	blt.n	800894a <__swhatbuf_r+0x12>
 8008964:	9a01      	ldr	r2, [sp, #4]
 8008966:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800896a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800896e:	425a      	negs	r2, r3
 8008970:	415a      	adcs	r2, r3
 8008972:	602a      	str	r2, [r5, #0]
 8008974:	e7ee      	b.n	8008954 <__swhatbuf_r+0x1c>
 8008976:	2340      	movs	r3, #64	; 0x40
 8008978:	2000      	movs	r0, #0
 800897a:	6023      	str	r3, [r4, #0]
 800897c:	b016      	add	sp, #88	; 0x58
 800897e:	bd70      	pop	{r4, r5, r6, pc}

08008980 <__smakebuf_r>:
 8008980:	898b      	ldrh	r3, [r1, #12]
 8008982:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008984:	079d      	lsls	r5, r3, #30
 8008986:	4606      	mov	r6, r0
 8008988:	460c      	mov	r4, r1
 800898a:	d507      	bpl.n	800899c <__smakebuf_r+0x1c>
 800898c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008990:	6023      	str	r3, [r4, #0]
 8008992:	6123      	str	r3, [r4, #16]
 8008994:	2301      	movs	r3, #1
 8008996:	6163      	str	r3, [r4, #20]
 8008998:	b002      	add	sp, #8
 800899a:	bd70      	pop	{r4, r5, r6, pc}
 800899c:	ab01      	add	r3, sp, #4
 800899e:	466a      	mov	r2, sp
 80089a0:	f7ff ffca 	bl	8008938 <__swhatbuf_r>
 80089a4:	9900      	ldr	r1, [sp, #0]
 80089a6:	4605      	mov	r5, r0
 80089a8:	4630      	mov	r0, r6
 80089aa:	f7ff f987 	bl	8007cbc <_malloc_r>
 80089ae:	b948      	cbnz	r0, 80089c4 <__smakebuf_r+0x44>
 80089b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089b4:	059a      	lsls	r2, r3, #22
 80089b6:	d4ef      	bmi.n	8008998 <__smakebuf_r+0x18>
 80089b8:	f023 0303 	bic.w	r3, r3, #3
 80089bc:	f043 0302 	orr.w	r3, r3, #2
 80089c0:	81a3      	strh	r3, [r4, #12]
 80089c2:	e7e3      	b.n	800898c <__smakebuf_r+0xc>
 80089c4:	4b0d      	ldr	r3, [pc, #52]	; (80089fc <__smakebuf_r+0x7c>)
 80089c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80089c8:	89a3      	ldrh	r3, [r4, #12]
 80089ca:	6020      	str	r0, [r4, #0]
 80089cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089d0:	81a3      	strh	r3, [r4, #12]
 80089d2:	9b00      	ldr	r3, [sp, #0]
 80089d4:	6163      	str	r3, [r4, #20]
 80089d6:	9b01      	ldr	r3, [sp, #4]
 80089d8:	6120      	str	r0, [r4, #16]
 80089da:	b15b      	cbz	r3, 80089f4 <__smakebuf_r+0x74>
 80089dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089e0:	4630      	mov	r0, r6
 80089e2:	f000 f8d1 	bl	8008b88 <_isatty_r>
 80089e6:	b128      	cbz	r0, 80089f4 <__smakebuf_r+0x74>
 80089e8:	89a3      	ldrh	r3, [r4, #12]
 80089ea:	f023 0303 	bic.w	r3, r3, #3
 80089ee:	f043 0301 	orr.w	r3, r3, #1
 80089f2:	81a3      	strh	r3, [r4, #12]
 80089f4:	89a0      	ldrh	r0, [r4, #12]
 80089f6:	4305      	orrs	r5, r0
 80089f8:	81a5      	strh	r5, [r4, #12]
 80089fa:	e7cd      	b.n	8008998 <__smakebuf_r+0x18>
 80089fc:	08008791 	.word	0x08008791

08008a00 <_malloc_usable_size_r>:
 8008a00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a04:	1f18      	subs	r0, r3, #4
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	bfbc      	itt	lt
 8008a0a:	580b      	ldrlt	r3, [r1, r0]
 8008a0c:	18c0      	addlt	r0, r0, r3
 8008a0e:	4770      	bx	lr

08008a10 <_raise_r>:
 8008a10:	291f      	cmp	r1, #31
 8008a12:	b538      	push	{r3, r4, r5, lr}
 8008a14:	4604      	mov	r4, r0
 8008a16:	460d      	mov	r5, r1
 8008a18:	d904      	bls.n	8008a24 <_raise_r+0x14>
 8008a1a:	2316      	movs	r3, #22
 8008a1c:	6003      	str	r3, [r0, #0]
 8008a1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a22:	bd38      	pop	{r3, r4, r5, pc}
 8008a24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008a26:	b112      	cbz	r2, 8008a2e <_raise_r+0x1e>
 8008a28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a2c:	b94b      	cbnz	r3, 8008a42 <_raise_r+0x32>
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f000 f830 	bl	8008a94 <_getpid_r>
 8008a34:	462a      	mov	r2, r5
 8008a36:	4601      	mov	r1, r0
 8008a38:	4620      	mov	r0, r4
 8008a3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a3e:	f000 b817 	b.w	8008a70 <_kill_r>
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d00a      	beq.n	8008a5c <_raise_r+0x4c>
 8008a46:	1c59      	adds	r1, r3, #1
 8008a48:	d103      	bne.n	8008a52 <_raise_r+0x42>
 8008a4a:	2316      	movs	r3, #22
 8008a4c:	6003      	str	r3, [r0, #0]
 8008a4e:	2001      	movs	r0, #1
 8008a50:	e7e7      	b.n	8008a22 <_raise_r+0x12>
 8008a52:	2400      	movs	r4, #0
 8008a54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008a58:	4628      	mov	r0, r5
 8008a5a:	4798      	blx	r3
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	e7e0      	b.n	8008a22 <_raise_r+0x12>

08008a60 <raise>:
 8008a60:	4b02      	ldr	r3, [pc, #8]	; (8008a6c <raise+0xc>)
 8008a62:	4601      	mov	r1, r0
 8008a64:	6818      	ldr	r0, [r3, #0]
 8008a66:	f7ff bfd3 	b.w	8008a10 <_raise_r>
 8008a6a:	bf00      	nop
 8008a6c:	20000034 	.word	0x20000034

08008a70 <_kill_r>:
 8008a70:	b538      	push	{r3, r4, r5, lr}
 8008a72:	4d07      	ldr	r5, [pc, #28]	; (8008a90 <_kill_r+0x20>)
 8008a74:	2300      	movs	r3, #0
 8008a76:	4604      	mov	r4, r0
 8008a78:	4608      	mov	r0, r1
 8008a7a:	4611      	mov	r1, r2
 8008a7c:	602b      	str	r3, [r5, #0]
 8008a7e:	f7f9 f9a5 	bl	8001dcc <_kill>
 8008a82:	1c43      	adds	r3, r0, #1
 8008a84:	d102      	bne.n	8008a8c <_kill_r+0x1c>
 8008a86:	682b      	ldr	r3, [r5, #0]
 8008a88:	b103      	cbz	r3, 8008a8c <_kill_r+0x1c>
 8008a8a:	6023      	str	r3, [r4, #0]
 8008a8c:	bd38      	pop	{r3, r4, r5, pc}
 8008a8e:	bf00      	nop
 8008a90:	2000047c 	.word	0x2000047c

08008a94 <_getpid_r>:
 8008a94:	f7f9 b992 	b.w	8001dbc <_getpid>

08008a98 <__sread>:
 8008a98:	b510      	push	{r4, lr}
 8008a9a:	460c      	mov	r4, r1
 8008a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aa0:	f000 f894 	bl	8008bcc <_read_r>
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	bfab      	itete	ge
 8008aa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008aaa:	89a3      	ldrhlt	r3, [r4, #12]
 8008aac:	181b      	addge	r3, r3, r0
 8008aae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008ab2:	bfac      	ite	ge
 8008ab4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008ab6:	81a3      	strhlt	r3, [r4, #12]
 8008ab8:	bd10      	pop	{r4, pc}

08008aba <__swrite>:
 8008aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008abe:	461f      	mov	r7, r3
 8008ac0:	898b      	ldrh	r3, [r1, #12]
 8008ac2:	05db      	lsls	r3, r3, #23
 8008ac4:	4605      	mov	r5, r0
 8008ac6:	460c      	mov	r4, r1
 8008ac8:	4616      	mov	r6, r2
 8008aca:	d505      	bpl.n	8008ad8 <__swrite+0x1e>
 8008acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ad0:	2302      	movs	r3, #2
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f000 f868 	bl	8008ba8 <_lseek_r>
 8008ad8:	89a3      	ldrh	r3, [r4, #12]
 8008ada:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ade:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ae2:	81a3      	strh	r3, [r4, #12]
 8008ae4:	4632      	mov	r2, r6
 8008ae6:	463b      	mov	r3, r7
 8008ae8:	4628      	mov	r0, r5
 8008aea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008aee:	f000 b817 	b.w	8008b20 <_write_r>

08008af2 <__sseek>:
 8008af2:	b510      	push	{r4, lr}
 8008af4:	460c      	mov	r4, r1
 8008af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008afa:	f000 f855 	bl	8008ba8 <_lseek_r>
 8008afe:	1c43      	adds	r3, r0, #1
 8008b00:	89a3      	ldrh	r3, [r4, #12]
 8008b02:	bf15      	itete	ne
 8008b04:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b0e:	81a3      	strheq	r3, [r4, #12]
 8008b10:	bf18      	it	ne
 8008b12:	81a3      	strhne	r3, [r4, #12]
 8008b14:	bd10      	pop	{r4, pc}

08008b16 <__sclose>:
 8008b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b1a:	f000 b813 	b.w	8008b44 <_close_r>
	...

08008b20 <_write_r>:
 8008b20:	b538      	push	{r3, r4, r5, lr}
 8008b22:	4d07      	ldr	r5, [pc, #28]	; (8008b40 <_write_r+0x20>)
 8008b24:	4604      	mov	r4, r0
 8008b26:	4608      	mov	r0, r1
 8008b28:	4611      	mov	r1, r2
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	602a      	str	r2, [r5, #0]
 8008b2e:	461a      	mov	r2, r3
 8008b30:	f7f9 f983 	bl	8001e3a <_write>
 8008b34:	1c43      	adds	r3, r0, #1
 8008b36:	d102      	bne.n	8008b3e <_write_r+0x1e>
 8008b38:	682b      	ldr	r3, [r5, #0]
 8008b3a:	b103      	cbz	r3, 8008b3e <_write_r+0x1e>
 8008b3c:	6023      	str	r3, [r4, #0]
 8008b3e:	bd38      	pop	{r3, r4, r5, pc}
 8008b40:	2000047c 	.word	0x2000047c

08008b44 <_close_r>:
 8008b44:	b538      	push	{r3, r4, r5, lr}
 8008b46:	4d06      	ldr	r5, [pc, #24]	; (8008b60 <_close_r+0x1c>)
 8008b48:	2300      	movs	r3, #0
 8008b4a:	4604      	mov	r4, r0
 8008b4c:	4608      	mov	r0, r1
 8008b4e:	602b      	str	r3, [r5, #0]
 8008b50:	f7f9 f98f 	bl	8001e72 <_close>
 8008b54:	1c43      	adds	r3, r0, #1
 8008b56:	d102      	bne.n	8008b5e <_close_r+0x1a>
 8008b58:	682b      	ldr	r3, [r5, #0]
 8008b5a:	b103      	cbz	r3, 8008b5e <_close_r+0x1a>
 8008b5c:	6023      	str	r3, [r4, #0]
 8008b5e:	bd38      	pop	{r3, r4, r5, pc}
 8008b60:	2000047c 	.word	0x2000047c

08008b64 <_fstat_r>:
 8008b64:	b538      	push	{r3, r4, r5, lr}
 8008b66:	4d07      	ldr	r5, [pc, #28]	; (8008b84 <_fstat_r+0x20>)
 8008b68:	2300      	movs	r3, #0
 8008b6a:	4604      	mov	r4, r0
 8008b6c:	4608      	mov	r0, r1
 8008b6e:	4611      	mov	r1, r2
 8008b70:	602b      	str	r3, [r5, #0]
 8008b72:	f7f9 f98a 	bl	8001e8a <_fstat>
 8008b76:	1c43      	adds	r3, r0, #1
 8008b78:	d102      	bne.n	8008b80 <_fstat_r+0x1c>
 8008b7a:	682b      	ldr	r3, [r5, #0]
 8008b7c:	b103      	cbz	r3, 8008b80 <_fstat_r+0x1c>
 8008b7e:	6023      	str	r3, [r4, #0]
 8008b80:	bd38      	pop	{r3, r4, r5, pc}
 8008b82:	bf00      	nop
 8008b84:	2000047c 	.word	0x2000047c

08008b88 <_isatty_r>:
 8008b88:	b538      	push	{r3, r4, r5, lr}
 8008b8a:	4d06      	ldr	r5, [pc, #24]	; (8008ba4 <_isatty_r+0x1c>)
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	4604      	mov	r4, r0
 8008b90:	4608      	mov	r0, r1
 8008b92:	602b      	str	r3, [r5, #0]
 8008b94:	f7f9 f989 	bl	8001eaa <_isatty>
 8008b98:	1c43      	adds	r3, r0, #1
 8008b9a:	d102      	bne.n	8008ba2 <_isatty_r+0x1a>
 8008b9c:	682b      	ldr	r3, [r5, #0]
 8008b9e:	b103      	cbz	r3, 8008ba2 <_isatty_r+0x1a>
 8008ba0:	6023      	str	r3, [r4, #0]
 8008ba2:	bd38      	pop	{r3, r4, r5, pc}
 8008ba4:	2000047c 	.word	0x2000047c

08008ba8 <_lseek_r>:
 8008ba8:	b538      	push	{r3, r4, r5, lr}
 8008baa:	4d07      	ldr	r5, [pc, #28]	; (8008bc8 <_lseek_r+0x20>)
 8008bac:	4604      	mov	r4, r0
 8008bae:	4608      	mov	r0, r1
 8008bb0:	4611      	mov	r1, r2
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	602a      	str	r2, [r5, #0]
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	f7f9 f982 	bl	8001ec0 <_lseek>
 8008bbc:	1c43      	adds	r3, r0, #1
 8008bbe:	d102      	bne.n	8008bc6 <_lseek_r+0x1e>
 8008bc0:	682b      	ldr	r3, [r5, #0]
 8008bc2:	b103      	cbz	r3, 8008bc6 <_lseek_r+0x1e>
 8008bc4:	6023      	str	r3, [r4, #0]
 8008bc6:	bd38      	pop	{r3, r4, r5, pc}
 8008bc8:	2000047c 	.word	0x2000047c

08008bcc <_read_r>:
 8008bcc:	b538      	push	{r3, r4, r5, lr}
 8008bce:	4d07      	ldr	r5, [pc, #28]	; (8008bec <_read_r+0x20>)
 8008bd0:	4604      	mov	r4, r0
 8008bd2:	4608      	mov	r0, r1
 8008bd4:	4611      	mov	r1, r2
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	602a      	str	r2, [r5, #0]
 8008bda:	461a      	mov	r2, r3
 8008bdc:	f7f9 f910 	bl	8001e00 <_read>
 8008be0:	1c43      	adds	r3, r0, #1
 8008be2:	d102      	bne.n	8008bea <_read_r+0x1e>
 8008be4:	682b      	ldr	r3, [r5, #0]
 8008be6:	b103      	cbz	r3, 8008bea <_read_r+0x1e>
 8008be8:	6023      	str	r3, [r4, #0]
 8008bea:	bd38      	pop	{r3, r4, r5, pc}
 8008bec:	2000047c 	.word	0x2000047c

08008bf0 <_init>:
 8008bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bf2:	bf00      	nop
 8008bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bf6:	bc08      	pop	{r3}
 8008bf8:	469e      	mov	lr, r3
 8008bfa:	4770      	bx	lr

08008bfc <_fini>:
 8008bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bfe:	bf00      	nop
 8008c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c02:	bc08      	pop	{r3}
 8008c04:	469e      	mov	lr, r3
 8008c06:	4770      	bx	lr
